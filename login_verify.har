{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2024-10-12T02:10:17.939Z",
        "id": "page_9",
        "title": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp",
        "pageTimings": {
          "onContentLoad": 195.88399999884132,
          "onLoad": 223.65399999944202
        }
      },
      {
        "startedDateTime": "2024-10-12T02:12:12.470Z",
        "id": "page_10",
        "title": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp",
        "pageTimings": {
          "onContentLoad": null,
          "onLoad": null
        }
      },
      {
        "startedDateTime": "2024-10-12T02:12:14.078Z",
        "id": "page_11",
        "title": "http://payment.xidian.edu.cn/NetWorkUI/caslogin-22009100795-9e8878898dc81e96ff3990e09f1a575c",
        "pageTimings": {
          "onContentLoad": 219.37900000011723,
          "onLoad": 243.07800000133284
        }
      }
    ],
    "entries": [
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81471
              },
              {
                "functionName": "ajax",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 77290
              },
              {
                "functionName": "createSliderCaptcha",
                "scriptId": "298485",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                "lineNumber": 380,
                "columnNumber": 6
              },
              {
                "functionName": "",
                "scriptId": "298485",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                "lineNumber": 114,
                "columnNumber": 16
              },
              {
                "functionName": "dispatch",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 42566
              },
              {
                "functionName": "k.event.add.v.handle",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 40567
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "9774",
        "pageref": "page_9",
        "request": {
          "method": "GET",
          "url": "https://ids.xidian.edu.cn/authserver/common/toSliderCaptcha.htl",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "route=0c3b87d026db5a8dc3b618d30f0e5979; JSESSIONID=6273F1FF103584280B2D5463D1AEDE6D; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=zh_CN; happyVoyage=AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I="
            },
            {
              "name": "Host",
              "value": "ids.xidian.edu.cn"
            },
            {
              "name": "Referer",
              "value": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "route",
              "value": "0c3b87d026db5a8dc3b618d30f0e5979",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "6273F1FF103584280B2D5463D1AEDE6D",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE",
              "value": "zh_CN",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "2025-08-02T10:26:04.367Z",
              "httpOnly": false,
              "secure": true,
              "sameSite": "None"
            },
            {
              "name": "happyVoyage",
              "value": "AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I=",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 1053,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "*"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Content-Language",
              "value": "zh-CN"
            },
            {
              "name": "Content-Type",
              "value": "text/html;charset=UTF-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:08:36 GMT"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Server",
              "value": "openresty"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "X-Frame-Options",
              "value": "ALLOWALL"
            },
            {
              "name": "X-XSS-Protection",
              "value": "1; mode=block"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1742,
            "mimeType": "text/html",
            "compression": 966
          },
          "redirectURL": "",
          "headersSize": 471,
          "bodySize": 776,
          "_transferSize": 1247,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:11:31.982Z",
        "time": 251.8450000006851,
        "timings": {
          "blocked": 2.818000000855187,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.24299999999999988,
          "wait": 246.9600000007971,
          "receive": 1.8239999990328215,
          "_blocked_queueing": 0.787000000855187,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 49614
              },
              {
                "functionName": "Ie",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 47860
              },
              {
                "functionName": "append",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 49515
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50607
              },
              {
                "functionName": "_",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 31835
              },
              {
                "functionName": "html",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50285
              },
              {
                "functionName": "success",
                "scriptId": "298485",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                "lineNumber": 386,
                "columnNumber": 35
              },
              {
                "functionName": "c",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 27737
              },
              {
                "functionName": "fireWith",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 28482
              },
              {
                "functionName": "l",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 78784
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81112
              }
            ],
            "parent": {
              "description": "load",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 81297
                },
                {
                  "functionName": "ajax",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 77290
                },
                {
                  "functionName": "createSliderCaptcha",
                  "scriptId": "298485",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                  "lineNumber": 380,
                  "columnNumber": 6
                },
                {
                  "functionName": "",
                  "scriptId": "298485",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                  "lineNumber": 114,
                  "columnNumber": 16
                },
                {
                  "functionName": "dispatch",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 42566
                },
                {
                  "functionName": "k.event.add.v.handle",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 40567
                }
              ]
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "pageref": "page_9",
        "request": {
          "method": "GET",
          "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/js/plugin/sliderCaptcha/css/slidercaptcha.css?v=20231122.140541",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "20231122.140541"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "*"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:07:16 GMT"
            },
            {
              "name": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "name": "Content-Type",
              "value": "text/css;charset=UTF-8"
            },
            {
              "name": "Last-Modified",
              "value": "Wed, 22 Nov 2023 06:04:58 GMT"
            },
            {
              "name": "Server",
              "value": "openresty"
            },
            {
              "name": "X-Frame-Options",
              "value": "ALLOWALL"
            }
          ],
          "cookies": [],
          "content": {
            "size": 4604,
            "mimeType": "text/css"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:11:32.236Z",
        "time": 1.357000001007691,
        "timings": {
          "blocked": 0.6660000014912802,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.3020000006122282,
          "receive": 0.3889999989041826,
          "_blocked_queueing": 0.4450000014912803,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81471
              },
              {
                "functionName": "ajax",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 77290
              },
              {
                "functionName": "k._evalUrl",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 79345
              },
              {
                "functionName": "Ie",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 48083
              },
              {
                "functionName": "append",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 49515
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50607
              },
              {
                "functionName": "_",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 31835
              },
              {
                "functionName": "html",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50285
              },
              {
                "functionName": "success",
                "scriptId": "298485",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                "lineNumber": 386,
                "columnNumber": 35
              },
              {
                "functionName": "c",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 27737
              },
              {
                "functionName": "fireWith",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 28482
              },
              {
                "functionName": "l",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 78784
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81112
              }
            ],
            "parent": {
              "description": "load",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 81297
                },
                {
                  "functionName": "ajax",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 77290
                },
                {
                  "functionName": "createSliderCaptcha",
                  "scriptId": "298485",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                  "lineNumber": 380,
                  "columnNumber": 6
                },
                {
                  "functionName": "",
                  "scriptId": "298485",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                  "lineNumber": 114,
                  "columnNumber": 16
                },
                {
                  "functionName": "dispatch",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 42566
                },
                {
                  "functionName": "k.event.add.v.handle",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 40567
                }
              ]
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "xhr",
        "cache": {},
        "pageref": "page_9",
        "request": {
          "method": "GET",
          "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/js/plugin/sliderCaptcha/js/longbow.slidercaptcha.js?v=20231122.140541",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "20231122.140541"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "*"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Content-Length",
              "value": "13212"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:07:16 GMT"
            },
            {
              "name": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript;charset=UTF-8"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 22 Aug 2024 02:14:22 GMT"
            },
            {
              "name": "Server",
              "value": "openresty"
            },
            {
              "name": "X-Frame-Options",
              "value": "ALLOWALL"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13212,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:11:32.237Z",
        "time": 2.9340000000956934,
        "timings": {
          "blocked": 1.6919999999664723,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.1360000004204921,
          "receive": 1.1059999997087289,
          "_blocked_queueing": 1.1389999999664724,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81471
              },
              {
                "functionName": "ajax",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 77290
              },
              {
                "functionName": "k._evalUrl",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 79345
              },
              {
                "functionName": "Ie",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 48083
              },
              {
                "functionName": "append",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 49515
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50607
              },
              {
                "functionName": "_",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 31835
              },
              {
                "functionName": "html",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50285
              },
              {
                "functionName": "success",
                "scriptId": "298485",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                "lineNumber": 386,
                "columnNumber": 35
              },
              {
                "functionName": "c",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 27737
              },
              {
                "functionName": "fireWith",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 28482
              },
              {
                "functionName": "l",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 78784
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81112
              }
            ],
            "parent": {
              "description": "load",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 81297
                },
                {
                  "functionName": "ajax",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 77290
                },
                {
                  "functionName": "createSliderCaptcha",
                  "scriptId": "298485",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                  "lineNumber": 380,
                  "columnNumber": 6
                },
                {
                  "functionName": "",
                  "scriptId": "298485",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                  "lineNumber": 114,
                  "columnNumber": 16
                },
                {
                  "functionName": "dispatch",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 42566
                },
                {
                  "functionName": "k.event.add.v.handle",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 40567
                }
              ]
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "xhr",
        "cache": {},
        "pageref": "page_9",
        "request": {
          "method": "GET",
          "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/js/plugin/sliderCaptcha/js/ids-sliderCaptcha.js?v=20231122.140541",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "20231122.140541"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "*"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Content-Length",
              "value": "1777"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:07:16 GMT"
            },
            {
              "name": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript;charset=UTF-8"
            },
            {
              "name": "Last-Modified",
              "value": "Wed, 22 Nov 2023 06:04:58 GMT"
            },
            {
              "name": "Server",
              "value": "openresty"
            },
            {
              "name": "X-Frame-Options",
              "value": "ALLOWALL"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1777,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:11:32.241Z",
        "time": 2.1459999989019707,
        "timings": {
          "blocked": 1.039999999349122,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.14499999981909056,
          "receive": 0.9609999997337582,
          "_blocked_queueing": 0.5729999993491219,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81471
              },
              {
                "functionName": "ajax",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 77290
              },
              {
                "functionName": "openSliderCaptcha",
                "scriptId": "298508",
                "url": "",
                "lineNumber": 3,
                "columnNumber": 6
              },
              {
                "functionName": "",
                "scriptId": "298508",
                "url": "",
                "lineNumber": 0,
                "columnNumber": 0
              },
              {
                "functionName": "b",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 764
              },
              {
                "functionName": "globalEval",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 2676
              },
              {
                "functionName": "dataFilter",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 79479
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 78068
              },
              {
                "functionName": "l",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 78470
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81112
              },
              {
                "functionName": "send",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81471
              },
              {
                "functionName": "ajax",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 77290
              },
              {
                "functionName": "k._evalUrl",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 79345
              },
              {
                "functionName": "Ie",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 48083
              },
              {
                "functionName": "append",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 49515
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50607
              },
              {
                "functionName": "_",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 31835
              },
              {
                "functionName": "html",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 50285
              },
              {
                "functionName": "success",
                "scriptId": "298485",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                "lineNumber": 386,
                "columnNumber": 35
              },
              {
                "functionName": "c",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 27737
              },
              {
                "functionName": "fireWith",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 28482
              },
              {
                "functionName": "l",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 78784
              },
              {
                "functionName": "",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81112
              }
            ],
            "parent": {
              "description": "load",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 81297
                },
                {
                  "functionName": "ajax",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 77290
                },
                {
                  "functionName": "k._evalUrl",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 79345
                },
                {
                  "functionName": "Ie",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 48083
                },
                {
                  "functionName": "append",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 49515
                },
                {
                  "functionName": "",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 50607
                },
                {
                  "functionName": "_",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 31835
                },
                {
                  "functionName": "html",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 50285
                },
                {
                  "functionName": "success",
                  "scriptId": "298485",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                  "lineNumber": 386,
                  "columnNumber": 35
                },
                {
                  "functionName": "c",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 27737
                },
                {
                  "functionName": "fireWith",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 28482
                },
                {
                  "functionName": "l",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 78784
                },
                {
                  "functionName": "",
                  "scriptId": "298477",
                  "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                  "lineNumber": 1,
                  "columnNumber": 81112
                }
              ],
              "parent": {
                "description": "load",
                "callFrames": [
                  {
                    "functionName": "send",
                    "scriptId": "298477",
                    "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                    "lineNumber": 1,
                    "columnNumber": 81297
                  },
                  {
                    "functionName": "ajax",
                    "scriptId": "298477",
                    "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                    "lineNumber": 1,
                    "columnNumber": 77290
                  },
                  {
                    "functionName": "createSliderCaptcha",
                    "scriptId": "298485",
                    "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                    "lineNumber": 380,
                    "columnNumber": 6
                  },
                  {
                    "functionName": "",
                    "scriptId": "298485",
                    "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/web/js/login.js?v=20231122.140541",
                    "lineNumber": 114,
                    "columnNumber": 16
                  },
                  {
                    "functionName": "dispatch",
                    "scriptId": "298477",
                    "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                    "lineNumber": 1,
                    "columnNumber": 42566
                  },
                  {
                    "functionName": "k.event.add.v.handle",
                    "scriptId": "298477",
                    "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                    "lineNumber": 1,
                    "columnNumber": 40567
                  }
                ]
              }
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "9774",
        "pageref": "page_9",
        "request": {
          "method": "GET",
          "url": "https://ids.xidian.edu.cn/authserver/common/openSliderCaptcha.htl?_=1728699018109",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "application/json, text/javascript, */*; q=0.01"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "route=0c3b87d026db5a8dc3b618d30f0e5979; JSESSIONID=6273F1FF103584280B2D5463D1AEDE6D; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=zh_CN; happyVoyage=AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I="
            },
            {
              "name": "Host",
              "value": "ids.xidian.edu.cn"
            },
            {
              "name": "Referer",
              "value": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [
            {
              "name": "_",
              "value": "1728699018109"
            }
          ],
          "cookies": [
            {
              "name": "route",
              "value": "0c3b87d026db5a8dc3b618d30f0e5979",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "6273F1FF103584280B2D5463D1AEDE6D",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE",
              "value": "zh_CN",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "2025-08-02T10:26:04.367Z",
              "httpOnly": false,
              "secure": true,
              "sameSite": "None"
            },
            {
              "name": "happyVoyage",
              "value": "AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I=",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 1114,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "*"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Type",
              "value": "application/json;charset=UTF-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:08:36 GMT"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Server",
              "value": "openresty"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "X-Frame-Options",
              "value": "ALLOWALL"
            },
            {
              "name": "X-XSS-Protection",
              "value": "1; mode=block"
            }
          ],
          "cookies": [],
          "content": {
            "size": 30797,
            "mimeType": "application/json",
            "compression": -14
          },
          "redirectURL": "",
          "headersSize": 429,
          "bodySize": 30811,
          "_transferSize": 31240,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:11:32.244Z",
        "time": 147.31899999969755,
        "timings": {
          "blocked": 1.3539999991926597,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.132,
          "wait": 140.83000000028963,
          "receive": 5.003000000215252,
          "_blocked_queueing": 0.6799999991926597,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 81471
              },
              {
                "functionName": "ajax",
                "scriptId": "298477",
                "url": "https://ids.xidian.edu.cn/authserver/xidianNewThemecs0129/static/common/jquery-latest.min.js?v=20231122.140541",
                "lineNumber": 1,
                "columnNumber": 77290
              },
              {
                "functionName": "verify",
                "scriptId": "298507",
                "url": "",
                "lineNumber": 35,
                "columnNumber": 14
              },
              {
                "functionName": "_proto.verify",
                "scriptId": "298507",
                "url": "",
                "lineNumber": 315,
                "columnNumber": 36
              },
              {
                "functionName": "handleDragEnd",
                "scriptId": "298507",
                "url": "",
                "lineNumber": 273,
                "columnNumber": 28
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "9774",
        "pageref": "page_9",
        "request": {
          "method": "POST",
          "url": "https://ids.xidian.edu.cn/authserver/common/verifySliderCaptcha.htl",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "application/json, text/javascript, */*; q=0.01"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "31"
            },
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded;charset=UTF-8"
            },
            {
              "name": "Cookie",
              "value": "route=0c3b87d026db5a8dc3b618d30f0e5979; JSESSIONID=6273F1FF103584280B2D5463D1AEDE6D; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=zh_CN; happyVoyage=AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I="
            },
            {
              "name": "Host",
              "value": "ids.xidian.edu.cn"
            },
            {
              "name": "Origin",
              "value": "https://ids.xidian.edu.cn"
            },
            {
              "name": "Referer",
              "value": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "route",
              "value": "0c3b87d026db5a8dc3b618d30f0e5979",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "6273F1FF103584280B2D5463D1AEDE6D",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE",
              "value": "zh_CN",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "2025-08-02T10:26:04.367Z",
              "httpOnly": false,
              "secure": true,
              "sameSite": "None"
            },
            {
              "name": "happyVoyage",
              "value": "AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I=",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 1219,
          "bodySize": 31,
          "postData": {
            "mimeType": "application/x-www-form-urlencoded;charset=UTF-8",
            "text": "canvasLength=280&moveLength=188",
            "params": [
              {
                "name": "canvasLength",
                "value": "280"
              },
              {
                "name": "moveLength",
                "value": "188"
              }
            ]
          }
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "*"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "https://ids.xidian.edu.cn"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Type",
              "value": "application/json;charset=UTF-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:09:16 GMT"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Server",
              "value": "openresty"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "X-Frame-Options",
              "value": "ALLOWALL"
            },
            {
              "name": "X-XSS-Protection",
              "value": "1; mode=block"
            }
          ],
          "cookies": [],
          "content": {
            "size": 36,
            "mimeType": "application/json",
            "compression": -12
          },
          "redirectURL": "",
          "headersSize": 485,
          "bodySize": 48,
          "_transferSize": 533,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:12.447Z",
        "time": 16.21999999952095,
        "timings": {
          "blocked": 2.879000000598025,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.24,
          "wait": 8.176999999986148,
          "receive": 4.923999998936779,
          "_blocked_queueing": 1.1140000005980255,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "9774",
        "pageref": "page_10",
        "request": {
          "method": "POST",
          "url": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "6034"
            },
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "Cookie",
              "value": "route=0c3b87d026db5a8dc3b618d30f0e5979; JSESSIONID=6273F1FF103584280B2D5463D1AEDE6D; org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE=zh_CN; happyVoyage=AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I="
            },
            {
              "name": "Host",
              "value": "ids.xidian.edu.cn"
            },
            {
              "name": "Origin",
              "value": "https://ids.xidian.edu.cn"
            },
            {
              "name": "Referer",
              "value": "https://ids.xidian.edu.cn/authserver/login?service=http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [
            {
              "name": "service",
              "value": "http%3A%2F%2Fpayment.xidian.edu.cn%2FNetWorkUI%2Fpages%2Fcaslogin.jsp"
            }
          ],
          "cookies": [
            {
              "name": "route",
              "value": "0c3b87d026db5a8dc3b618d30f0e5979",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "6273F1FF103584280B2D5463D1AEDE6D",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE",
              "value": "zh_CN",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "2025-08-02T10:26:04.367Z",
              "httpOnly": false,
              "secure": true,
              "sameSite": "None"
            },
            {
              "name": "happyVoyage",
              "value": "AlTRBwEQ7FnoyW0IccCPGU2VU+f5tD/21i/J9+2YuuMSbGYVKpnXozc7buMfks93YJpfNR4nUHRj0qKkPRLDclEv0j3o457PH+ELHnY4xZctikKZeCB7f0434Rkpn119vTh/YwPlys3kunzluclGyxsp1b1iI5A1iNuyzMb/83I=",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 1398,
          "bodySize": 6034,
          "postData": {
            "mimeType": "application/x-www-form-urlencoded",
            "text": "username=22009100795&password=epef9FVepbJffJM98%2F36PWaofSKVFxg32DhzYkzykCE7Y7XBuPbWsdFHo2rLlJf8PkaOZMQoLBFaIwBHm0Jgi990QBMn%2FO2UmGP6RAteqMI%3D&captcha=&_eventId=submit&cllt=userNameLogin&dllt=generalLogin&lt=&execution=2f10a518-70ed-4f57-b149-2b59d124a96c_ZXlKaGJHY2lPaUpJVXpVeE1pSjkuQXByZ0RWSVZGT1ErMy93Q0IySllRVTFwZUIrckNyVHFjS2VreTZUY0dNT0R0eHNNWld0SDVCY00yMTBCL2J1bk5OaXhMTVVDS0ZaeUZjWGcrS3Z6cFdJc0g2bzNyc0ROSG81K3daajA5QTVMYnNXc2o0ME8wOHZCUURXTXBxSERtQ1hYRFBreUsxR2hhM0JJR2hPemFUTUVXVVZoTFZmcUZ6aThXL2tzQnlqaXBmSjZ4QjlhR3huc3dyRm9rNzlXWS8ySXZnNEhOM0pLalRBUHBmSjlBeTJkQWdLZ2ZWOWNseEpIemhaSHZSUjQ5Rncrd1B5TjV0Y0lnZGJiTVRUckJOTWc5NlU2Mi82RVZBNEJSR0o3MnFSaVBMVjI0VzAvOHo1YW82N0N3TzF5R3prcXluMW9UMGlCT1BMOEVvcHRtRTk1YmxFRkxzendRcGg2TWlDenN4ZURWUHBldllsbGlmc3VKdFdkdCtjdDhVOHNGOVpTOS80cDlJWGJ5UGhGdkJBVU4zSlFRaEMyb1lzUzRQOFNMZktFRFRNbFAwdW83a3Z5bXRCdWRnd0M3djk2ejJRREZmY2wyWWRqMks0MFhNOFFhTzM5aTRlMmNqWW4xcnBDZHJjWlovS1VpeGZFREhqWjdja3UzRkJQT212ejRJUnNPSFhuL3FKbGZuUW5mNFl2K2gweXlWenZVN0hkaEg4QUs1OTVJUysycjlkZFZESU4vc1hFOXhXSFRCNkYwTlpSOW9Va2hwUG1RMUVRcWUrZXFISGpWMU5JcTVNZnZPbHR6RG00akNZRSs3b3JLWkVldXJjYWQzeHNxNXZ5VXdabjgyelMyYmY3V0IzN2hHaHY2NTlYWTVmR3ZaNEpKa1FyaTRpSC95YVRhc25RV2pFMzhBR3BCaEhrTnp1S1dTZW1td2p3MlV3SzBJR1ZQaXhrYjV1c2tWMWw0UVczZ2hwWGF4aVVYZjBsdjc2OTBqYktmNUtSZWNwTHVzWXNEY0huK2JoUGhjQW5MZWtNaVNHdHJlVk90QkNkYWNmUzVwdGZiZW85OUFueUZ1Z1pKU3Z0RFVwQkJWaG5rRjVROGkzWGM1U1hzOWp0N0V4bFBIUUllUDA1WGpwc3BpTmJ1M3Z4MWRBMWM5RzFIcmVWaFBCbjZ4dlBIQ0FjRmRTb0tycWF3K252MmVKZ0plVUdud0hqMWJUUDRBZE02eW40a1RUektEc044S0sxcUNta1plLzBIMUhMNjl4cUVLem1vQTNLUkhBa1V6VU9jbDhSMUNFYWI5OWcvYlBGamJrY2Y5SUdIRG14dEFqL0dTVmpUc0RkRndIT1JwOGl4dW4zUmJPTlRQa2t0endFUnh2ZDI4c3lRNnY3YkhmYllBTFNnOHVTaTd1WVZMTXpHSGdUeGhJL2ZHSkt4blNFVDdDeU1HOWh6aG92a0lhUE9yT0hnUXlsMTYrTTRwZE40TVY4aGxMWVQ3K0dnOHFwWTdjRFdRalR4V1ZNT21aNFpzZzJDWndBczkxMzFKVks1VXMydW42STlLRVdITlVaNFhvVUlmQ0k2Zk5OcUgzeENMS1lwVGJJOXNrV2s3eUtmWXZmY29DdHBXMGhqeUxaQmh1SUh3MStHS0RNUENicXBqSkF2ZURrVnRhdzNkUk1GWUZTRjlQV1drL2p4NzNweW54SEk4aWZDKzB1VEdocnExVmYvMHQwVTNwYUVlakRudFdTeStqMk93UzRrWDF6NVI5cmMrOVBRR3V1ZWI4T0ZNenNlUEZ0TmN2Z3ZEalQ1Y3RJTEVMU0R6OGZKajIyaUhFZkMzejFCWlY3b25ZYUJNYmpPeHNWSmhuSEVEZmp6Nmw4cnp3UnkrSkY0Ni9NajJZT0dzbG1CUnhtSHpIOWFicFZ4V0RIeXVvUE1FQ3ZhNjdXSklJR3BRVTNWVEhtNUtZZ3k2UGpKOFpsTnFpanNaU3hvd3pmeTFDV2ZZMWZ5N2J2V1Fva0swcVZRNWVFNElPRlNrNnZoUEI1N01KcE9PZE9ZcE8xT1Q4bXU1ME1hanFCMFZFWDcvdUdzOVZsc0NIWXlCNEdBenkvdGR2V0F1bHR0RGlrT2V6Q3IrbUQwNUFSYWE3VEVJRy9YMVpxZGgvOU1NT2dOSmdMaTRvbzZBaUVpTU5zL29DMXkwZngxQzVpK0lsMTFXOG13ekJ1SElmRDNPbFpjYVIzMEY4RXg5N0RvaWg0ZG5mQjhkNmcveGw2K1h0ck5hbmdVSjBTT3lnQUxtbldtL0ROZ3V1YlFvNFVhOExrOHZDUWNzY3hHRldtYzFtdkdUOEVEY2lLeEdvSzh6aUhTTFNpbzNTUEs4VFZlMWE1NGxrc0hMbDZ5S0VPbVN4dXFaQ1FwMjkzY3RiOVJGUEt1bmxWZi96dEtsSE56R2RoR0VtWkhldGVTb2hTVXNWaWFTREgvTnY5blFTNGZNT1JMU0RMcjVRMVVvNGNEcjF4dVhuTnlCY09HbmdRMlFwUm9lTjBEQ1FIYnJqOUxhRzJPeEIvOHhqZ3lHbDdjbjVFTENjWGp6ZTRtVEFzNlF4ZytWZVdhdDZvcnJYeGx2MGdBYVBYcDJqQlVRdDZ5UWxNc3Q5RW1selM3RndQWnNSLzV3ODUvRStDRzZGQ0k2STcwMVZWWW92TFhyZ3lVTlRDRTh6NU83NDhMVWJncG9OSm9tdjAzaFdycDlYQ1VWZ01wYnorWjhXeUtpdkplT2tkcTdxenIwaFZ6d3BodDVtU0VMOTJQZ01kdDJqTW53U3c4MlFGM09wQnk0ZFYySU00RkFuNzRXVUQrcWM0NjRIUXRzSHlPemt6aXUrMG1FOEswQyt6ZzY5NWpITkJoU3p3M3EwcUpla3FIVWFESnJQdDNDdDJOMWxQbkpmbkJyTlBiQWV3dVhuRmZtMXViZE04MFpzaHF2ajI3bGJFZ1Q4RDhVZkppK05MLzNaUnBlaXA0b2YwM1RNWllHYlJwZGc2MVJ6NDNaMDJnWnVtY05jVHRjZ2doZ09HZkJpb0hzMDlrYU9UYlFWMW9idXlRbjdrblNzUFNaazFWUyt0L25HYjNiNURIbjBjY3dXOThKSnRaYUc1QTZTeWkrRzBVVEJqYndDT1M3OW0xa3BZcGViTUxpUEQ0RVdUYkI1V0xoV2x3Q29kS29oeUM3VjYyTm1uMWVzdVNDbG5xbWY2ZWNaWkhRcXF1MnBUaUdqRUpWOWRGVHEySjRmTzdESFBseXZRbktVT0FZajFQMXdkYU5rTXNXMG5YTnF3by9LYmhZTnFMSktvY25BeDNuaVE2VGJzNTFETUljZnZtZlQxNDR5Ym1pRWN5dVd4N3RaaU8rMnZiWVBUTFE1bDkwZE43TmRPWUp1Q05FcG9NSkoxSlFxcVR4Lzh0b3dRdFprWnRZUnpCbG4xZmRWcmFBcTRIWE9JckJpR0lkS3E3bXBIbnk0VWJRN0VYQVBBR29lQ3FBM0tCSDRRdC84VFhiVDJNSlFCelFubnp2dE9ISzJoSG52Y1htOFFLY01MYnpjVU95b0c3cEF5K1MvTXlncTNLaW16Zk1FV0NCQkxVWkFFaEU3YUFmaGNKY3VSYmZGeVhmSHZjNEovOEZsbFljQzVuRWl4KzJHaCt4RnozaG04VjZuRGpjL1VncFFmd1gxMFJma2dCM2svUEdEcnY3aXVRRHJXb1NselNoVXNWZWw5Z1NZQ2VOWXliRjdOR1dtMkdlN2RQR2Zadzd3Ny9DY1N2Q2JXTENPN0d0RDhCQ0JlQlFteGVpL25FdmVoL3ExbUY3cGlVM21VK09PUjZBenh4cHlZM3lMZXQrOU1RZU9vcCtyR3NES0RXU0d4aFByVkZRTVE5STJBZWQyUjJpUHFLcG1hcnpKN29VMzJYZzBlSnF2Sk9VRk9IQmg4Zk9pOTdnQ0h6Vm9ZdjM3czhZdlRQTXV1OU9GMUVCeVF2cUVhNTRKR1VXdkZLdjVjYU5hUWo1aHFrem9oL2JnVW9VSjI5OXJuZXdJWng2ZWNFWWlCbXN0aUNKRUZPSEpqMFBYMFVEaWxjWDdPdmtoczRPWjJmT00xT0U5REZpZmU1YzZyRWtOTjN6Nyt1Tk82di93Y243aXgvWDg5UXE2WHBWb2NOdERrVXhQNmhYcTc2WWJtWFVHSGZyK1ZQeGNpSU5TYVEwa0M2eGJLemZWZ2tRWEthZHdRN1MzNWovWERiN2NPemV4WEd4T001UC83YnIyTGZDbSs3WElnWDBMVkliZ2lQT2ZZZ0NBZkljMHY5QUVEbFJEWkJHajF6elhUbXF3M2NJRGE5MTNpa3V3TjZveU52bDFYVWRlNDczVDVhM2FTMHVBeXNpSy92N3dNbFVsMFVzN2FnZzg1dEdBNUhMSWRoYjJzTWljL2NWajZZUk1WeVdic0dYa244SEFlSWs3OGtnNlIvUzhpVUV2ZzlzU0VkQnVKcXhWcVY4UzA1RDkzeGE4b0N6YkhtZjVNSXFkWExxZ0Z3NlB1RGord3dEWE5MNGFxaVNqVXdJTmJ1TVpnekdSU2pnS2J1YVd2blYzZFZPelpsV09DNjJEQk41Si9BNkJ5cjFrSHB2bGhESGJWTjhldC9XMWpZL1ZRdytLUk9nYTZndU13YllRNWNmc2k5cHdnaExudXhRRm1XUUt2R1grdHp6NVQ1bWhmVGJrU0lNT0x4c3dhK041RUloenlFQUNBWWZKMGMyKzFtZkFjNGxhdVlQUno2TFN5b3UyWFJScnpkU1NTUE0xMThPakhEN2lKUnJxa1RoQUROdUNDOEdCVEFGUDVmVm9QNVRKeTJidFBpeFZXWXVBU1RNaDQ5UjNSVzFwNmpZWGNEZ0d2Y3UweEtlUnM1bnpUVC9tY29temNIemhnd3FIV0dUbXBFczJVKzdvQjJPM3JndWRKalptOVlPbnlCbENaeUV3cW13SG44dElUQkhpWlRaVGs2YWVkQ0RsZG5wNWs3bjhJVDVqYlZBMVpOTWs4Ni9kUFlHeUF2Z0kyTHFORlFYeS9kcFVSVHdnOXcvMjhDZ1JqY2ZNZTB3bUZMbnJ6S1hobWttd0lWZXlVZEVMWm51MUV6Z2lCb1U4OG1tZkhvRkhnL3dRVzR1REtBRzE3VitIclp0V2ZKWlZHQ2hJb0ZLU2ExaTJUVVBuQm01TlZpUFdPaUNFVHFuZ1R3NUJqcGhIRmNHcDdjYm45MFFnMjdjd01JL3ZCWmdtZnU3QmlnTk1ydDN2N01LSU9WaE9QcXlRTzBmb010a1RaVmpqM1NYaDZwblk3REo1WjZRUFoxZktqQm9MQWZvMHFjaWlFZ25qSDRoOHcxR1kzOWJ6dkN6QjhkYmNUTXdNZjZmQkt0NGVaK21RdTJUYm52OWVjYkVZT1huU004bDhOWnZYdWU5RC93ZXlrb0kvdXNQOTdjbS9xY05RQkxXRTlMLzl5WmJIaVpIYjJCZHA0ZGNEZStOc3FDWU15aDlWejlINVo2c2JlWlQ4dG1qZHNpQjN1b0ltSTQ0MHduMU1Xa0VxcFZXdGMzdHJNSFR5WDBJeC9MSGhsQU5jSzZ0VjRxeHB0b243V0FNVlhEdndKM0V2aTU3b1lLby9odHpueUp3aUpEYlZyLkVoeGp6U0xsS3AwVVF0cl9HZEljd3l3RndUZ0NpTUlmMnRtTTlrQ2dDQ29JN0VzbnVheTFCZ3I3TUd5OGZRUmNORkdxSV9rWlVIT1I5Z0Y4MmlMV2pR",
            "params": [
              {
                "name": "username",
                "value": "22009100795"
              },
              {
                "name": "password",
                "value": "epef9FVepbJffJM98%2F36PWaofSKVFxg32DhzYkzykCE7Y7XBuPbWsdFHo2rLlJf8PkaOZMQoLBFaIwBHm0Jgi990QBMn%2FO2UmGP6RAteqMI%3D"
              },
              {
                "name": "captcha",
                "value": ""
              },
              {
                "name": "_eventId",
                "value": "submit"
              },
              {
                "name": "cllt",
                "value": "userNameLogin"
              },
              {
                "name": "dllt",
                "value": "generalLogin"
              },
              {
                "name": "lt",
                "value": ""
              },
              {
                "name": "execution",
                "value": "2f10a518-70ed-4f57-b149-2b59d124a96c_ZXlKaGJHY2lPaUpJVXpVeE1pSjkuQXByZ0RWSVZGT1ErMy93Q0IySllRVTFwZUIrckNyVHFjS2VreTZUY0dNT0R0eHNNWld0SDVCY00yMTBCL2J1bk5OaXhMTVVDS0ZaeUZjWGcrS3Z6cFdJc0g2bzNyc0ROSG81K3daajA5QTVMYnNXc2o0ME8wOHZCUURXTXBxSERtQ1hYRFBreUsxR2hhM0JJR2hPemFUTUVXVVZoTFZmcUZ6aThXL2tzQnlqaXBmSjZ4QjlhR3huc3dyRm9rNzlXWS8ySXZnNEhOM0pLalRBUHBmSjlBeTJkQWdLZ2ZWOWNseEpIemhaSHZSUjQ5Rncrd1B5TjV0Y0lnZGJiTVRUckJOTWc5NlU2Mi82RVZBNEJSR0o3MnFSaVBMVjI0VzAvOHo1YW82N0N3TzF5R3prcXluMW9UMGlCT1BMOEVvcHRtRTk1YmxFRkxzendRcGg2TWlDenN4ZURWUHBldllsbGlmc3VKdFdkdCtjdDhVOHNGOVpTOS80cDlJWGJ5UGhGdkJBVU4zSlFRaEMyb1lzUzRQOFNMZktFRFRNbFAwdW83a3Z5bXRCdWRnd0M3djk2ejJRREZmY2wyWWRqMks0MFhNOFFhTzM5aTRlMmNqWW4xcnBDZHJjWlovS1VpeGZFREhqWjdja3UzRkJQT212ejRJUnNPSFhuL3FKbGZuUW5mNFl2K2gweXlWenZVN0hkaEg4QUs1OTVJUysycjlkZFZESU4vc1hFOXhXSFRCNkYwTlpSOW9Va2hwUG1RMUVRcWUrZXFISGpWMU5JcTVNZnZPbHR6RG00akNZRSs3b3JLWkVldXJjYWQzeHNxNXZ5VXdabjgyelMyYmY3V0IzN2hHaHY2NTlYWTVmR3ZaNEpKa1FyaTRpSC95YVRhc25RV2pFMzhBR3BCaEhrTnp1S1dTZW1td2p3MlV3SzBJR1ZQaXhrYjV1c2tWMWw0UVczZ2hwWGF4aVVYZjBsdjc2OTBqYktmNUtSZWNwTHVzWXNEY0huK2JoUGhjQW5MZWtNaVNHdHJlVk90QkNkYWNmUzVwdGZiZW85OUFueUZ1Z1pKU3Z0RFVwQkJWaG5rRjVROGkzWGM1U1hzOWp0N0V4bFBIUUllUDA1WGpwc3BpTmJ1M3Z4MWRBMWM5RzFIcmVWaFBCbjZ4dlBIQ0FjRmRTb0tycWF3K252MmVKZ0plVUdud0hqMWJUUDRBZE02eW40a1RUektEc044S0sxcUNta1plLzBIMUhMNjl4cUVLem1vQTNLUkhBa1V6VU9jbDhSMUNFYWI5OWcvYlBGamJrY2Y5SUdIRG14dEFqL0dTVmpUc0RkRndIT1JwOGl4dW4zUmJPTlRQa2t0endFUnh2ZDI4c3lRNnY3YkhmYllBTFNnOHVTaTd1WVZMTXpHSGdUeGhJL2ZHSkt4blNFVDdDeU1HOWh6aG92a0lhUE9yT0hnUXlsMTYrTTRwZE40TVY4aGxMWVQ3K0dnOHFwWTdjRFdRalR4V1ZNT21aNFpzZzJDWndBczkxMzFKVks1VXMydW42STlLRVdITlVaNFhvVUlmQ0k2Zk5OcUgzeENMS1lwVGJJOXNrV2s3eUtmWXZmY29DdHBXMGhqeUxaQmh1SUh3MStHS0RNUENicXBqSkF2ZURrVnRhdzNkUk1GWUZTRjlQV1drL2p4NzNweW54SEk4aWZDKzB1VEdocnExVmYvMHQwVTNwYUVlakRudFdTeStqMk93UzRrWDF6NVI5cmMrOVBRR3V1ZWI4T0ZNenNlUEZ0TmN2Z3ZEalQ1Y3RJTEVMU0R6OGZKajIyaUhFZkMzejFCWlY3b25ZYUJNYmpPeHNWSmhuSEVEZmp6Nmw4cnp3UnkrSkY0Ni9NajJZT0dzbG1CUnhtSHpIOWFicFZ4V0RIeXVvUE1FQ3ZhNjdXSklJR3BRVTNWVEhtNUtZZ3k2UGpKOFpsTnFpanNaU3hvd3pmeTFDV2ZZMWZ5N2J2V1Fva0swcVZRNWVFNElPRlNrNnZoUEI1N01KcE9PZE9ZcE8xT1Q4bXU1ME1hanFCMFZFWDcvdUdzOVZsc0NIWXlCNEdBenkvdGR2V0F1bHR0RGlrT2V6Q3IrbUQwNUFSYWE3VEVJRy9YMVpxZGgvOU1NT2dOSmdMaTRvbzZBaUVpTU5zL29DMXkwZngxQzVpK0lsMTFXOG13ekJ1SElmRDNPbFpjYVIzMEY4RXg5N0RvaWg0ZG5mQjhkNmcveGw2K1h0ck5hbmdVSjBTT3lnQUxtbldtL0ROZ3V1YlFvNFVhOExrOHZDUWNzY3hHRldtYzFtdkdUOEVEY2lLeEdvSzh6aUhTTFNpbzNTUEs4VFZlMWE1NGxrc0hMbDZ5S0VPbVN4dXFaQ1FwMjkzY3RiOVJGUEt1bmxWZi96dEtsSE56R2RoR0VtWkhldGVTb2hTVXNWaWFTREgvTnY5blFTNGZNT1JMU0RMcjVRMVVvNGNEcjF4dVhuTnlCY09HbmdRMlFwUm9lTjBEQ1FIYnJqOUxhRzJPeEIvOHhqZ3lHbDdjbjVFTENjWGp6ZTRtVEFzNlF4ZytWZVdhdDZvcnJYeGx2MGdBYVBYcDJqQlVRdDZ5UWxNc3Q5RW1selM3RndQWnNSLzV3ODUvRStDRzZGQ0k2STcwMVZWWW92TFhyZ3lVTlRDRTh6NU83NDhMVWJncG9OSm9tdjAzaFdycDlYQ1VWZ01wYnorWjhXeUtpdkplT2tkcTdxenIwaFZ6d3BodDVtU0VMOTJQZ01kdDJqTW53U3c4MlFGM09wQnk0ZFYySU00RkFuNzRXVUQrcWM0NjRIUXRzSHlPemt6aXUrMG1FOEswQyt6ZzY5NWpITkJoU3p3M3EwcUpla3FIVWFESnJQdDNDdDJOMWxQbkpmbkJyTlBiQWV3dVhuRmZtMXViZE04MFpzaHF2ajI3bGJFZ1Q4RDhVZkppK05MLzNaUnBlaXA0b2YwM1RNWllHYlJwZGc2MVJ6NDNaMDJnWnVtY05jVHRjZ2doZ09HZkJpb0hzMDlrYU9UYlFWMW9idXlRbjdrblNzUFNaazFWUyt0L25HYjNiNURIbjBjY3dXOThKSnRaYUc1QTZTeWkrRzBVVEJqYndDT1M3OW0xa3BZcGViTUxpUEQ0RVdUYkI1V0xoV2x3Q29kS29oeUM3VjYyTm1uMWVzdVNDbG5xbWY2ZWNaWkhRcXF1MnBUaUdqRUpWOWRGVHEySjRmTzdESFBseXZRbktVT0FZajFQMXdkYU5rTXNXMG5YTnF3by9LYmhZTnFMSktvY25BeDNuaVE2VGJzNTFETUljZnZtZlQxNDR5Ym1pRWN5dVd4N3RaaU8rMnZiWVBUTFE1bDkwZE43TmRPWUp1Q05FcG9NSkoxSlFxcVR4Lzh0b3dRdFprWnRZUnpCbG4xZmRWcmFBcTRIWE9JckJpR0lkS3E3bXBIbnk0VWJRN0VYQVBBR29lQ3FBM0tCSDRRdC84VFhiVDJNSlFCelFubnp2dE9ISzJoSG52Y1htOFFLY01MYnpjVU95b0c3cEF5K1MvTXlncTNLaW16Zk1FV0NCQkxVWkFFaEU3YUFmaGNKY3VSYmZGeVhmSHZjNEovOEZsbFljQzVuRWl4KzJHaCt4RnozaG04VjZuRGpjL1VncFFmd1gxMFJma2dCM2svUEdEcnY3aXVRRHJXb1NselNoVXNWZWw5Z1NZQ2VOWXliRjdOR1dtMkdlN2RQR2Zadzd3Ny9DY1N2Q2JXTENPN0d0RDhCQ0JlQlFteGVpL25FdmVoL3ExbUY3cGlVM21VK09PUjZBenh4cHlZM3lMZXQrOU1RZU9vcCtyR3NES0RXU0d4aFByVkZRTVE5STJBZWQyUjJpUHFLcG1hcnpKN29VMzJYZzBlSnF2Sk9VRk9IQmg4Zk9pOTdnQ0h6Vm9ZdjM3czhZdlRQTXV1OU9GMUVCeVF2cUVhNTRKR1VXdkZLdjVjYU5hUWo1aHFrem9oL2JnVW9VSjI5OXJuZXdJWng2ZWNFWWlCbXN0aUNKRUZPSEpqMFBYMFVEaWxjWDdPdmtoczRPWjJmT00xT0U5REZpZmU1YzZyRWtOTjN6Nyt1Tk82di93Y243aXgvWDg5UXE2WHBWb2NOdERrVXhQNmhYcTc2WWJtWFVHSGZyK1ZQeGNpSU5TYVEwa0M2eGJLemZWZ2tRWEthZHdRN1MzNWovWERiN2NPemV4WEd4T001UC83YnIyTGZDbSs3WElnWDBMVkliZ2lQT2ZZZ0NBZkljMHY5QUVEbFJEWkJHajF6elhUbXF3M2NJRGE5MTNpa3V3TjZveU52bDFYVWRlNDczVDVhM2FTMHVBeXNpSy92N3dNbFVsMFVzN2FnZzg1dEdBNUhMSWRoYjJzTWljL2NWajZZUk1WeVdic0dYa244SEFlSWs3OGtnNlIvUzhpVUV2ZzlzU0VkQnVKcXhWcVY4UzA1RDkzeGE4b0N6YkhtZjVNSXFkWExxZ0Z3NlB1RGord3dEWE5MNGFxaVNqVXdJTmJ1TVpnekdSU2pnS2J1YVd2blYzZFZPelpsV09DNjJEQk41Si9BNkJ5cjFrSHB2bGhESGJWTjhldC9XMWpZL1ZRdytLUk9nYTZndU13YllRNWNmc2k5cHdnaExudXhRRm1XUUt2R1grdHp6NVQ1bWhmVGJrU0lNT0x4c3dhK041RUloenlFQUNBWWZKMGMyKzFtZkFjNGxhdVlQUno2TFN5b3UyWFJScnpkU1NTUE0xMThPakhEN2lKUnJxa1RoQUROdUNDOEdCVEFGUDVmVm9QNVRKeTJidFBpeFZXWXVBU1RNaDQ5UjNSVzFwNmpZWGNEZ0d2Y3UweEtlUnM1bnpUVC9tY29temNIemhnd3FIV0dUbXBFczJVKzdvQjJPM3JndWRKalptOVlPbnlCbENaeUV3cW13SG44dElUQkhpWlRaVGs2YWVkQ0RsZG5wNWs3bjhJVDVqYlZBMVpOTWs4Ni9kUFlHeUF2Z0kyTHFORlFYeS9kcFVSVHdnOXcvMjhDZ1JqY2ZNZTB3bUZMbnJ6S1hobWttd0lWZXlVZEVMWm51MUV6Z2lCb1U4OG1tZkhvRkhnL3dRVzR1REtBRzE3VitIclp0V2ZKWlZHQ2hJb0ZLU2ExaTJUVVBuQm01TlZpUFdPaUNFVHFuZ1R3NUJqcGhIRmNHcDdjYm45MFFnMjdjd01JL3ZCWmdtZnU3QmlnTk1ydDN2N01LSU9WaE9QcXlRTzBmb010a1RaVmpqM1NYaDZwblk3REo1WjZRUFoxZktqQm9MQWZvMHFjaWlFZ25qSDRoOHcxR1kzOWJ6dkN6QjhkYmNUTXdNZjZmQkt0NGVaK21RdTJUYm52OWVjYkVZT1huU004bDhOWnZYdWU5RC93ZXlrb0kvdXNQOTdjbS9xY05RQkxXRTlMLzl5WmJIaVpIYjJCZHA0ZGNEZStOc3FDWU15aDlWejlINVo2c2JlWlQ4dG1qZHNpQjN1b0ltSTQ0MHduMU1Xa0VxcFZXdGMzdHJNSFR5WDBJeC9MSGhsQU5jSzZ0VjRxeHB0b243V0FNVlhEdndKM0V2aTU3b1lLby9odHpueUp3aUpEYlZyLkVoeGp6U0xsS3AwVVF0cl9HZEljd3l3RndUZ0NpTUlmMnRtTTlrQ2dDQ29JN0VzbnVheTFCZ3I3TUd5OGZRUmNORkdxSV9rWlVIT1I5Z0Y4MmlMV2pR"
              }
            ]
          }
        },
        "response": {
          "status": 302,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "*"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "https://ids.xidian.edu.cn"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:09:17 GMT"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Location",
              "value": "http://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp?ticket=ST-2089287-TMBaUNtOGZCciJXm18p4-hOhrdwauthserver4"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Server",
              "value": "openresty"
            },
            {
              "name": "Set-Cookie",
              "value": "happyVoyage=DeY3XAJ6lkkM52IyN5uU4SMh9921kJIy70E2OKn7tBO6TKKPvzfJiQlu7depisczAxYgWYrEf72BNHTja//EiKzr/A6Qv4aqvEhF+kCsmbG0jD0X4qFGPU2Rnce759cbDjpplPTvA3oJSKdxrrNrLJT7q4s0jsASgxc3zaOXZWU=; Path=/; HttpOnly"
            },
            {
              "name": "Set-Cookie",
              "value": "CASTGC=TGT-260769-ORDa-wBbS3Ot1vPg65LFUSfUf-uybtVNMNPPRCIi4pmibYvxY534F2V7bKqxM9leZHEnull_main; Path=/authserver; HttpOnly"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "X-Frame-Options",
              "value": "ALLOWALL"
            },
            {
              "name": "X-XSS-Protection",
              "value": "1; mode=block"
            }
          ],
          "cookies": [
            {
              "name": "happyVoyage",
              "value": "DeY3XAJ6lkkM52IyN5uU4SMh9921kJIy70E2OKn7tBO6TKKPvzfJiQlu7depisczAxYgWYrEf72BNHTja//EiKzr/A6Qv4aqvEhF+kCsmbG0jD0X4qFGPU2Rnce759cbDjpplPTvA3oJSKdxrrNrLJT7q4s0jsASgxc3zaOXZWU=",
              "path": "/",
              "domain": "ids.xidian.edu.cn",
              "expires": null,
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "CASTGC",
              "value": "TGT-260769-ORDa-wBbS3Ot1vPg65LFUSfUf-uybtVNMNPPRCIi4pmibYvxY534F2V7bKqxM9leZHEnull_main",
              "path": "/authserver",
              "domain": "ids.xidian.edu.cn",
              "expires": null,
              "httpOnly": true,
              "secure": false
            }
          ],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": -1
          },
          "redirectURL": "http://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp?ticket=ST-2089287-TMBaUNtOGZCciJXm18p4-hOhrdwauthserver4",
          "headersSize": 908,
          "bodySize": 1,
          "_transferSize": 909,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:12.469Z",
        "time": 362.08799999985786,
        "timings": {
          "blocked": 5.049999999683117,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.14900000000000002,
          "wait": 354.5919999992666,
          "receive": 2.297000000908156,
          "_blocked_queueing": 0.8909999996831175,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "pageref": "page_10",
        "request": {
          "method": "GET",
          "url": "http://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp?ticket=ST-2089287-TMBaUNtOGZCciJXm18p4-hOhrdwauthserver4",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "cross-site"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [
            {
              "name": "ticket",
              "value": "ST-2089287-TMBaUNtOGZCciJXm18p4-hOhrdwauthserver4"
            }
          ],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 901,
          "bodySize": 0
        },
        "response": {
          "status": 302,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Location",
              "value": "http://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 282
          },
          "redirectURL": "http://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
          "headersSize": 282,
          "bodySize": -282,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "",
        "startedDateTime": "2024-10-12T02:12:12.831Z",
        "time": 1.7630000002100132,
        "timings": {
          "blocked": 1.7630000002100132,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": -0.5380000002332963,
          "receive": 0,
          "_blocked_queueing": 1.7630000002100132
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "10512",
        "pageref": "page_10",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp?ticket=ST-2089287-TMBaUNtOGZCciJXm18p4-hOhrdwauthserver4",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "cross-site"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [
            {
              "name": "ticket",
              "value": "ST-2089287-TMBaUNtOGZCciJXm18p4-hOhrdwauthserver4"
            }
          ],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 901,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "823"
            },
            {
              "name": "Content-Type",
              "value": "text/html;charset=UTF-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": -29
          },
          "redirectURL": "",
          "headersSize": 254,
          "bodySize": 29,
          "_transferSize": 283,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:12.832Z",
        "time": 2206.376000000091,
        "timings": {
          "blocked": 1105.589000000442,
          "dns": -1,
          "ssl": 1055.303,
          "connect": 1055.77,
          "send": 0.30700000000001637,
          "wait": 41.737000000902526,
          "receive": 2.9729999987466726,
          "_blocked_queueing": 1104.562000000442,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "pageref": "page_10",
        "request": {
          "method": "GET",
          "url": "http://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "Origin",
              "value": "https://ids.xidian.edu.cn"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 307,
          "statusText": "Temporary Redirect",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Location",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp"
            },
            {
              "name": "Non-Authoritative-Reason",
              "value": "HttpsUpgrades"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "",
        "startedDateTime": "2024-10-12T02:12:13.935Z",
        "time": 1.3810000000376021,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.3810000000376021,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "10512",
        "pageref": "page_10",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "Origin",
              "value": "https://ids.xidian.edu.cn"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "823"
            },
            {
              "name": "Content-Type",
              "value": "text/html;charset=UTF-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 823,
            "mimeType": "text/html"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 1078,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:13.936Z",
        "time": 11.655000000246218,
        "timings": {
          "blocked": 2.4270000005217733,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.11999999999999988,
          "wait": 7.650000000904431,
          "receive": 1.4579999988200143,
          "_blocked_queueing": 0.8290000005217735,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
          "lineNumber": 7
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "10512",
        "pageref": "page_10",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"293287-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 798,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"293287-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 293287,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 226,
          "bodySize": 0,
          "_transferSize": 227,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:13.954Z",
        "time": 17.191999999340624,
        "timings": {
          "blocked": 9.379999998626182,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.21700000000000008,
          "wait": 6.45799999960605,
          "receive": 1.1370000011083903,
          "_blocked_queueing": 6.577999998626183,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
          "lineNumber": 8
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "10512",
        "pageref": "page_10",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/js/lockscreen.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"2233-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 790,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"2233-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2233,
            "mimeType": "application/javascript"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:13.954Z",
        "time": 29.730000000199652,
        "timings": {
          "blocked": 22.410999999608265,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.16000000000000014,
          "wait": 6.563999999251449,
          "receive": 0.5950000013399404,
          "_blocked_queueing": 7.719999999608262,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
          "lineNumber": 9
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "10512",
        "pageref": "page_10",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/css/lockscreen.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"702-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "style"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 805,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"702-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:13 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 702,
            "mimeType": "text/css"
          },
          "redirectURL": "",
          "headersSize": 223,
          "bodySize": 0,
          "_transferSize": 224,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:13.954Z",
        "time": 22.955000000365544,
        "timings": {
          "blocked": 15.636000000457162,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.11599999999999877,
          "wait": 6.4160000008721845,
          "receive": 0.7869999990361976,
          "_blocked_queueing": 7.744000000457163,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "298524",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
                "lineNumber": 14,
                "columnNumber": 27
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "http://payment.xidian.edu.cn/NetWorkUI/caslogin-22009100795-9e8878898dc81e96ff3990e09f1a575c",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "cross-site"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 833,
          "bodySize": 0
        },
        "response": {
          "status": 302,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Language",
              "value": "zh-CN"
            },
            {
              "name": "Content-Length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Location",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 300
          },
          "redirectURL": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "headersSize": 300,
          "bodySize": -300,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "",
        "startedDateTime": "2024-10-12T02:12:14.053Z",
        "time": 25.045999998837942,
        "timings": {
          "blocked": 25.045999998837942,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": -1.160999998319312,
          "receive": 0,
          "_blocked_queueing": 25.045999998837942
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "298524",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
                "lineNumber": 14,
                "columnNumber": 27
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "10512",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/caslogin-22009100795-9e8878898dc81e96ff3990e09f1a575c",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "cross-site"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 833,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Language",
              "value": "zh-CN"
            },
            {
              "name": "Content-Type",
              "value": "text/html;charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": -15
          },
          "redirectURL": "",
          "headersSize": 286,
          "bodySize": 15,
          "_transferSize": 301,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.077Z",
        "time": 110.35599999922852,
        "timings": {
          "blocked": 59.67999999871617,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.22399999999999975,
          "wait": 48.14899999939196,
          "receive": 2.303000001120381,
          "_blocked_queueing": 55.98399999871617,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "298524",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp",
                "lineNumber": 14,
                "columnNumber": 27
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "10512",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/pages/caslogin.jsp"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Language",
              "value": "zh-CN"
            },
            {
              "name": "Content-Type",
              "value": "text/html;charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "cookies": [],
          "content": {
            "size": 9194,
            "mimeType": "text/html",
            "text": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\r\n\r\n\r\n \r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n<meta name=\"renderer\" content=\"webkit\">\r\n<script src=\"/NetWorkUI/lib/jQuery 1.11.1.js\" type=\"text/javascript\"></script>\r\n<script type=\"text/javascript\" src=\"/NetWorkUI/js/lockscreen.js\"></script>\t\r\n<link href=\"/NetWorkUI/css/lockscreen.css\" rel=\"stylesheet\" type=\"text/css\" /> \r\n\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\t<head>\r\n\t\t<title>缴费平台</title>\r\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n\t\t<meta name=\"renderer\" content=\"webkit\"/>\r\n\t\t<link href=\"/NetWorkUI/css/master.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n\t\t<link rel=\"stylesheet\" href=\"/NetWorkUI/css/public.css\"/>\r\n\t\t<script src=\"/NetWorkUI/js/common.js\"  type=\"text/javascript\"></script>\r\n\t\t<script type=\"text/javascript\">\r\n\t\t\tmobile_device_detect(\"http://payment.xidian.edu.cn/MNetWorkUI/\");\r\n\t\t\t//验证初始化信息\r\n\t\t\tfunction checkperfectUserInfo(){\r\n\t\t\t\tvar tel = '17307480999';\r\n\t\t\t\tvar email = '1729138395@qq.com';\r\n\t\t\t\t//看是否拦截跳转到完善用户信息界面1-拦截 0-不拦截\r\n\t\t\t\tvar perfectFilterflag=1\r\n\t\t\t\tif(perfectFilterflag==\"1\"){\r\n\t\t\t\t\tif(tel==null || tel==\"\" || email==null || email==\"\"){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//验证缴费项是否可以购买\r\n\t\t\tfunction openPayProjectDetail(url,proid){\r\n\t\t\t\t//为true时为不需要完善用户信息，为false时需要完善用户信息\r\n\t\t\t  if(checkperfectUserInfo()){\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\turl:'/NetWorkUI/checkPayProjectCouldPay?payProjectId='+proid,\r\n\t\t\t\t\ttype:'post',\r\n\t\t\t\t\tasync:false,\r\n\t\t\t\t\tsuccess:function(data){\r\n\t\t\t\t\t\tif(\"\" != data){\r\n\t\t\t\t\t\t\tvar jsonData = eval(\"(\"+data+\")\");//转成json\r\n\t\t\t\t\t\t\tvar returncode = jsonData.returncode;\r\n\t\t\t\t\t\t\tif(\"SUCCESS\" == returncode){\r\n\t\t\t\t\t\t\t\twindow.location.href=url;\r\n\t\t\t\t\t\t\t}else if(\"NOLOGIN\" == returncode){\r\n\t\t\t\t\t\t\t\twindow.location.href='/NetWorkUI/slogin.html';\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\talert(jsonData.returnmsg);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t  }else{\r\n\t\t\t\t  window.location.href='/NetWorkUI/openPerfectUserinfo';  \r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t\tfunction  nameListOpenUrl(url){\r\n\t\t\t\twindow.location.href='/NetWorkUI/showIndex'+url;//url;\r\n\t\t\t}\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t\t<!--顶部 begin-->\r\n\t\t\r\n<div class=\"top-w\">\r\n\t<div class=\"top\">\r\n    \t<ul class=\"fr\">\r\n    \t\r\n\t    \t\r\n\t\t        <li>你好，<a class=\"c4\"  href=\"#\">刘宇航</a></li>\r\n\t\t         <li><a  href=\"/NetWorkUI/openUpdatePasswd\">修改登录密码</a></li>\r\n\t\t        <li><a  href=\"/NetWorkUI/casLogout\">退出</a></li>\r\n\t        \r\n\t        \r\n    \t\r\n        </ul>\r\n    </div>\r\n</div>\r\n<!--头部 begin-->\r\n<div class=\"header-w\">\r\n\t<div class=\"logo-w\">\r\n    \t<div class=\"logo fl\"><a href=\"#\"><img src=\"/NetWorkUI/images/logo.png\" width=\"254\" height=\"62\" alt=\"logo\" style=\"border:0\"/></a></div>\r\n        <div class=\"sys-name fl\"><img src=\"/NetWorkUI/images/sys-name.png\" width=\"142\" height=\"62\" alt=\"综合缴费系统\"/></div>\r\n    </div>\r\n    <div class=\"nav fr\">\r\n    \t<ul class=\"fr\">\r\n    \t\r\n         \t<li><a href=\"/NetWorkUI/showPublic\">首页</a></li>\r\n         \t<li><a href=\"/NetWorkUI/queryOrderList\">订单查询</a></li>\r\n         \t<li><a href=\"/NetWorkUI/pages/help/platformInformation.jsp\">用户指南</a></li>\r\n\t\t\t<li><a href=\"/NetWorkUI/openShoppingCart\">购物车</a></li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n<!--顶部 end-->\r\n\r\n\t\t<!--顶部 end-->\r\n\t\t<!--广告 begin-->\r\n\t\t<div class=\"banner-w\"><div class=\"banner\"><img src=\"/NetWorkUI/images/banner-img_03.png\" width=\"1360\" height=\"300\" alt=\"综合缴费系统\"/></div></div>\r\n\t\t<!--广告 end-->\r\n\t\t<!--主体 begin-->\r\n\t\t<div class=\"content-w\">\r\n\t\t\t<div class=\"content\">\r\n\t\t    <ul class=\"menu-w\">\r\n\t\t\t    \r\n\t\t    \t\t\r\n\t\t    \t\t\t\r\n\t\t\t    \t\t\t<li>\r\n\t\t\t\t\t \t\t\t<a onclick='openPayProjectDetail(\"elecdetails5129E003\",29)'>\t\r\n\t\t\t\t\t \t\t\t\t<div class=\"menu menu-tut\" ><img style=\"width: 100px;height: 100px;\" src=\"/NetWorkUI/images/project/img-nav_2.png\" alt=\"\" /></div><h3>学生宿舍电费充值</h3>\r\n\t\t\t\t\t    \t\t</a>\r\n\t\t\t\t\t    \t</li>\r\n\t\t    \t\t\t\r\n\t\t    \t\t\t\r\n\t\t    \t\t\r\n\t\t    \t\r\n\t\t    \t\t\r\n\t\t    \t\t\t\r\n\t\t\t    \t\t\t<li>\r\n\t\t\t\t\t \t\t\t<a onclick='openPayProjectDetail(\"netdetails51209N026\",209)'>\t\r\n\t\t\t\t\t \t\t\t\t<div class=\"menu menu-tut\" ><img style=\"width: 100px;height: 100px;\" src=\"/NetWorkUI/images/project/img-nav_2.png\" alt=\"\" /></div><h3>电信翼讯</h3>\r\n\t\t\t\t\t    \t\t</a>\r\n\t\t\t\t\t    \t</li>\r\n\t\t    \t\t\t\r\n\t\t    \t\t\t\r\n\t\t    \t\t\r\n\t\t    \t\r\n\t\t    \t\t\r\n\t\t    \t\t\t\r\n\t\t\t    \t\t\t<li>\r\n\t\t\t\t\t \t\t\t<a onclick='openPayProjectDetail(\"deducteddetails51309\",309)'>\t\r\n\t\t\t\t\t \t\t\t\t<div class=\"menu menu-tut\" ><img style=\"width: 100px;height: 100px;\" src=\"/NetWorkUI/images/project/img-nav_7.png\" alt=\"\" /></div><h3>联通沃讯</h3>\r\n\t\t\t\t\t    \t\t</a>\r\n\t\t\t\t\t    \t</li>\r\n\t\t    \t\t\t\r\n\t\t    \t\t\t\r\n\t\t    \t\t\r\n\t\t    \t\r\n\t\t    \t\t\r\n\t\t    \t\t\t\r\n\t\t\t    \t\t\t<li>\r\n\t\t\t\t\t \t\t\t<a onclick='openPayProjectDetail(\"utildetails51389\",389)'>\t\r\n\t\t\t\t\t \t\t\t\t<div class=\"menu menu-tut\" ><img style=\"width: 100px;height: 100px;\" src=\"/NetWorkUI/images/project/img-nav_2.png\" alt=\"\" /></div><h3>体育培训班</h3>\r\n\t\t\t\t\t    \t\t</a>\r\n\t\t\t\t\t    \t</li>\r\n\t\t    \t\t\t\r\n\t\t    \t\t\t\r\n\t\t    \t\t\r\n\t\t    \t\r\n\t\t    </ul>\r\n\t\t    </div>\r\n\t\t</div>\r\n\t\t<!--友情提示-->\r\n\t\t<div class=\"msg\">\r\n\t\t\r\n\t\t\r\n\t\t\t<!-- 购物车 begin -->\r\n\t\t\t\r\n<link href=\"/NetWorkUI/css/cart/base.css\" type=\"text/css\" rel=\"stylesheet\" />\r\n<script>\r\n$(function(){\r\n\tvar users = '刘宇航';\r\n\tif(users == null || \"\" == users || typeof user == undefined){\r\n\t\t$(\"#cartnum\").html(0);\r\n\t}else{\r\n\t\tgetCartProductsNum();\r\n\t}\r\n}); \r\n//查询购物车的商品数量\r\nfunction getCartProductsNum(){\r\n\t$.ajax({\r\n\t\turl:'/NetWorkUI/getCartProductsNum',\r\n\t\ttype:'post',\r\n\t\tdata:{\r\n\t\t},\r\n\t\tsuccess:function(data){\r\n\t\t\tvar jsonData = eval(\"(\"+data+\")\");\r\n\t\t\tif(jsonData.returncode == \"SUCCESS\"){\r\n\t\t\t\t$(\"#cartnum\").html(jsonData.productSubNum);\r\n\t\t\t}else{\r\n\t\t\t\talert(jsonData.returnmsg);\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n}\r\nfunction openShoppingCart(){\r\n\twindow.location.href=\"/NetWorkUI/openShoppingCart\"\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>\r\n\t<!--右侧贴边导航quick_links.js控制-->\r\n<div class=\"mui-mbar-tabs\">\r\n\t<div class=\"quick_link_mian\">\r\n\t\t<div class=\"quick_links_panel\">\r\n\t\t\t<div id=\"quick_links\" class=\"quick_links\">\r\n\t\t\t\t<li id=\"shopCart\">\r\n\t\t\t\t\t<a href=\"#\" class=\"message_list\" onclick=\"openShoppingCart()\"><i class=\"message\"></i><div class=\"span\">购物车</div><span class=\"cart_num\" id=\"cartnum\"></span></a>\r\n\t\t\t\t</li>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<div id=\"quick_links_pop\" class=\"quick_links_pop hide\"></div>\r\n\t</div>\r\n</div>\r\n</script>\r\n\t\t\t<!-- 购物车 end -->\r\n\t\t\r\n\t\t\r\n\t\t</div>\r\n\t\t<!--底部 begin-->\r\n\t\t\r\n<!--底部-->\r\n<div class=\"bottom-w\"  id=\"footbt\" style=\"width: 100%;\">\r\n\t<div class=\"copyright\"><p class=\"fl\">版权：西安电子科技大学信息网络技术中心 © 2017 DATALOOK</p><p class=\"fr\">地址：太白南路2号西安电子科技大学  &nbsp;&nbsp;&nbsp;邮编：710071</p></div>\r\n</div>\r\n<!-- 锁屏开始 -->\r\n<div class=\"dj\" id=\"lock_screen_dj\"></div>\r\n<div class=\"warm-prompt\" id='input_div_' style=\"display: none\">\r\n\t\t<div class=\"warm-prompt-close\">\r\n\t\t</div>\r\n\t\t<div class=\"warm-prompt-form\">\r\n\t\t\t<div class=\"warm-prompt-form-1\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\t支付完成前，不要关闭此支付验证窗口。\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"warm-prompt-form-1\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\t支付完成后，根据支付情况点击下面的按钮。\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>&nbsp;</p>\r\n\t\t\t</div>\r\n\t\t\t<div >\r\n\t\t\t\t<div class=\"button-1\" style=\"margin-left: 80px\">\r\n\t\t\t\t\t<input type=\"button\" value=\"遇到问题\" name=\"Button-1\" id=\"lock_problem\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"button-1\" style=\"margin-left: 230px\">\r\n\t\t\t\t\t<input type=\"button\" value=\"支付成功\" name=\"Button-1\" id=\"lock_success\">\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\t\t\t\r\n<div class=\"sp_box\"></div>\r\n<script type=\"text/javascript\">\r\n\t\tvar rootel=document.documentElement; //XHTMl\r\n\t\t// var rootel=document.body //HTML\r\n\t\tvar bto=document.getElementById('footbt');\r\n\t\tfunction bt(){\r\n\t\t\tvar screenHeight = (rootel.clientHeight-bto.offsetHeight)+rootel.scrollTop;\r\n\t\t\tif(screenHeight<722){\r\n\t\t\t\tbto.style.top = \"722px\";\r\n\t\t\t}else{\r\n\t\t\t\tbto.style.top=screenHeight+'px';\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetInterval(\"bt()\",1);\r\n\t\t$(function(){\r\n\t\t\t//遇到问题\r\n\t\t\t$(\"#lock_problem\").click(function() {//遇到问题\r\n\t\t\t\t//var checkArr = $(\"input[name='payType']:checked\").val();\r\n\t\t\t\tvar checkArr=$(\"#payType\").val();\r\n\t\t\t\tvar orderno = $(\"#orderno\").val();\r\n\t\t\t\t$(\".warm-prompt\").hide();//弹出提示层消失\r\n\t\t\t\t$(\".sp_box\").hide();//锁屏层消失\r\n\t\t\t\twindow.location.href=\"/NetWorkUI/payFinish16\"+orderno+\"=77\"+checkArr;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\t//支付成功\r\n\t\t\t$(\"#lock_success\").click(function() {//交易完成\r\n\t\t\t\t//var checkArr = $(\"input[name='payType']:checked\").val();\r\n\t\t\t\tvar checkArr=$(\"#payType\").val();\r\n\t\t\t\tvar orderno = $(\"#orderno\").val();\r\n\t\t\t\t$(\".warm-prompt\").css(\"display\",\"none\");//弹出提示层消失\r\n\t\t\t\t$(\".sp_box\").hide();//锁屏层消失\r\n\t\t\t\twindow.location.href=\"/NetWorkUI/payFinish16\"+orderno+\"=77\"+checkArr;\r\n\t\t\t});\t\r\n\t\t})\r\n</script>\r\n\t\t<!--底部 end-->\r\n\t</body>\t\r\n</html>\r\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 9501,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.133Z",
        "time": 49.634000000878586,
        "timings": {
          "blocked": 1.309999999884516,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.10799999999999998,
          "wait": 46.949999999870315,
          "receive": 1.266000001123757,
          "_blocked_queueing": 0.450999999884516,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 7
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "10512",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"293287-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 790,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"293287-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 293287,
            "mimeType": "application/javascript",
            "text": "/*!\r\n * jQuery JavaScript Library v1.11.1\r\n * http://jquery.com/\r\n *\r\n * Includes Sizzle.js\r\n * http://sizzlejs.com/\r\n *\r\n * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors\r\n * Released under the MIT license\r\n * http://jquery.org/license\r\n *\r\n * Date: 2014-05-01T17:42Z\r\n */\r\n\r\n(function( global, factory ) {\r\n\r\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\r\n\t\t// For CommonJS and CommonJS-like environments where a proper window is present,\r\n\t\t// execute the factory and get jQuery\r\n\t\t// For environments that do not inherently posses a window with a document\r\n\t\t// (such as Node.js), expose a jQuery-making factory as module.exports\r\n\t\t// This accentuates the need for the creation of a real window\r\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\r\n\t\t// See ticket #14549 for more info\r\n\t\tmodule.exports = global.document ?\r\n\t\t\tfactory( global, true ) :\r\n\t\t\tfunction( w ) {\r\n\t\t\t\tif ( !w.document ) {\r\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\r\n\t\t\t\t}\r\n\t\t\t\treturn factory( w );\r\n\t\t\t};\r\n\t} else {\r\n\t\tfactory( global );\r\n\t}\r\n\r\n// Pass this if window is not defined yet\r\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\r\n\r\n// Can't do this because several apps including ASP.NET trace\r\n// the stack via arguments.caller.callee and Firefox dies if\r\n// you try to trace through \"use strict\" call chains. (#13335)\r\n// Support: Firefox 18+\r\n//\r\n\r\nvar deletedIds = [];\r\n\r\nvar slice = deletedIds.slice;\r\n\r\nvar concat = deletedIds.concat;\r\n\r\nvar push = deletedIds.push;\r\n\r\nvar indexOf = deletedIds.indexOf;\r\n\r\nvar class2type = {};\r\n\r\nvar toString = class2type.toString;\r\n\r\nvar hasOwn = class2type.hasOwnProperty;\r\n\r\nvar support = {};\r\n\r\n\r\n\r\nvar\r\n\tversion = \"1.11.1\",\r\n\r\n\t// Define a local copy of jQuery\r\n\tjQuery = function( selector, context ) {\r\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\r\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\r\n\t\treturn new jQuery.fn.init( selector, context );\r\n\t},\r\n\r\n\t// Support: Android<4.1, IE<9\r\n\t// Make sure we trim BOM and NBSP\r\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\r\n\r\n\t// Matches dashed string for camelizing\r\n\trmsPrefix = /^-ms-/,\r\n\trdashAlpha = /-([\\da-z])/gi,\r\n\r\n\t// Used by jQuery.camelCase as callback to replace()\r\n\tfcamelCase = function( all, letter ) {\r\n\t\treturn letter.toUpperCase();\r\n\t};\r\n\r\njQuery.fn = jQuery.prototype = {\r\n\t// The current version of jQuery being used\r\n\tjquery: version,\r\n\r\n\tconstructor: jQuery,\r\n\r\n\t// Start with an empty selector\r\n\tselector: \"\",\r\n\r\n\t// The default length of a jQuery object is 0\r\n\tlength: 0,\r\n\r\n\ttoArray: function() {\r\n\t\treturn slice.call( this );\r\n\t},\r\n\r\n\t// Get the Nth element in the matched element set OR\r\n\t// Get the whole matched element set as a clean array\r\n\tget: function( num ) {\r\n\t\treturn num != null ?\r\n\r\n\t\t\t// Return just the one element from the set\r\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\r\n\r\n\t\t\t// Return all the elements in a clean array\r\n\t\t\tslice.call( this );\r\n\t},\r\n\r\n\t// Take an array of elements and push it onto the stack\r\n\t// (returning the new matched element set)\r\n\tpushStack: function( elems ) {\r\n\r\n\t\t// Build a new jQuery matched element set\r\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\r\n\r\n\t\t// Add the old object onto the stack (as a reference)\r\n\t\tret.prevObject = this;\r\n\t\tret.context = this.context;\r\n\r\n\t\t// Return the newly-formed element set\r\n\t\treturn ret;\r\n\t},\r\n\r\n\t// Execute a callback for every element in the matched set.\r\n\t// (You can seed the arguments with an array of args, but this is\r\n\t// only used internally.)\r\n\teach: function( callback, args ) {\r\n\t\treturn jQuery.each( this, callback, args );\r\n\t},\r\n\r\n\tmap: function( callback ) {\r\n\t\treturn this.pushStack( jQuery.map(this, function( elem, i ) {\r\n\t\t\treturn callback.call( elem, i, elem );\r\n\t\t}));\r\n\t},\r\n\r\n\tslice: function() {\r\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\r\n\t},\r\n\r\n\tfirst: function() {\r\n\t\treturn this.eq( 0 );\r\n\t},\r\n\r\n\tlast: function() {\r\n\t\treturn this.eq( -1 );\r\n\t},\r\n\r\n\teq: function( i ) {\r\n\t\tvar len = this.length,\r\n\t\t\tj = +i + ( i < 0 ? len : 0 );\r\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );\r\n\t},\r\n\r\n\tend: function() {\r\n\t\treturn this.prevObject || this.constructor(null);\r\n\t},\r\n\r\n\t// For internal use only.\r\n\t// Behaves like an Array's method, not like a jQuery method.\r\n\tpush: push,\r\n\tsort: deletedIds.sort,\r\n\tsplice: deletedIds.splice\r\n};\r\n\r\njQuery.extend = jQuery.fn.extend = function() {\r\n\tvar src, copyIsArray, copy, name, options, clone,\r\n\t\ttarget = arguments[0] || {},\r\n\t\ti = 1,\r\n\t\tlength = arguments.length,\r\n\t\tdeep = false;\r\n\r\n\t// Handle a deep copy situation\r\n\tif ( typeof target === \"boolean\" ) {\r\n\t\tdeep = target;\r\n\r\n\t\t// skip the boolean and the target\r\n\t\ttarget = arguments[ i ] || {};\r\n\t\ti++;\r\n\t}\r\n\r\n\t// Handle case when target is a string or something (possible in deep copy)\r\n\tif ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {\r\n\t\ttarget = {};\r\n\t}\r\n\r\n\t// extend jQuery itself if only one argument is passed\r\n\tif ( i === length ) {\r\n\t\ttarget = this;\r\n\t\ti--;\r\n\t}\r\n\r\n\tfor ( ; i < length; i++ ) {\r\n\t\t// Only deal with non-null/undefined values\r\n\t\tif ( (options = arguments[ i ]) != null ) {\r\n\t\t\t// Extend the base object\r\n\t\t\tfor ( name in options ) {\r\n\t\t\t\tsrc = target[ name ];\r\n\t\t\t\tcopy = options[ name ];\r\n\r\n\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\tif ( target === copy ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {\r\n\t\t\t\t\tif ( copyIsArray ) {\r\n\t\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\r\n\r\n\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t} else if ( copy !== undefined ) {\r\n\t\t\t\t\ttarget[ name ] = copy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the modified object\r\n\treturn target;\r\n};\r\n\r\njQuery.extend({\r\n\t// Unique for each copy of jQuery on the page\r\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\r\n\r\n\t// Assume jQuery is ready without the ready module\r\n\tisReady: true,\r\n\r\n\terror: function( msg ) {\r\n\t\tthrow new Error( msg );\r\n\t},\r\n\r\n\tnoop: function() {},\r\n\r\n\t// See test/unit/core.js for details concerning isFunction.\r\n\t// Since version 1.3, DOM methods and functions like alert\r\n\t// aren't supported. They return false on IE (#2968).\r\n\tisFunction: function( obj ) {\r\n\t\treturn jQuery.type(obj) === \"function\";\r\n\t},\r\n\r\n\tisArray: Array.isArray || function( obj ) {\r\n\t\treturn jQuery.type(obj) === \"array\";\r\n\t},\r\n\r\n\tisWindow: function( obj ) {\r\n\t\t/* jshint eqeqeq: false */\r\n\t\treturn obj != null && obj == obj.window;\r\n\t},\r\n\r\n\tisNumeric: function( obj ) {\r\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\r\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n\t\t// subtraction forces infinities to NaN\r\n\t\treturn !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;\r\n\t},\r\n\r\n\tisEmptyObject: function( obj ) {\r\n\t\tvar name;\r\n\t\tfor ( name in obj ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\r\n\tisPlainObject: function( obj ) {\r\n\t\tvar key;\r\n\r\n\t\t// Must be an Object.\r\n\t\t// Because of IE, we also have to check the presence of the constructor property.\r\n\t\t// Make sure that DOM nodes and window objects don't pass through, as well\r\n\t\tif ( !obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Not own constructor property must be Object\r\n\t\t\tif ( obj.constructor &&\r\n\t\t\t\t!hasOwn.call(obj, \"constructor\") &&\r\n\t\t\t\t!hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\") ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch ( e ) {\r\n\t\t\t// IE8,9 Will throw exceptions on certain host objects #9897\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Support: IE<9\r\n\t\t// Handle iteration over inherited properties before own properties.\r\n\t\tif ( support.ownLast ) {\r\n\t\t\tfor ( key in obj ) {\r\n\t\t\t\treturn hasOwn.call( obj, key );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Own properties are enumerated firstly, so to speed up,\r\n\t\t// if last one is own, then all properties are own.\r\n\t\tfor ( key in obj ) {}\r\n\r\n\t\treturn key === undefined || hasOwn.call( obj, key );\r\n\t},\r\n\r\n\ttype: function( obj ) {\r\n\t\tif ( obj == null ) {\r\n\t\t\treturn obj + \"\";\r\n\t\t}\r\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\r\n\t\t\tclass2type[ toString.call(obj) ] || \"object\" :\r\n\t\t\ttypeof obj;\r\n\t},\r\n\r\n\t// Evaluates a script in a global context\r\n\t// Workarounds based on findings by Jim Driscoll\r\n\t// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\r\n\tglobalEval: function( data ) {\r\n\t\tif ( data && jQuery.trim( data ) ) {\r\n\t\t\t// We use execScript on Internet Explorer\r\n\t\t\t// We use an anonymous function so that context is window\r\n\t\t\t// rather than jQuery in Firefox\r\n\t\t\t( window.execScript || function( data ) {\r\n\t\t\t\twindow[ \"eval\" ].call( window, data );\r\n\t\t\t} )( data );\r\n\t\t}\r\n\t},\r\n\r\n\t// Convert dashed to camelCase; used by the css and data modules\r\n\t// Microsoft forgot to hump their vendor prefix (#9572)\r\n\tcamelCase: function( string ) {\r\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\r\n\t},\r\n\r\n\tnodeName: function( elem, name ) {\r\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\r\n\t},\r\n\r\n\t// args is for internal usage only\r\n\teach: function( obj, callback, args ) {\r\n\t\tvar value,\r\n\t\t\ti = 0,\r\n\t\t\tlength = obj.length,\r\n\t\t\tisArray = isArraylike( obj );\r\n\r\n\t\tif ( args ) {\r\n\t\t\tif ( isArray ) {\r\n\t\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );\r\n\r\n\t\t\t\t\tif ( value === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor ( i in obj ) {\r\n\t\t\t\t\tvalue = callback.apply( obj[ i ], args );\r\n\r\n\t\t\t\t\tif ( value === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// A special, fast, case for the most common use of each\r\n\t\t} else {\r\n\t\t\tif ( isArray ) {\r\n\t\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );\r\n\r\n\t\t\t\t\tif ( value === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor ( i in obj ) {\r\n\t\t\t\t\tvalue = callback.call( obj[ i ], i, obj[ i ] );\r\n\r\n\t\t\t\t\tif ( value === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t},\r\n\r\n\t// Support: Android<4.1, IE<9\r\n\ttrim: function( text ) {\r\n\t\treturn text == null ?\r\n\t\t\t\"\" :\r\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\r\n\t},\r\n\r\n\t// results is for internal usage only\r\n\tmakeArray: function( arr, results ) {\r\n\t\tvar ret = results || [];\r\n\r\n\t\tif ( arr != null ) {\r\n\t\t\tif ( isArraylike( Object(arr) ) ) {\r\n\t\t\t\tjQuery.merge( ret,\r\n\t\t\t\t\ttypeof arr === \"string\" ?\r\n\t\t\t\t\t[ arr ] : arr\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tpush.call( ret, arr );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t},\r\n\r\n\tinArray: function( elem, arr, i ) {\r\n\t\tvar len;\r\n\r\n\t\tif ( arr ) {\r\n\t\t\tif ( indexOf ) {\r\n\t\t\t\treturn indexOf.call( arr, elem, i );\r\n\t\t\t}\r\n\r\n\t\t\tlen = arr.length;\r\n\t\t\ti = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\r\n\r\n\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\t// Skip accessing in sparse arrays\r\n\t\t\t\tif ( i in arr && arr[ i ] === elem ) {\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t},\r\n\r\n\tmerge: function( first, second ) {\r\n\t\tvar len = +second.length,\r\n\t\t\tj = 0,\r\n\t\t\ti = first.length;\r\n\r\n\t\twhile ( j < len ) {\r\n\t\t\tfirst[ i++ ] = second[ j++ ];\r\n\t\t}\r\n\r\n\t\t// Support: IE<9\r\n\t\t// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)\r\n\t\tif ( len !== len ) {\r\n\t\t\twhile ( second[j] !== undefined ) {\r\n\t\t\t\tfirst[ i++ ] = second[ j++ ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfirst.length = i;\r\n\r\n\t\treturn first;\r\n\t},\r\n\r\n\tgrep: function( elems, callback, invert ) {\r\n\t\tvar callbackInverse,\r\n\t\t\tmatches = [],\r\n\t\t\ti = 0,\r\n\t\t\tlength = elems.length,\r\n\t\t\tcallbackExpect = !invert;\r\n\r\n\t\t// Go through the array, only saving the items\r\n\t\t// that pass the validator function\r\n\t\tfor ( ; i < length; i++ ) {\r\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\r\n\t\t\tif ( callbackInverse !== callbackExpect ) {\r\n\t\t\t\tmatches.push( elems[ i ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn matches;\r\n\t},\r\n\r\n\t// arg is for internal usage only\r\n\tmap: function( elems, callback, arg ) {\r\n\t\tvar value,\r\n\t\t\ti = 0,\r\n\t\t\tlength = elems.length,\r\n\t\t\tisArray = isArraylike( elems ),\r\n\t\t\tret = [];\r\n\r\n\t\t// Go through the array, translating each of the items to their new values\r\n\t\tif ( isArray ) {\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\r\n\r\n\t\t\t\tif ( value != null ) {\r\n\t\t\t\t\tret.push( value );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Go through every key on the object,\r\n\t\t} else {\r\n\t\t\tfor ( i in elems ) {\r\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\r\n\r\n\t\t\t\tif ( value != null ) {\r\n\t\t\t\t\tret.push( value );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Flatten any nested arrays\r\n\t\treturn concat.apply( [], ret );\r\n\t},\r\n\r\n\t// A global GUID counter for objects\r\n\tguid: 1,\r\n\r\n\t// Bind a function to a context, optionally partially applying any\r\n\t// arguments.\r\n\tproxy: function( fn, context ) {\r\n\t\tvar args, proxy, tmp;\r\n\r\n\t\tif ( typeof context === \"string\" ) {\r\n\t\t\ttmp = fn[ context ];\r\n\t\t\tcontext = fn;\r\n\t\t\tfn = tmp;\r\n\t\t}\r\n\r\n\t\t// Quick check to determine if target is callable, in the spec\r\n\t\t// this throws a TypeError, but we will just return undefined.\r\n\t\tif ( !jQuery.isFunction( fn ) ) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\t// Simulated bind\r\n\t\targs = slice.call( arguments, 2 );\r\n\t\tproxy = function() {\r\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\r\n\t\t};\r\n\r\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\r\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\r\n\r\n\t\treturn proxy;\r\n\t},\r\n\r\n\tnow: function() {\r\n\t\treturn +( new Date() );\r\n\t},\r\n\r\n\t// jQuery.support is not used in Core but other projects attach their\r\n\t// properties to it so it needs to exist.\r\n\tsupport: support\r\n});\r\n\r\n// Populate the class2type map\r\njQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {\r\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\r\n});\r\n\r\nfunction isArraylike( obj ) {\r\n\tvar length = obj.length,\r\n\t\ttype = jQuery.type( obj );\r\n\r\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif ( obj.nodeType === 1 && length ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn type === \"array\" || length === 0 ||\r\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\r\n}\r\nvar Sizzle =\r\n/*!\r\n * Sizzle CSS Selector Engine v1.10.19\r\n * http://sizzlejs.com/\r\n *\r\n * Copyright 2013 jQuery Foundation, Inc. and other contributors\r\n * Released under the MIT license\r\n * http://jquery.org/license\r\n *\r\n * Date: 2014-04-18\r\n */\r\n(function( window ) {\r\n\r\nvar i,\r\n\tsupport,\r\n\tExpr,\r\n\tgetText,\r\n\tisXML,\r\n\ttokenize,\r\n\tcompile,\r\n\tselect,\r\n\toutermostContext,\r\n\tsortInput,\r\n\thasDuplicate,\r\n\r\n\t// Local document vars\r\n\tsetDocument,\r\n\tdocument,\r\n\tdocElem,\r\n\tdocumentIsHTML,\r\n\trbuggyQSA,\r\n\trbuggyMatches,\r\n\tmatches,\r\n\tcontains,\r\n\r\n\t// Instance-specific data\r\n\texpando = \"sizzle\" + -(new Date()),\r\n\tpreferredDoc = window.document,\r\n\tdirruns = 0,\r\n\tdone = 0,\r\n\tclassCache = createCache(),\r\n\ttokenCache = createCache(),\r\n\tcompilerCache = createCache(),\r\n\tsortOrder = function( a, b ) {\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\t// General-purpose constants\r\n\tstrundefined = typeof undefined,\r\n\tMAX_NEGATIVE = 1 << 31,\r\n\r\n\t// Instance methods\r\n\thasOwn = ({}).hasOwnProperty,\r\n\tarr = [],\r\n\tpop = arr.pop,\r\n\tpush_native = arr.push,\r\n\tpush = arr.push,\r\n\tslice = arr.slice,\r\n\t// Use a stripped-down indexOf if we can't use a native one\r\n\tindexOf = arr.indexOf || function( elem ) {\r\n\t\tvar i = 0,\r\n\t\t\tlen = this.length;\r\n\t\tfor ( ; i < len; i++ ) {\r\n\t\t\tif ( this[i] === elem ) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t},\r\n\r\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\r\n\r\n\t// Regular expressions\r\n\r\n\t// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\r\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\r\n\t// http://www.w3.org/TR/css3-syntax/#characters\r\n\tcharacterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\r\n\r\n\t// Loosely modeled on CSS identifier characters\r\n\t// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\r\n\t// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\r\n\tidentifier = characterEncoding.replace( \"w\", \"w#\" ),\r\n\r\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\r\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")(?:\" + whitespace +\r\n\t\t// Operator (capture 2)\r\n\t\t\"*([*^$|!~]?=)\" + whitespace +\r\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\r\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\r\n\t\t\"*\\\\]\",\r\n\r\n\tpseudos = \":(\" + characterEncoding + \")(?:\\\\((\" +\r\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\r\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\r\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\r\n\t\t// 2. simple (capture 6)\r\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\r\n\t\t// 3. anything else (capture 2)\r\n\t\t\".*\" +\r\n\t\t\")\\\\)|)\",\r\n\r\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\r\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\r\n\r\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\r\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\r\n\r\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\r\n\r\n\trpseudo = new RegExp( pseudos ),\r\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\r\n\r\n\tmatchExpr = {\r\n\t\t\"ID\": new RegExp( \"^#(\" + characterEncoding + \")\" ),\r\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + characterEncoding + \")\" ),\r\n\t\t\"TAG\": new RegExp( \"^(\" + characterEncoding.replace( \"w\", \"w*\" ) + \")\" ),\r\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\r\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\r\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\r\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\r\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\r\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\r\n\t\t// For use in libraries implementing .is()\r\n\t\t// We use this for POS matching in `select`\r\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\r\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\r\n\t},\r\n\r\n\trinputs = /^(?:input|select|textarea|button)$/i,\r\n\trheader = /^h\\d$/i,\r\n\r\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\r\n\r\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\r\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\r\n\r\n\trsibling = /[+~]/,\r\n\trescape = /'|\\\\/g,\r\n\r\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\r\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\r\n\tfunescape = function( _, escaped, escapedWhitespace ) {\r\n\t\tvar high = \"0x\" + escaped - 0x10000;\r\n\t\t// NaN means non-codepoint\r\n\t\t// Support: Firefox<24\r\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\r\n\t\treturn high !== high || escapedWhitespace ?\r\n\t\t\tescaped :\r\n\t\t\thigh < 0 ?\r\n\t\t\t\t// BMP codepoint\r\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\r\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\r\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\r\n\t};\r\n\r\n// Optimize for push.apply( _, NodeList )\r\ntry {\r\n\tpush.apply(\r\n\t\t(arr = slice.call( preferredDoc.childNodes )),\r\n\t\tpreferredDoc.childNodes\r\n\t);\r\n\t// Support: Android<4.0\r\n\t// Detect silently failing push.apply\r\n\tarr[ preferredDoc.childNodes.length ].nodeType;\r\n} catch ( e ) {\r\n\tpush = { apply: arr.length ?\r\n\r\n\t\t// Leverage slice if possible\r\n\t\tfunction( target, els ) {\r\n\t\t\tpush_native.apply( target, slice.call(els) );\r\n\t\t} :\r\n\r\n\t\t// Support: IE<9\r\n\t\t// Otherwise append directly\r\n\t\tfunction( target, els ) {\r\n\t\t\tvar j = target.length,\r\n\t\t\t\ti = 0;\r\n\t\t\t// Can't trust NodeList.length\r\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\r\n\t\t\ttarget.length = j - 1;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction Sizzle( selector, context, results, seed ) {\r\n\tvar match, elem, m, nodeType,\r\n\t\t// QSA vars\r\n\t\ti, groups, old, nid, newContext, newSelector;\r\n\r\n\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\r\n\t\tsetDocument( context );\r\n\t}\r\n\r\n\tcontext = context || document;\r\n\tresults = results || [];\r\n\r\n\tif ( !selector || typeof selector !== \"string\" ) {\r\n\t\treturn results;\r\n\t}\r\n\r\n\tif ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tif ( documentIsHTML && !seed ) {\r\n\r\n\t\t// Shortcuts\r\n\t\tif ( (match = rquickExpr.exec( selector )) ) {\r\n\t\t\t// Speed-up: Sizzle(\"#ID\")\r\n\t\t\tif ( (m = match[1]) ) {\r\n\t\t\t\tif ( nodeType === 9 ) {\r\n\t\t\t\t\telem = context.getElementById( m );\r\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\r\n\t\t\t\t\t// nodes that are no longer in the document (jQuery #6963)\r\n\t\t\t\t\tif ( elem && elem.parentNode ) {\r\n\t\t\t\t\t\t// Handle the case where IE, Opera, and Webkit return items\r\n\t\t\t\t\t\t// by name instead of ID\r\n\t\t\t\t\t\tif ( elem.id === m ) {\r\n\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Context is not a document\r\n\t\t\t\t\tif ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&\r\n\t\t\t\t\t\tcontains( context, elem ) && elem.id === m ) {\r\n\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t// Speed-up: Sizzle(\"TAG\")\r\n\t\t\t} else if ( match[2] ) {\r\n\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\r\n\t\t\t\treturn results;\r\n\r\n\t\t\t// Speed-up: Sizzle(\".CLASS\")\r\n\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {\r\n\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\r\n\t\t\t\treturn results;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// QSA path\r\n\t\tif ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\r\n\t\t\tnid = old = expando;\r\n\t\t\tnewContext = context;\r\n\t\t\tnewSelector = nodeType === 9 && selector;\r\n\r\n\t\t\t// qSA works strangely on Element-rooted queries\r\n\t\t\t// We can work around this by specifying an extra ID on the root\r\n\t\t\t// and working up from there (Thanks to Andrew Dupont for the technique)\r\n\t\t\t// IE 8 doesn't work on object elements\r\n\t\t\tif ( nodeType === 1 && context.nodeName.toLowerCase() !== \"object\" ) {\r\n\t\t\t\tgroups = tokenize( selector );\r\n\r\n\t\t\t\tif ( (old = context.getAttribute(\"id\")) ) {\r\n\t\t\t\t\tnid = old.replace( rescape, \"\\\\$&\" );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcontext.setAttribute( \"id\", nid );\r\n\t\t\t\t}\r\n\t\t\t\tnid = \"[id='\" + nid + \"'] \";\r\n\r\n\t\t\t\ti = groups.length;\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\tgroups[i] = nid + toSelector( groups[i] );\r\n\t\t\t\t}\r\n\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;\r\n\t\t\t\tnewSelector = groups.join(\",\");\r\n\t\t\t}\r\n\r\n\t\t\tif ( newSelector ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tpush.apply( results,\r\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn results;\r\n\t\t\t\t} catch(qsaError) {\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tif ( !old ) {\r\n\t\t\t\t\t\tcontext.removeAttribute(\"id\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// All others\r\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\r\n}\r\n\r\n/**\r\n * Create key-value caches of limited size\r\n * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\r\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\r\n *\tdeleting the oldest entry\r\n */\r\nfunction createCache() {\r\n\tvar keys = [];\r\n\r\n\tfunction cache( key, value ) {\r\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\r\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\r\n\t\t\t// Only keep the most recent entries\r\n\t\t\tdelete cache[ keys.shift() ];\r\n\t\t}\r\n\t\treturn (cache[ key + \" \" ] = value);\r\n\t}\r\n\treturn cache;\r\n}\r\n\r\n/**\r\n * Mark a function for special use by Sizzle\r\n * @param {Function} fn The function to mark\r\n */\r\nfunction markFunction( fn ) {\r\n\tfn[ expando ] = true;\r\n\treturn fn;\r\n}\r\n\r\n/**\r\n * Support testing using an element\r\n * @param {Function} fn Passed the created div and expects a boolean result\r\n */\r\nfunction assert( fn ) {\r\n\tvar div = document.createElement(\"div\");\r\n\r\n\ttry {\r\n\t\treturn !!fn( div );\r\n\t} catch (e) {\r\n\t\treturn false;\r\n\t} finally {\r\n\t\t// Remove from its parent by default\r\n\t\tif ( div.parentNode ) {\r\n\t\t\tdiv.parentNode.removeChild( div );\r\n\t\t}\r\n\t\t// release memory in IE\r\n\t\tdiv = null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Adds the same handler for all of the specified attrs\r\n * @param {String} attrs Pipe-separated list of attributes\r\n * @param {Function} handler The method that will be applied\r\n */\r\nfunction addHandle( attrs, handler ) {\r\n\tvar arr = attrs.split(\"|\"),\r\n\t\ti = attrs.length;\r\n\r\n\twhile ( i-- ) {\r\n\t\tExpr.attrHandle[ arr[i] ] = handler;\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks document order of two siblings\r\n * @param {Element} a\r\n * @param {Element} b\r\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\r\n */\r\nfunction siblingCheck( a, b ) {\r\n\tvar cur = b && a,\r\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\r\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\r\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\r\n\r\n\t// Use IE sourceIndex if available on both nodes\r\n\tif ( diff ) {\r\n\t\treturn diff;\r\n\t}\r\n\r\n\t// Check if b follows a\r\n\tif ( cur ) {\r\n\t\twhile ( (cur = cur.nextSibling) ) {\r\n\t\t\tif ( cur === b ) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn a ? 1 : -1;\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for input types\r\n * @param {String} type\r\n */\r\nfunction createInputPseudo( type ) {\r\n\treturn function( elem ) {\r\n\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\treturn name === \"input\" && elem.type === type;\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for buttons\r\n * @param {String} type\r\n */\r\nfunction createButtonPseudo( type ) {\r\n\treturn function( elem ) {\r\n\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for positionals\r\n * @param {Function} fn\r\n */\r\nfunction createPositionalPseudo( fn ) {\r\n\treturn markFunction(function( argument ) {\r\n\t\targument = +argument;\r\n\t\treturn markFunction(function( seed, matches ) {\r\n\t\t\tvar j,\r\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\r\n\t\t\t\ti = matchIndexes.length;\r\n\r\n\t\t\t// Match elements found at the specified indexes\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\r\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n * Checks a node for validity as a Sizzle context\r\n * @param {Element|Object=} context\r\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\r\n */\r\nfunction testContext( context ) {\r\n\treturn context && typeof context.getElementsByTagName !== strundefined && context;\r\n}\r\n\r\n// Expose support vars for convenience\r\nsupport = Sizzle.support = {};\r\n\r\n/**\r\n * Detects XML nodes\r\n * @param {Element|Object} elem An element or a document\r\n * @returns {Boolean} True iff elem is a non-HTML XML node\r\n */\r\nisXML = Sizzle.isXML = function( elem ) {\r\n\t// documentElement is verified for cases where it doesn't yet exist\r\n\t// (such as loading iframes in IE - #4833)\r\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\r\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\r\n};\r\n\r\n/**\r\n * Sets document-related variables once based on the current document\r\n * @param {Element|Object} [doc] An element or document object to use to set the document\r\n * @returns {Object} Returns the current document\r\n */\r\nsetDocument = Sizzle.setDocument = function( node ) {\r\n\tvar hasCompare,\r\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc,\r\n\t\tparent = doc.defaultView;\r\n\r\n\t// If no document and documentElement is available, return\r\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\r\n\t\treturn document;\r\n\t}\r\n\r\n\t// Set our document\r\n\tdocument = doc;\r\n\tdocElem = doc.documentElement;\r\n\r\n\t// Support tests\r\n\tdocumentIsHTML = !isXML( doc );\r\n\r\n\t// Support: IE>8\r\n\t// If iframe document is assigned to \"document\" variable and if iframe has been reloaded,\r\n\t// IE will throw \"permission denied\" error when accessing \"document\" variable, see jQuery #13936\r\n\t// IE6-8 do not support the defaultView property so parent will be undefined\r\n\tif ( parent && parent !== parent.top ) {\r\n\t\t// IE11 does not have attachEvent, so all must suffer\r\n\t\tif ( parent.addEventListener ) {\r\n\t\t\tparent.addEventListener( \"unload\", function() {\r\n\t\t\t\tsetDocument();\r\n\t\t\t}, false );\r\n\t\t} else if ( parent.attachEvent ) {\r\n\t\t\tparent.attachEvent( \"onunload\", function() {\r\n\t\t\t\tsetDocument();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/* Attributes\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Support: IE<8\r\n\t// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)\r\n\tsupport.attributes = assert(function( div ) {\r\n\t\tdiv.className = \"i\";\r\n\t\treturn !div.getAttribute(\"className\");\r\n\t});\r\n\r\n\t/* getElement(s)By*\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Check if getElementsByTagName(\"*\") returns only elements\r\n\tsupport.getElementsByTagName = assert(function( div ) {\r\n\t\tdiv.appendChild( doc.createComment(\"\") );\r\n\t\treturn !div.getElementsByTagName(\"*\").length;\r\n\t});\r\n\r\n\t// Check if getElementsByClassName can be trusted\r\n\tsupport.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {\r\n\t\tdiv.innerHTML = \"<div class='a'></div><div class='a i'></div>\";\r\n\r\n\t\t// Support: Safari<4\r\n\t\t// Catch class over-caching\r\n\t\tdiv.firstChild.className = \"i\";\r\n\t\t// Support: Opera<10\r\n\t\t// Catch gEBCN failure to find non-leading classes\r\n\t\treturn div.getElementsByClassName(\"i\").length === 2;\r\n\t});\r\n\r\n\t// Support: IE<10\r\n\t// Check if getElementById returns elements by name\r\n\t// The broken getElementById methods don't pick up programatically-set names,\r\n\t// so use a roundabout getElementsByName test\r\n\tsupport.getById = assert(function( div ) {\r\n\t\tdocElem.appendChild( div ).id = expando;\r\n\t\treturn !doc.getElementsByName || !doc.getElementsByName( expando ).length;\r\n\t});\r\n\r\n\t// ID find and filter\r\n\tif ( support.getById ) {\r\n\t\tExpr.find[\"ID\"] = function( id, context ) {\r\n\t\t\tif ( typeof context.getElementById !== strundefined && documentIsHTML ) {\r\n\t\t\t\tvar m = context.getElementById( id );\r\n\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\r\n\t\t\t\t// nodes that are no longer in the document #6963\r\n\t\t\t\treturn m && m.parentNode ? [ m ] : [];\r\n\t\t\t}\r\n\t\t};\r\n\t\tExpr.filter[\"ID\"] = function( id ) {\r\n\t\t\tvar attrId = id.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\r\n\t\t\t};\r\n\t\t};\r\n\t} else {\r\n\t\t// Support: IE6/7\r\n\t\t// getElementById is not reliable as a find shortcut\r\n\t\tdelete Expr.find[\"ID\"];\r\n\r\n\t\tExpr.filter[\"ID\"] =  function( id ) {\r\n\t\t\tvar attrId = id.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode(\"id\");\r\n\t\t\t\treturn node && node.value === attrId;\r\n\t\t\t};\r\n\t\t};\r\n\t}\r\n\r\n\t// Tag\r\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\r\n\t\tfunction( tag, context ) {\r\n\t\t\tif ( typeof context.getElementsByTagName !== strundefined ) {\r\n\t\t\t\treturn context.getElementsByTagName( tag );\r\n\t\t\t}\r\n\t\t} :\r\n\t\tfunction( tag, context ) {\r\n\t\t\tvar elem,\r\n\t\t\t\ttmp = [],\r\n\t\t\t\ti = 0,\r\n\t\t\t\tresults = context.getElementsByTagName( tag );\r\n\r\n\t\t\t// Filter out possible comments\r\n\t\t\tif ( tag === \"*\" ) {\r\n\t\t\t\twhile ( (elem = results[i++]) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\t\t\t\ttmp.push( elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t};\r\n\r\n\t// Class\r\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\r\n\t\tif ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {\r\n\t\t\treturn context.getElementsByClassName( className );\r\n\t\t}\r\n\t};\r\n\r\n\t/* QSA/matchesSelector\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// QSA and matchesSelector support\r\n\r\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\r\n\trbuggyMatches = [];\r\n\r\n\t// qSa(:focus) reports false when true (Chrome 21)\r\n\t// We allow this because of a bug in IE8/9 that throws an error\r\n\t// whenever `document.activeElement` is accessed on an iframe\r\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\r\n\t// See http://bugs.jquery.com/ticket/13378\r\n\trbuggyQSA = [];\r\n\r\n\tif ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {\r\n\t\t// Build QSA regex\r\n\t\t// Regex strategy adopted from Diego Perini\r\n\t\tassert(function( div ) {\r\n\t\t\t// Select is set to empty string on purpose\r\n\t\t\t// This is to test IE's treatment of not explicitly\r\n\t\t\t// setting a boolean content attribute,\r\n\t\t\t// since its presence should be enough\r\n\t\t\t// http://bugs.jquery.com/ticket/12359\r\n\t\t\tdiv.innerHTML = \"<select msallowclip=''><option selected=''></option></select>\";\r\n\r\n\t\t\t// Support: IE8, Opera 11-12.16\r\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\r\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\r\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\r\n\t\t\tif ( div.querySelectorAll(\"[msallowclip^='']\").length ) {\r\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: IE8\r\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\r\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\r\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Webkit/Opera - :checked should return selected option elements\r\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\r\n\t\t\t// IE8 throws error here and will not see later tests\r\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\r\n\t\t\t\trbuggyQSA.push(\":checked\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tassert(function( div ) {\r\n\t\t\t// Support: Windows 8 Native Apps\r\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\r\n\t\t\tvar input = doc.createElement(\"input\");\r\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\r\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\r\n\r\n\t\t\t// Support: IE8\r\n\t\t\t// Enforce case-sensitivity of name attribute\r\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\r\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\r\n\t\t\t}\r\n\r\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\r\n\t\t\t// IE8 throws error here and will not see later tests\r\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\r\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\r\n\t\t\tdiv.querySelectorAll(\"*,:x\");\r\n\t\t\trbuggyQSA.push(\",.*:\");\r\n\t\t});\r\n\t}\r\n\r\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\r\n\t\tdocElem.webkitMatchesSelector ||\r\n\t\tdocElem.mozMatchesSelector ||\r\n\t\tdocElem.oMatchesSelector ||\r\n\t\tdocElem.msMatchesSelector) )) ) {\r\n\r\n\t\tassert(function( div ) {\r\n\t\t\t// Check to see if it's possible to do matchesSelector\r\n\t\t\t// on a disconnected node (IE 9)\r\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\r\n\r\n\t\t\t// This should fail with an exception\r\n\t\t\t// Gecko does not error, returns false instead\r\n\t\t\tmatches.call( div, \"[s!='']:x\" );\r\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\r\n\t\t});\r\n\t}\r\n\r\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\r\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\r\n\r\n\t/* Contains\r\n\t---------------------------------------------------------------------- */\r\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\r\n\r\n\t// Element contains another\r\n\t// Purposefully does not implement inclusive descendent\r\n\t// As in, an element does not contain itself\r\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\r\n\t\tfunction( a, b ) {\r\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\r\n\t\t\t\tbup = b && b.parentNode;\r\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\r\n\t\t\t\tadown.contains ?\r\n\t\t\t\t\tadown.contains( bup ) :\r\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\r\n\t\t\t));\r\n\t\t} :\r\n\t\tfunction( a, b ) {\r\n\t\t\tif ( b ) {\r\n\t\t\t\twhile ( (b = b.parentNode) ) {\r\n\t\t\t\t\tif ( b === a ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t/* Sorting\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Document order sorting\r\n\tsortOrder = hasCompare ?\r\n\tfunction( a, b ) {\r\n\r\n\t\t// Flag for duplicate removal\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Sort on method existence if only one input has compareDocumentPosition\r\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\r\n\t\tif ( compare ) {\r\n\t\t\treturn compare;\r\n\t\t}\r\n\r\n\t\t// Calculate position if both inputs belong to the same document\r\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\r\n\t\t\ta.compareDocumentPosition( b ) :\r\n\r\n\t\t\t// Otherwise we know they are disconnected\r\n\t\t\t1;\r\n\r\n\t\t// Disconnected nodes\r\n\t\tif ( compare & 1 ||\r\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\r\n\r\n\t\t\t// Choose the first element that is related to our preferred document\r\n\t\t\tif ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tif ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Maintain original order\r\n\t\t\treturn sortInput ?\r\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :\r\n\t\t\t\t0;\r\n\t\t}\r\n\r\n\t\treturn compare & 4 ? -1 : 1;\r\n\t} :\r\n\tfunction( a, b ) {\r\n\t\t// Exit early if the nodes are identical\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tvar cur,\r\n\t\t\ti = 0,\r\n\t\t\taup = a.parentNode,\r\n\t\t\tbup = b.parentNode,\r\n\t\t\tap = [ a ],\r\n\t\t\tbp = [ b ];\r\n\r\n\t\t// Parentless nodes are either documents or disconnected\r\n\t\tif ( !aup || !bup ) {\r\n\t\t\treturn a === doc ? -1 :\r\n\t\t\t\tb === doc ? 1 :\r\n\t\t\t\taup ? -1 :\r\n\t\t\t\tbup ? 1 :\r\n\t\t\t\tsortInput ?\r\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :\r\n\t\t\t\t0;\r\n\r\n\t\t// If the nodes are siblings, we can do a quick check\r\n\t\t} else if ( aup === bup ) {\r\n\t\t\treturn siblingCheck( a, b );\r\n\t\t}\r\n\r\n\t\t// Otherwise we need full lists of their ancestors for comparison\r\n\t\tcur = a;\r\n\t\twhile ( (cur = cur.parentNode) ) {\r\n\t\t\tap.unshift( cur );\r\n\t\t}\r\n\t\tcur = b;\r\n\t\twhile ( (cur = cur.parentNode) ) {\r\n\t\t\tbp.unshift( cur );\r\n\t\t}\r\n\r\n\t\t// Walk down the tree looking for a discrepancy\r\n\t\twhile ( ap[i] === bp[i] ) {\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\treturn i ?\r\n\t\t\t// Do a sibling check if the nodes have a common ancestor\r\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\r\n\r\n\t\t\t// Otherwise nodes in our document sort first\r\n\t\t\tap[i] === preferredDoc ? -1 :\r\n\t\t\tbp[i] === preferredDoc ? 1 :\r\n\t\t\t0;\r\n\t};\r\n\r\n\treturn doc;\r\n};\r\n\r\nSizzle.matches = function( expr, elements ) {\r\n\treturn Sizzle( expr, null, null, elements );\r\n};\r\n\r\nSizzle.matchesSelector = function( elem, expr ) {\r\n\t// Set document vars if needed\r\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\r\n\t\tsetDocument( elem );\r\n\t}\r\n\r\n\t// Make sure that attribute selectors are quoted\r\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\r\n\r\n\tif ( support.matchesSelector && documentIsHTML &&\r\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\r\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\r\n\r\n\t\ttry {\r\n\t\t\tvar ret = matches.call( elem, expr );\r\n\r\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\r\n\t\t\tif ( ret || support.disconnectedMatch ||\r\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\r\n\t\t\t\t\t// fragment in IE 9\r\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t} catch(e) {}\r\n\t}\r\n\r\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\r\n};\r\n\r\nSizzle.contains = function( context, elem ) {\r\n\t// Set document vars if needed\r\n\tif ( ( context.ownerDocument || context ) !== document ) {\r\n\t\tsetDocument( context );\r\n\t}\r\n\treturn contains( context, elem );\r\n};\r\n\r\nSizzle.attr = function( elem, name ) {\r\n\t// Set document vars if needed\r\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\r\n\t\tsetDocument( elem );\r\n\t}\r\n\r\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\r\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\r\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\r\n\t\t\tfn( elem, name, !documentIsHTML ) :\r\n\t\t\tundefined;\r\n\r\n\treturn val !== undefined ?\r\n\t\tval :\r\n\t\tsupport.attributes || !documentIsHTML ?\r\n\t\t\telem.getAttribute( name ) :\r\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\r\n\t\t\t\tval.value :\r\n\t\t\t\tnull;\r\n};\r\n\r\nSizzle.error = function( msg ) {\r\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\r\n};\r\n\r\n/**\r\n * Document sorting and removing duplicates\r\n * @param {ArrayLike} results\r\n */\r\nSizzle.uniqueSort = function( results ) {\r\n\tvar elem,\r\n\t\tduplicates = [],\r\n\t\tj = 0,\r\n\t\ti = 0;\r\n\r\n\t// Unless we *know* we can detect duplicates, assume their presence\r\n\thasDuplicate = !support.detectDuplicates;\r\n\tsortInput = !support.sortStable && results.slice( 0 );\r\n\tresults.sort( sortOrder );\r\n\r\n\tif ( hasDuplicate ) {\r\n\t\twhile ( (elem = results[i++]) ) {\r\n\t\t\tif ( elem === results[ i ] ) {\r\n\t\t\t\tj = duplicates.push( i );\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile ( j-- ) {\r\n\t\t\tresults.splice( duplicates[ j ], 1 );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clear input after sorting to release objects\r\n\t// See https://github.com/jquery/sizzle/pull/225\r\n\tsortInput = null;\r\n\r\n\treturn results;\r\n};\r\n\r\n/**\r\n * Utility function for retrieving the text value of an array of DOM nodes\r\n * @param {Array|Element} elem\r\n */\r\ngetText = Sizzle.getText = function( elem ) {\r\n\tvar node,\r\n\t\tret = \"\",\r\n\t\ti = 0,\r\n\t\tnodeType = elem.nodeType;\r\n\r\n\tif ( !nodeType ) {\r\n\t\t// If no nodeType, this is expected to be an array\r\n\t\twhile ( (node = elem[i++]) ) {\r\n\t\t\t// Do not traverse comment nodes\r\n\t\t\tret += getText( node );\r\n\t\t}\r\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\r\n\t\t// Use textContent for elements\r\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\r\n\t\tif ( typeof elem.textContent === \"string\" ) {\r\n\t\t\treturn elem.textContent;\r\n\t\t} else {\r\n\t\t\t// Traverse its children\r\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\r\n\t\t\t\tret += getText( elem );\r\n\t\t\t}\r\n\t\t}\r\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\r\n\t\treturn elem.nodeValue;\r\n\t}\r\n\t// Do not include comment or processing instruction nodes\r\n\r\n\treturn ret;\r\n};\r\n\r\nExpr = Sizzle.selectors = {\r\n\r\n\t// Can be adjusted by the user\r\n\tcacheLength: 50,\r\n\r\n\tcreatePseudo: markFunction,\r\n\r\n\tmatch: matchExpr,\r\n\r\n\tattrHandle: {},\r\n\r\n\tfind: {},\r\n\r\n\trelative: {\r\n\t\t\">\": { dir: \"parentNode\", first: true },\r\n\t\t\" \": { dir: \"parentNode\" },\r\n\t\t\"+\": { dir: \"previousSibling\", first: true },\r\n\t\t\"~\": { dir: \"previousSibling\" }\r\n\t},\r\n\r\n\tpreFilter: {\r\n\t\t\"ATTR\": function( match ) {\r\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\r\n\r\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\r\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\r\n\r\n\t\t\tif ( match[2] === \"~=\" ) {\r\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\r\n\t\t\t}\r\n\r\n\t\t\treturn match.slice( 0, 4 );\r\n\t\t},\r\n\r\n\t\t\"CHILD\": function( match ) {\r\n\t\t\t/* matches from matchExpr[\"CHILD\"]\r\n\t\t\t\t1 type (only|nth|...)\r\n\t\t\t\t2 what (child|of-type)\r\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\r\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\r\n\t\t\t\t5 sign of xn-component\r\n\t\t\t\t6 x of xn-component\r\n\t\t\t\t7 sign of y-component\r\n\t\t\t\t8 y of y-component\r\n\t\t\t*/\r\n\t\t\tmatch[1] = match[1].toLowerCase();\r\n\r\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\r\n\t\t\t\t// nth-* requires argument\r\n\t\t\t\tif ( !match[3] ) {\r\n\t\t\t\t\tSizzle.error( match[0] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\r\n\t\t\t\t// remember that false/true cast respectively to 0/1\r\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\r\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\r\n\r\n\t\t\t// other types prohibit arguments\r\n\t\t\t} else if ( match[3] ) {\r\n\t\t\t\tSizzle.error( match[0] );\r\n\t\t\t}\r\n\r\n\t\t\treturn match;\r\n\t\t},\r\n\r\n\t\t\"PSEUDO\": function( match ) {\r\n\t\t\tvar excess,\r\n\t\t\t\tunquoted = !match[6] && match[2];\r\n\r\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// Accept quoted arguments as-is\r\n\t\t\tif ( match[3] ) {\r\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\r\n\r\n\t\t\t// Strip excess characters from unquoted arguments\r\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\r\n\t\t\t\t// Get excess from tokenize (recursively)\r\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\r\n\t\t\t\t// advance to the next closing parenthesis\r\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\r\n\r\n\t\t\t\t// excess is a negative index\r\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\r\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\r\n\t\t\t}\r\n\r\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\r\n\t\t\treturn match.slice( 0, 3 );\r\n\t\t}\r\n\t},\r\n\r\n\tfilter: {\r\n\r\n\t\t\"TAG\": function( nodeNameSelector ) {\r\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\r\n\t\t\treturn nodeNameSelector === \"*\" ?\r\n\t\t\t\tfunction() { return true; } :\r\n\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\r\n\t\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"CLASS\": function( className ) {\r\n\t\t\tvar pattern = classCache[ className + \" \" ];\r\n\r\n\t\t\treturn pattern ||\r\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\r\n\t\t\t\tclassCache( className, function( elem ) {\r\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute(\"class\") || \"\" );\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\t\"ATTR\": function( name, operator, check ) {\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar result = Sizzle.attr( elem, name );\r\n\r\n\t\t\t\tif ( result == null ) {\r\n\t\t\t\t\treturn operator === \"!=\";\r\n\t\t\t\t}\r\n\t\t\t\tif ( !operator ) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult += \"\";\r\n\r\n\t\t\t\treturn operator === \"=\" ? result === check :\r\n\t\t\t\t\toperator === \"!=\" ? result !== check :\r\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\r\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\r\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\r\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result + \" \" ).indexOf( check ) > -1 :\r\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\r\n\t\t\t\t\tfalse;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\r\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\r\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\r\n\t\t\t\tofType = what === \"of-type\";\r\n\r\n\t\t\treturn first === 1 && last === 0 ?\r\n\r\n\t\t\t\t// Shortcut for :nth-*(n)\r\n\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\treturn !!elem.parentNode;\r\n\t\t\t\t} :\r\n\r\n\t\t\t\tfunction( elem, context, xml ) {\r\n\t\t\t\t\tvar cache, outerCache, node, diff, nodeIndex, start,\r\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\r\n\t\t\t\t\t\tparent = elem.parentNode,\r\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\r\n\t\t\t\t\t\tuseCache = !xml && !ofType;\r\n\r\n\t\t\t\t\tif ( parent ) {\r\n\r\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\r\n\t\t\t\t\t\tif ( simple ) {\r\n\t\t\t\t\t\t\twhile ( dir ) {\r\n\t\t\t\t\t\t\t\tnode = elem;\r\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\r\n\t\t\t\t\t\t\t\t\tif ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {\r\n\t\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\r\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\r\n\r\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\r\n\t\t\t\t\t\tif ( forward && useCache ) {\r\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\r\n\t\t\t\t\t\t\touterCache = parent[ expando ] || (parent[ expando ] = {});\r\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\r\n\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\r\n\t\t\t\t\t\t\tdiff = cache[0] === dirruns && cache[2];\r\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\r\n\r\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\r\n\r\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\r\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\r\n\r\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\r\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\r\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Use previously-cached element index if available\r\n\t\t\t\t\t\t} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {\r\n\t\t\t\t\t\t\tdiff = cache[1];\r\n\r\n\t\t\t\t\t\t// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\r\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\r\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {\r\n\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\r\n\t\t\t\t\t\t\t\t\tif ( useCache ) {\r\n\t\t\t\t\t\t\t\t\t\t(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ( node === elem ) {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\r\n\t\t\t\t\t\tdiff -= last;\r\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"PSEUDO\": function( pseudo, argument ) {\r\n\t\t\t// pseudo-class names are case-insensitive\r\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\r\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\r\n\t\t\t// Remember that setFilters inherits from pseudos\r\n\t\t\tvar args,\r\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\r\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\r\n\r\n\t\t\t// The user may use createPseudo to indicate that\r\n\t\t\t// arguments are needed to create the filter function\r\n\t\t\t// just as Sizzle does\r\n\t\t\tif ( fn[ expando ] ) {\r\n\t\t\t\treturn fn( argument );\r\n\t\t\t}\r\n\r\n\t\t\t// But maintain support for old signatures\r\n\t\t\tif ( fn.length > 1 ) {\r\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\r\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\r\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\r\n\t\t\t\t\t\tvar idx,\r\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\r\n\t\t\t\t\t\t\ti = matched.length;\r\n\t\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\t\tidx = indexOf.call( seed, matched[i] );\r\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) :\r\n\t\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\t\treturn fn( elem, 0, args );\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn fn;\r\n\t\t}\r\n\t},\r\n\r\n\tpseudos: {\r\n\t\t// Potentially complex pseudos\r\n\t\t\"not\": markFunction(function( selector ) {\r\n\t\t\t// Trim the selector passed to compile\r\n\t\t\t// to avoid treating leading and trailing\r\n\t\t\t// spaces as combinators\r\n\t\t\tvar input = [],\r\n\t\t\t\tresults = [],\r\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\r\n\r\n\t\t\treturn matcher[ expando ] ?\r\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\r\n\t\t\t\t\tvar elem,\r\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\r\n\t\t\t\t\t\ti = seed.length;\r\n\r\n\t\t\t\t\t// Match elements unmatched by `matcher`\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\r\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}) :\r\n\t\t\t\tfunction( elem, context, xml ) {\r\n\t\t\t\t\tinput[0] = elem;\r\n\t\t\t\t\tmatcher( input, null, xml, results );\r\n\t\t\t\t\treturn !results.pop();\r\n\t\t\t\t};\r\n\t\t}),\r\n\r\n\t\t\"has\": markFunction(function( selector ) {\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\r\n\t\t\t};\r\n\t\t}),\r\n\r\n\t\t\"contains\": markFunction(function( text ) {\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\r\n\t\t\t};\r\n\t\t}),\r\n\r\n\t\t// \"Whether an element is represented by a :lang() selector\r\n\t\t// is based solely on the element's language value\r\n\t\t// being equal to the identifier C,\r\n\t\t// or beginning with the identifier C immediately followed by \"-\".\r\n\t\t// The matching of C against the element's language value is performed case-insensitively.\r\n\t\t// The identifier C does not have to be a valid language name.\"\r\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\r\n\t\t\"lang\": markFunction( function( lang ) {\r\n\t\t\t// lang value must be a valid identifier\r\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\r\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\r\n\t\t\t}\r\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar elemLang;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\r\n\t\t\t\t\t\telem.lang :\r\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\r\n\r\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\r\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\r\n\t\t\t\treturn false;\r\n\t\t\t};\r\n\t\t}),\r\n\r\n\t\t// Miscellaneous\r\n\t\t\"target\": function( elem ) {\r\n\t\t\tvar hash = window.location && window.location.hash;\r\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\r\n\t\t},\r\n\r\n\t\t\"root\": function( elem ) {\r\n\t\t\treturn elem === docElem;\r\n\t\t},\r\n\r\n\t\t\"focus\": function( elem ) {\r\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\r\n\t\t},\r\n\r\n\t\t// Boolean properties\r\n\t\t\"enabled\": function( elem ) {\r\n\t\t\treturn elem.disabled === false;\r\n\t\t},\r\n\r\n\t\t\"disabled\": function( elem ) {\r\n\t\t\treturn elem.disabled === true;\r\n\t\t},\r\n\r\n\t\t\"checked\": function( elem ) {\r\n\t\t\t// In CSS3, :checked should return both checked and selected elements\r\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\r\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\r\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\r\n\t\t},\r\n\r\n\t\t\"selected\": function( elem ) {\r\n\t\t\t// Accessing this property makes selected-by-default\r\n\t\t\t// options in Safari work properly\r\n\t\t\tif ( elem.parentNode ) {\r\n\t\t\t\telem.parentNode.selectedIndex;\r\n\t\t\t}\r\n\r\n\t\t\treturn elem.selected === true;\r\n\t\t},\r\n\r\n\t\t// Contents\r\n\t\t\"empty\": function( elem ) {\r\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\r\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\r\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\r\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\r\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\r\n\t\t\t\tif ( elem.nodeType < 6 ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t\"parent\": function( elem ) {\r\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\r\n\t\t},\r\n\r\n\t\t// Element/input types\r\n\t\t\"header\": function( elem ) {\r\n\t\t\treturn rheader.test( elem.nodeName );\r\n\t\t},\r\n\r\n\t\t\"input\": function( elem ) {\r\n\t\t\treturn rinputs.test( elem.nodeName );\r\n\t\t},\r\n\r\n\t\t\"button\": function( elem ) {\r\n\t\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\r\n\t\t},\r\n\r\n\t\t\"text\": function( elem ) {\r\n\t\t\tvar attr;\r\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\r\n\t\t\t\telem.type === \"text\" &&\r\n\r\n\t\t\t\t// Support: IE<8\r\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\r\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\r\n\t\t},\r\n\r\n\t\t// Position-in-collection\r\n\t\t\"first\": createPositionalPseudo(function() {\r\n\t\t\treturn [ 0 ];\r\n\t\t}),\r\n\r\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\r\n\t\t\treturn [ length - 1 ];\r\n\t\t}),\r\n\r\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\r\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\r\n\t\t}),\r\n\r\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\r\n\t\t\tvar i = 0;\r\n\t\t\tfor ( ; i < length; i += 2 ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t}),\r\n\r\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\r\n\t\t\tvar i = 1;\r\n\t\t\tfor ( ; i < length; i += 2 ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t}),\r\n\r\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\r\n\t\t\tvar i = argument < 0 ? argument + length : argument;\r\n\t\t\tfor ( ; --i >= 0; ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t}),\r\n\r\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\r\n\t\t\tvar i = argument < 0 ? argument + length : argument;\r\n\t\t\tfor ( ; ++i < length; ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t})\r\n\t}\r\n};\r\n\r\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\r\n\r\n// Add button/input type pseudos\r\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\r\n\tExpr.pseudos[ i ] = createInputPseudo( i );\r\n}\r\nfor ( i in { submit: true, reset: true } ) {\r\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\r\n}\r\n\r\n// Easy API for creating new setFilters\r\nfunction setFilters() {}\r\nsetFilters.prototype = Expr.filters = Expr.pseudos;\r\nExpr.setFilters = new setFilters();\r\n\r\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\r\n\tvar matched, match, tokens, type,\r\n\t\tsoFar, groups, preFilters,\r\n\t\tcached = tokenCache[ selector + \" \" ];\r\n\r\n\tif ( cached ) {\r\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\r\n\t}\r\n\r\n\tsoFar = selector;\r\n\tgroups = [];\r\n\tpreFilters = Expr.preFilter;\r\n\r\n\twhile ( soFar ) {\r\n\r\n\t\t// Comma and first run\r\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\r\n\t\t\tif ( match ) {\r\n\t\t\t\t// Don't consume trailing commas as valid\r\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\r\n\t\t\t}\r\n\t\t\tgroups.push( (tokens = []) );\r\n\t\t}\r\n\r\n\t\tmatched = false;\r\n\r\n\t\t// Combinators\r\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\r\n\t\t\tmatched = match.shift();\r\n\t\t\ttokens.push({\r\n\t\t\t\tvalue: matched,\r\n\t\t\t\t// Cast descendant combinators to space\r\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\r\n\t\t\t});\r\n\t\t\tsoFar = soFar.slice( matched.length );\r\n\t\t}\r\n\r\n\t\t// Filters\r\n\t\tfor ( type in Expr.filter ) {\r\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\r\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\r\n\t\t\t\tmatched = match.shift();\r\n\t\t\t\ttokens.push({\r\n\t\t\t\t\tvalue: matched,\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tmatches: match\r\n\t\t\t\t});\r\n\t\t\t\tsoFar = soFar.slice( matched.length );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( !matched ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the length of the invalid excess\r\n\t// if we're just parsing\r\n\t// Otherwise, throw an error or return tokens\r\n\treturn parseOnly ?\r\n\t\tsoFar.length :\r\n\t\tsoFar ?\r\n\t\t\tSizzle.error( selector ) :\r\n\t\t\t// Cache the tokens\r\n\t\t\ttokenCache( selector, groups ).slice( 0 );\r\n};\r\n\r\nfunction toSelector( tokens ) {\r\n\tvar i = 0,\r\n\t\tlen = tokens.length,\r\n\t\tselector = \"\";\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tselector += tokens[i].value;\r\n\t}\r\n\treturn selector;\r\n}\r\n\r\nfunction addCombinator( matcher, combinator, base ) {\r\n\tvar dir = combinator.dir,\r\n\t\tcheckNonElements = base && dir === \"parentNode\",\r\n\t\tdoneName = done++;\r\n\r\n\treturn combinator.first ?\r\n\t\t// Check against closest ancestor/preceding element\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\twhile ( (elem = elem[ dir ]) ) {\r\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\treturn matcher( elem, context, xml );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} :\r\n\r\n\t\t// Check against all ancestor/preceding elements\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\tvar oldCache, outerCache,\r\n\t\t\t\tnewCache = [ dirruns, doneName ];\r\n\r\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\r\n\t\t\tif ( xml ) {\r\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\r\n\t\t\t\t\t\tif ( (oldCache = outerCache[ dir ]) &&\r\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\r\n\r\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\r\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\r\n\t\t\t\t\t\t\touterCache[ dir ] = newCache;\r\n\r\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\r\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n}\r\n\r\nfunction elementMatcher( matchers ) {\r\n\treturn matchers.length > 1 ?\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\tvar i = matchers.length;\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} :\r\n\t\tmatchers[0];\r\n}\r\n\r\nfunction multipleContexts( selector, contexts, results ) {\r\n\tvar i = 0,\r\n\t\tlen = contexts.length;\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tSizzle( selector, contexts[i], results );\r\n\t}\r\n\treturn results;\r\n}\r\n\r\nfunction condense( unmatched, map, filter, context, xml ) {\r\n\tvar elem,\r\n\t\tnewUnmatched = [],\r\n\t\ti = 0,\r\n\t\tlen = unmatched.length,\r\n\t\tmapped = map != null;\r\n\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tif ( (elem = unmatched[i]) ) {\r\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\r\n\t\t\t\tnewUnmatched.push( elem );\r\n\t\t\t\tif ( mapped ) {\r\n\t\t\t\t\tmap.push( i );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn newUnmatched;\r\n}\r\n\r\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\r\n\tif ( postFilter && !postFilter[ expando ] ) {\r\n\t\tpostFilter = setMatcher( postFilter );\r\n\t}\r\n\tif ( postFinder && !postFinder[ expando ] ) {\r\n\t\tpostFinder = setMatcher( postFinder, postSelector );\r\n\t}\r\n\treturn markFunction(function( seed, results, context, xml ) {\r\n\t\tvar temp, i, elem,\r\n\t\t\tpreMap = [],\r\n\t\t\tpostMap = [],\r\n\t\t\tpreexisting = results.length,\r\n\r\n\t\t\t// Get initial elements from seed or context\r\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\r\n\r\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\r\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\r\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\r\n\t\t\t\telems,\r\n\r\n\t\t\tmatcherOut = matcher ?\r\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\r\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\r\n\r\n\t\t\t\t\t// ...intermediate processing is necessary\r\n\t\t\t\t\t[] :\r\n\r\n\t\t\t\t\t// ...otherwise use results directly\r\n\t\t\t\t\tresults :\r\n\t\t\t\tmatcherIn;\r\n\r\n\t\t// Find primary matches\r\n\t\tif ( matcher ) {\r\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\r\n\t\t}\r\n\r\n\t\t// Apply postFilter\r\n\t\tif ( postFilter ) {\r\n\t\t\ttemp = condense( matcherOut, postMap );\r\n\t\t\tpostFilter( temp, [], context, xml );\r\n\r\n\t\t\t// Un-match failing elements by moving them back to matcherIn\r\n\t\t\ti = temp.length;\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( (elem = temp[i]) ) {\r\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( seed ) {\r\n\t\t\tif ( postFinder || preFilter ) {\r\n\t\t\t\tif ( postFinder ) {\r\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\r\n\t\t\t\t\ttemp = [];\r\n\t\t\t\t\ti = matcherOut.length;\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\r\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\r\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\r\n\t\t\t\ti = matcherOut.length;\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\r\n\t\t\t\t\t\t(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {\r\n\r\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Add elements to results, through postFinder if defined\r\n\t\t} else {\r\n\t\t\tmatcherOut = condense(\r\n\t\t\t\tmatcherOut === results ?\r\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\r\n\t\t\t\t\tmatcherOut\r\n\t\t\t);\r\n\t\t\tif ( postFinder ) {\r\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\r\n\t\t\t} else {\r\n\t\t\t\tpush.apply( results, matcherOut );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction matcherFromTokens( tokens ) {\r\n\tvar checkContext, matcher, j,\r\n\t\tlen = tokens.length,\r\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\r\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\r\n\t\ti = leadingRelative ? 1 : 0,\r\n\r\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\r\n\t\tmatchContext = addCombinator( function( elem ) {\r\n\t\t\treturn elem === checkContext;\r\n\t\t}, implicitRelative, true ),\r\n\t\tmatchAnyContext = addCombinator( function( elem ) {\r\n\t\t\treturn indexOf.call( checkContext, elem ) > -1;\r\n\t\t}, implicitRelative, true ),\r\n\t\tmatchers = [ function( elem, context, xml ) {\r\n\t\t\treturn ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\r\n\t\t\t\t(checkContext = context).nodeType ?\r\n\t\t\t\t\tmatchContext( elem, context, xml ) :\r\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\r\n\t\t} ];\r\n\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\r\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\r\n\t\t} else {\r\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\r\n\r\n\t\t\t// Return special upon seeing a positional matcher\r\n\t\t\tif ( matcher[ expando ] ) {\r\n\t\t\t\t// Find the next relative operator (if any) for proper handling\r\n\t\t\t\tj = ++i;\r\n\t\t\t\tfor ( ; j < len; j++ ) {\r\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn setMatcher(\r\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\r\n\t\t\t\t\ti > 1 && toSelector(\r\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\r\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\r\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\r\n\t\t\t\t\tmatcher,\r\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\r\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\r\n\t\t\t\t\tj < len && toSelector( tokens )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tmatchers.push( matcher );\r\n\t\t}\r\n\t}\r\n\r\n\treturn elementMatcher( matchers );\r\n}\r\n\r\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\r\n\tvar bySet = setMatchers.length > 0,\r\n\t\tbyElement = elementMatchers.length > 0,\r\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\r\n\t\t\tvar elem, j, matcher,\r\n\t\t\t\tmatchedCount = 0,\r\n\t\t\t\ti = \"0\",\r\n\t\t\t\tunmatched = seed && [],\r\n\t\t\t\tsetMatched = [],\r\n\t\t\t\tcontextBackup = outermostContext,\r\n\t\t\t\t// We must always have either seed elements or outermost context\r\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\r\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\r\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\r\n\t\t\t\tlen = elems.length;\r\n\r\n\t\t\tif ( outermost ) {\r\n\t\t\t\toutermostContext = context !== document && context;\r\n\t\t\t}\r\n\r\n\t\t\t// Add elements passing elementMatchers directly to results\r\n\t\t\t// Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\r\n\t\t\t// Support: IE<9, Safari\r\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\r\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\r\n\t\t\t\tif ( byElement && elem ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\r\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\r\n\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( outermost ) {\r\n\t\t\t\t\t\tdirruns = dirrunsUnique;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Track unmatched elements for set filters\r\n\t\t\t\tif ( bySet ) {\r\n\t\t\t\t\t// They will have gone through all possible matchers\r\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\r\n\t\t\t\t\t\tmatchedCount--;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Lengthen the array for every element, matched or not\r\n\t\t\t\t\tif ( seed ) {\r\n\t\t\t\t\t\tunmatched.push( elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply set filters to unmatched elements\r\n\t\t\tmatchedCount += i;\r\n\t\t\tif ( bySet && i !== matchedCount ) {\r\n\t\t\t\tj = 0;\r\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\r\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( seed ) {\r\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\r\n\t\t\t\t\tif ( matchedCount > 0 ) {\r\n\t\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\r\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\r\n\t\t\t\t\tsetMatched = condense( setMatched );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add matches to results\r\n\t\t\t\tpush.apply( results, setMatched );\r\n\r\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\r\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\r\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\r\n\r\n\t\t\t\t\tSizzle.uniqueSort( results );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Override manipulation of globals by nested matchers\r\n\t\t\tif ( outermost ) {\r\n\t\t\t\tdirruns = dirrunsUnique;\r\n\t\t\t\toutermostContext = contextBackup;\r\n\t\t\t}\r\n\r\n\t\t\treturn unmatched;\r\n\t\t};\r\n\r\n\treturn bySet ?\r\n\t\tmarkFunction( superMatcher ) :\r\n\t\tsuperMatcher;\r\n}\r\n\r\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\r\n\tvar i,\r\n\t\tsetMatchers = [],\r\n\t\telementMatchers = [],\r\n\t\tcached = compilerCache[ selector + \" \" ];\r\n\r\n\tif ( !cached ) {\r\n\t\t// Generate a function of recursive functions that can be used to check each element\r\n\t\tif ( !match ) {\r\n\t\t\tmatch = tokenize( selector );\r\n\t\t}\r\n\t\ti = match.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\tcached = matcherFromTokens( match[i] );\r\n\t\t\tif ( cached[ expando ] ) {\r\n\t\t\t\tsetMatchers.push( cached );\r\n\t\t\t} else {\r\n\t\t\t\telementMatchers.push( cached );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Cache the compiled function\r\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\r\n\r\n\t\t// Save selector and tokenization\r\n\t\tcached.selector = selector;\r\n\t}\r\n\treturn cached;\r\n};\r\n\r\n/**\r\n * A low-level selection function that works with Sizzle's compiled\r\n *  selector functions\r\n * @param {String|Function} selector A selector or a pre-compiled\r\n *  selector function built with Sizzle.compile\r\n * @param {Element} context\r\n * @param {Array} [results]\r\n * @param {Array} [seed] A set of elements to match against\r\n */\r\nselect = Sizzle.select = function( selector, context, results, seed ) {\r\n\tvar i, tokens, token, type, find,\r\n\t\tcompiled = typeof selector === \"function\" && selector,\r\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\r\n\r\n\tresults = results || [];\r\n\r\n\t// Try to minimize operations if there is no seed and only one group\r\n\tif ( match.length === 1 ) {\r\n\r\n\t\t// Take a shortcut and set the context if the root selector is an ID\r\n\t\ttokens = match[0] = match[0].slice( 0 );\r\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\r\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\r\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\r\n\r\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\r\n\t\t\tif ( !context ) {\r\n\t\t\t\treturn results;\r\n\r\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\r\n\t\t\t} else if ( compiled ) {\r\n\t\t\t\tcontext = context.parentNode;\r\n\t\t\t}\r\n\r\n\t\t\tselector = selector.slice( tokens.shift().value.length );\r\n\t\t}\r\n\r\n\t\t// Fetch a seed set for right-to-left matching\r\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\ttoken = tokens[i];\r\n\r\n\t\t\t// Abort if we hit a combinator\r\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif ( (find = Expr.find[ type ]) ) {\r\n\t\t\t\t// Search, expanding context for leading sibling combinators\r\n\t\t\t\tif ( (seed = find(\r\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\r\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\r\n\t\t\t\t)) ) {\r\n\r\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\r\n\t\t\t\t\ttokens.splice( i, 1 );\r\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\r\n\t\t\t\t\tif ( !selector ) {\r\n\t\t\t\t\t\tpush.apply( results, seed );\r\n\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Compile and execute a filtering function if one is not provided\r\n\t// Provide `match` to avoid retokenization if we modified the selector above\r\n\t( compiled || compile( selector, match ) )(\r\n\t\tseed,\r\n\t\tcontext,\r\n\t\t!documentIsHTML,\r\n\t\tresults,\r\n\t\trsibling.test( selector ) && testContext( context.parentNode ) || context\r\n\t);\r\n\treturn results;\r\n};\r\n\r\n// One-time assignments\r\n\r\n// Sort stability\r\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\r\n\r\n// Support: Chrome<14\r\n// Always assume duplicates if they aren't passed to the comparison function\r\nsupport.detectDuplicates = !!hasDuplicate;\r\n\r\n// Initialize against the default document\r\nsetDocument();\r\n\r\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\r\n// Detached nodes confoundingly follow *each other*\r\nsupport.sortDetached = assert(function( div1 ) {\r\n\t// Should return 1, but returns 4 (following)\r\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\r\n});\r\n\r\n// Support: IE<8\r\n// Prevent attribute/property \"interpolation\"\r\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\r\nif ( !assert(function( div ) {\r\n\tdiv.innerHTML = \"<a href='#'></a>\";\r\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\r\n}) ) {\r\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\r\n\t\tif ( !isXML ) {\r\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Support: IE<9\r\n// Use defaultValue in place of getAttribute(\"value\")\r\nif ( !support.attributes || !assert(function( div ) {\r\n\tdiv.innerHTML = \"<input/>\";\r\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\r\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\r\n}) ) {\r\n\taddHandle( \"value\", function( elem, name, isXML ) {\r\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\r\n\t\t\treturn elem.defaultValue;\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Support: IE<9\r\n// Use getAttributeNode to fetch booleans when getAttribute lies\r\nif ( !assert(function( div ) {\r\n\treturn div.getAttribute(\"disabled\") == null;\r\n}) ) {\r\n\taddHandle( booleans, function( elem, name, isXML ) {\r\n\t\tvar val;\r\n\t\tif ( !isXML ) {\r\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\r\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\r\n\t\t\t\t\tval.value :\r\n\t\t\t\tnull;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nreturn Sizzle;\r\n\r\n})( window );\r\n\r\n\r\n\r\njQuery.find = Sizzle;\r\njQuery.expr = Sizzle.selectors;\r\njQuery.expr[\":\"] = jQuery.expr.pseudos;\r\njQuery.unique = Sizzle.uniqueSort;\r\njQuery.text = Sizzle.getText;\r\njQuery.isXMLDoc = Sizzle.isXML;\r\njQuery.contains = Sizzle.contains;\r\n\r\n\r\n\r\nvar rneedsContext = jQuery.expr.match.needsContext;\r\n\r\nvar rsingleTag = (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/);\r\n\r\n\r\n\r\nvar risSimple = /^.[^:#\\[\\.,]*$/;\r\n\r\n// Implement the identical functionality for filter and not\r\nfunction winnow( elements, qualifier, not ) {\r\n\tif ( jQuery.isFunction( qualifier ) ) {\r\n\t\treturn jQuery.grep( elements, function( elem, i ) {\r\n\t\t\t/* jshint -W018 */\r\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tif ( qualifier.nodeType ) {\r\n\t\treturn jQuery.grep( elements, function( elem ) {\r\n\t\t\treturn ( elem === qualifier ) !== not;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tif ( typeof qualifier === \"string\" ) {\r\n\t\tif ( risSimple.test( qualifier ) ) {\r\n\t\t\treturn jQuery.filter( qualifier, elements, not );\r\n\t\t}\r\n\r\n\t\tqualifier = jQuery.filter( qualifier, elements );\r\n\t}\r\n\r\n\treturn jQuery.grep( elements, function( elem ) {\r\n\t\treturn ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;\r\n\t});\r\n}\r\n\r\njQuery.filter = function( expr, elems, not ) {\r\n\tvar elem = elems[ 0 ];\r\n\r\n\tif ( not ) {\r\n\t\texpr = \":not(\" + expr + \")\";\r\n\t}\r\n\r\n\treturn elems.length === 1 && elem.nodeType === 1 ?\r\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\r\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\r\n\t\t\treturn elem.nodeType === 1;\r\n\t\t}));\r\n};\r\n\r\njQuery.fn.extend({\r\n\tfind: function( selector ) {\r\n\t\tvar i,\r\n\t\t\tret = [],\r\n\t\t\tself = this,\r\n\t\t\tlen = self.length;\r\n\r\n\t\tif ( typeof selector !== \"string\" ) {\r\n\t\t\treturn this.pushStack( jQuery( selector ).filter(function() {\r\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\r\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}) );\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < len; i++ ) {\r\n\t\t\tjQuery.find( selector, self[ i ], ret );\r\n\t\t}\r\n\r\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\r\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\r\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\r\n\t\treturn ret;\r\n\t},\r\n\tfilter: function( selector ) {\r\n\t\treturn this.pushStack( winnow(this, selector || [], false) );\r\n\t},\r\n\tnot: function( selector ) {\r\n\t\treturn this.pushStack( winnow(this, selector || [], true) );\r\n\t},\r\n\tis: function( selector ) {\r\n\t\treturn !!winnow(\r\n\t\t\tthis,\r\n\r\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\r\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\r\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\r\n\t\t\t\tjQuery( selector ) :\r\n\t\t\t\tselector || [],\r\n\t\t\tfalse\r\n\t\t).length;\r\n\t}\r\n});\r\n\r\n\r\n// Initialize a jQuery object\r\n\r\n\r\n// A central reference to the root jQuery(document)\r\nvar rootjQuery,\r\n\r\n\t// Use the correct document accordingly with window argument (sandbox)\r\n\tdocument = window.document,\r\n\r\n\t// A simple way to check for HTML strings\r\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\r\n\t// Strict HTML recognition (#11290: must start with <)\r\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\r\n\r\n\tinit = jQuery.fn.init = function( selector, context ) {\r\n\t\tvar match, elem;\r\n\r\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\r\n\t\tif ( !selector ) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// Handle HTML strings\r\n\t\tif ( typeof selector === \"string\" ) {\r\n\t\t\tif ( selector.charAt(0) === \"<\" && selector.charAt( selector.length - 1 ) === \">\" && selector.length >= 3 ) {\r\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\r\n\t\t\t\tmatch = [ null, selector, null ];\r\n\r\n\t\t\t} else {\r\n\t\t\t\tmatch = rquickExpr.exec( selector );\r\n\t\t\t}\r\n\r\n\t\t\t// Match html or make sure no context is specified for #id\r\n\t\t\tif ( match && (match[1] || !context) ) {\r\n\r\n\t\t\t\t// HANDLE: $(html) -> $(array)\r\n\t\t\t\tif ( match[1] ) {\r\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\r\n\r\n\t\t\t\t\t// scripts is true for back-compat\r\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\r\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\r\n\t\t\t\t\t\tmatch[1],\r\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\r\n\t\t\t\t\t\ttrue\r\n\t\t\t\t\t) );\r\n\r\n\t\t\t\t\t// HANDLE: $(html, props)\r\n\t\t\t\t\tif ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {\r\n\t\t\t\t\t\tfor ( match in context ) {\r\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\r\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\r\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\r\n\r\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t// HANDLE: $(#id)\r\n\t\t\t\t} else {\r\n\t\t\t\t\telem = document.getElementById( match[2] );\r\n\r\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\r\n\t\t\t\t\t// nodes that are no longer in the document #6963\r\n\t\t\t\t\tif ( elem && elem.parentNode ) {\r\n\t\t\t\t\t\t// Handle the case where IE and Opera return items\r\n\t\t\t\t\t\t// by name instead of ID\r\n\t\t\t\t\t\tif ( elem.id !== match[2] ) {\r\n\t\t\t\t\t\t\treturn rootjQuery.find( selector );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Otherwise, we inject the element directly into the jQuery object\r\n\t\t\t\t\t\tthis.length = 1;\r\n\t\t\t\t\t\tthis[0] = elem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.context = document;\r\n\t\t\t\t\tthis.selector = selector;\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\r\n\t\t\t// HANDLE: $(expr, $(...))\r\n\t\t\t} else if ( !context || context.jquery ) {\r\n\t\t\t\treturn ( context || rootjQuery ).find( selector );\r\n\r\n\t\t\t// HANDLE: $(expr, context)\r\n\t\t\t// (which is just equivalent to: $(context).find(expr)\r\n\t\t\t} else {\r\n\t\t\t\treturn this.constructor( context ).find( selector );\r\n\t\t\t}\r\n\r\n\t\t// HANDLE: $(DOMElement)\r\n\t\t} else if ( selector.nodeType ) {\r\n\t\t\tthis.context = this[0] = selector;\r\n\t\t\tthis.length = 1;\r\n\t\t\treturn this;\r\n\r\n\t\t// HANDLE: $(function)\r\n\t\t// Shortcut for document ready\r\n\t\t} else if ( jQuery.isFunction( selector ) ) {\r\n\t\t\treturn typeof rootjQuery.ready !== \"undefined\" ?\r\n\t\t\t\trootjQuery.ready( selector ) :\r\n\t\t\t\t// Execute immediately if ready is not present\r\n\t\t\t\tselector( jQuery );\r\n\t\t}\r\n\r\n\t\tif ( selector.selector !== undefined ) {\r\n\t\t\tthis.selector = selector.selector;\r\n\t\t\tthis.context = selector.context;\r\n\t\t}\r\n\r\n\t\treturn jQuery.makeArray( selector, this );\r\n\t};\r\n\r\n// Give the init function the jQuery prototype for later instantiation\r\ninit.prototype = jQuery.fn;\r\n\r\n// Initialize central reference\r\nrootjQuery = jQuery( document );\r\n\r\n\r\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\r\n\t// methods guaranteed to produce a unique set when starting from a unique set\r\n\tguaranteedUnique = {\r\n\t\tchildren: true,\r\n\t\tcontents: true,\r\n\t\tnext: true,\r\n\t\tprev: true\r\n\t};\r\n\r\njQuery.extend({\r\n\tdir: function( elem, dir, until ) {\r\n\t\tvar matched = [],\r\n\t\t\tcur = elem[ dir ];\r\n\r\n\t\twhile ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {\r\n\t\t\tif ( cur.nodeType === 1 ) {\r\n\t\t\t\tmatched.push( cur );\r\n\t\t\t}\r\n\t\t\tcur = cur[dir];\r\n\t\t}\r\n\t\treturn matched;\r\n\t},\r\n\r\n\tsibling: function( n, elem ) {\r\n\t\tvar r = [];\r\n\r\n\t\tfor ( ; n; n = n.nextSibling ) {\r\n\t\t\tif ( n.nodeType === 1 && n !== elem ) {\r\n\t\t\t\tr.push( n );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\t}\r\n});\r\n\r\njQuery.fn.extend({\r\n\thas: function( target ) {\r\n\t\tvar i,\r\n\t\t\ttargets = jQuery( target, this ),\r\n\t\t\tlen = targets.length;\r\n\r\n\t\treturn this.filter(function() {\r\n\t\t\tfor ( i = 0; i < len; i++ ) {\r\n\t\t\t\tif ( jQuery.contains( this, targets[i] ) ) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tclosest: function( selectors, context ) {\r\n\t\tvar cur,\r\n\t\t\ti = 0,\r\n\t\t\tl = this.length,\r\n\t\t\tmatched = [],\r\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\r\n\t\t\t\tjQuery( selectors, context || this.context ) :\r\n\t\t\t\t0;\r\n\r\n\t\tfor ( ; i < l; i++ ) {\r\n\t\t\tfor ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {\r\n\t\t\t\t// Always skip document fragments\r\n\t\t\t\tif ( cur.nodeType < 11 && (pos ?\r\n\t\t\t\t\tpos.index(cur) > -1 :\r\n\r\n\t\t\t\t\t// Don't pass non-elements to Sizzle\r\n\t\t\t\t\tcur.nodeType === 1 &&\r\n\t\t\t\t\t\tjQuery.find.matchesSelector(cur, selectors)) ) {\r\n\r\n\t\t\t\t\tmatched.push( cur );\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );\r\n\t},\r\n\r\n\t// Determine the position of an element within\r\n\t// the matched set of elements\r\n\tindex: function( elem ) {\r\n\r\n\t\t// No argument, return index in parent\r\n\t\tif ( !elem ) {\r\n\t\t\treturn ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;\r\n\t\t}\r\n\r\n\t\t// index in selector\r\n\t\tif ( typeof elem === \"string\" ) {\r\n\t\t\treturn jQuery.inArray( this[0], jQuery( elem ) );\r\n\t\t}\r\n\r\n\t\t// Locate the position of the desired element\r\n\t\treturn jQuery.inArray(\r\n\t\t\t// If it receives a jQuery object, the first element is used\r\n\t\t\telem.jquery ? elem[0] : elem, this );\r\n\t},\r\n\r\n\tadd: function( selector, context ) {\r\n\t\treturn this.pushStack(\r\n\t\t\tjQuery.unique(\r\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\r\n\t\t\t)\r\n\t\t);\r\n\t},\r\n\r\n\taddBack: function( selector ) {\r\n\t\treturn this.add( selector == null ?\r\n\t\t\tthis.prevObject : this.prevObject.filter(selector)\r\n\t\t);\r\n\t}\r\n});\r\n\r\nfunction sibling( cur, dir ) {\r\n\tdo {\r\n\t\tcur = cur[ dir ];\r\n\t} while ( cur && cur.nodeType !== 1 );\r\n\r\n\treturn cur;\r\n}\r\n\r\njQuery.each({\r\n\tparent: function( elem ) {\r\n\t\tvar parent = elem.parentNode;\r\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\r\n\t},\r\n\tparents: function( elem ) {\r\n\t\treturn jQuery.dir( elem, \"parentNode\" );\r\n\t},\r\n\tparentsUntil: function( elem, i, until ) {\r\n\t\treturn jQuery.dir( elem, \"parentNode\", until );\r\n\t},\r\n\tnext: function( elem ) {\r\n\t\treturn sibling( elem, \"nextSibling\" );\r\n\t},\r\n\tprev: function( elem ) {\r\n\t\treturn sibling( elem, \"previousSibling\" );\r\n\t},\r\n\tnextAll: function( elem ) {\r\n\t\treturn jQuery.dir( elem, \"nextSibling\" );\r\n\t},\r\n\tprevAll: function( elem ) {\r\n\t\treturn jQuery.dir( elem, \"previousSibling\" );\r\n\t},\r\n\tnextUntil: function( elem, i, until ) {\r\n\t\treturn jQuery.dir( elem, \"nextSibling\", until );\r\n\t},\r\n\tprevUntil: function( elem, i, until ) {\r\n\t\treturn jQuery.dir( elem, \"previousSibling\", until );\r\n\t},\r\n\tsiblings: function( elem ) {\r\n\t\treturn jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );\r\n\t},\r\n\tchildren: function( elem ) {\r\n\t\treturn jQuery.sibling( elem.firstChild );\r\n\t},\r\n\tcontents: function( elem ) {\r\n\t\treturn jQuery.nodeName( elem, \"iframe\" ) ?\r\n\t\t\telem.contentDocument || elem.contentWindow.document :\r\n\t\t\tjQuery.merge( [], elem.childNodes );\r\n\t}\r\n}, function( name, fn ) {\r\n\tjQuery.fn[ name ] = function( until, selector ) {\r\n\t\tvar ret = jQuery.map( this, fn, until );\r\n\r\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\r\n\t\t\tselector = until;\r\n\t\t}\r\n\r\n\t\tif ( selector && typeof selector === \"string\" ) {\r\n\t\t\tret = jQuery.filter( selector, ret );\r\n\t\t}\r\n\r\n\t\tif ( this.length > 1 ) {\r\n\t\t\t// Remove duplicates\r\n\t\t\tif ( !guaranteedUnique[ name ] ) {\r\n\t\t\t\tret = jQuery.unique( ret );\r\n\t\t\t}\r\n\r\n\t\t\t// Reverse order for parents* and prev-derivatives\r\n\t\t\tif ( rparentsprev.test( name ) ) {\r\n\t\t\t\tret = ret.reverse();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( ret );\r\n\t};\r\n});\r\nvar rnotwhite = (/\\S+/g);\r\n\r\n\r\n\r\n// String to Object options format cache\r\nvar optionsCache = {};\r\n\r\n// Convert String-formatted options into Object-formatted ones and store in cache\r\nfunction createOptions( options ) {\r\n\tvar object = optionsCache[ options ] = {};\r\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\r\n\t\tobject[ flag ] = true;\r\n\t});\r\n\treturn object;\r\n}\r\n\r\n/*\r\n * Create a callback list using the following parameters:\r\n *\r\n *\toptions: an optional list of space-separated options that will change how\r\n *\t\t\tthe callback list behaves or a more traditional option object\r\n *\r\n * By default a callback list will act like an event callback list and can be\r\n * \"fired\" multiple times.\r\n *\r\n * Possible options:\r\n *\r\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\r\n *\r\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\r\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\r\n *\t\t\t\t\tvalues (like a Deferred)\r\n *\r\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\r\n *\r\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\r\n *\r\n */\r\njQuery.Callbacks = function( options ) {\r\n\r\n\t// Convert options from String-formatted to Object-formatted if needed\r\n\t// (we check in cache first)\r\n\toptions = typeof options === \"string\" ?\r\n\t\t( optionsCache[ options ] || createOptions( options ) ) :\r\n\t\tjQuery.extend( {}, options );\r\n\r\n\tvar // Flag to know if list is currently firing\r\n\t\tfiring,\r\n\t\t// Last fire value (for non-forgettable lists)\r\n\t\tmemory,\r\n\t\t// Flag to know if list was already fired\r\n\t\tfired,\r\n\t\t// End of the loop when firing\r\n\t\tfiringLength,\r\n\t\t// Index of currently firing callback (modified by remove if needed)\r\n\t\tfiringIndex,\r\n\t\t// First callback to fire (used internally by add and fireWith)\r\n\t\tfiringStart,\r\n\t\t// Actual callback list\r\n\t\tlist = [],\r\n\t\t// Stack of fire calls for repeatable lists\r\n\t\tstack = !options.once && [],\r\n\t\t// Fire callbacks\r\n\t\tfire = function( data ) {\r\n\t\t\tmemory = options.memory && data;\r\n\t\t\tfired = true;\r\n\t\t\tfiringIndex = firingStart || 0;\r\n\t\t\tfiringStart = 0;\r\n\t\t\tfiringLength = list.length;\r\n\t\t\tfiring = true;\r\n\t\t\tfor ( ; list && firingIndex < firingLength; firingIndex++ ) {\r\n\t\t\t\tif ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {\r\n\t\t\t\t\tmemory = false; // To prevent further calls using add\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfiring = false;\r\n\t\t\tif ( list ) {\r\n\t\t\t\tif ( stack ) {\r\n\t\t\t\t\tif ( stack.length ) {\r\n\t\t\t\t\t\tfire( stack.shift() );\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ( memory ) {\r\n\t\t\t\t\tlist = [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.disable();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t// Actual Callbacks object\r\n\t\tself = {\r\n\t\t\t// Add a callback or a collection of callbacks to the list\r\n\t\t\tadd: function() {\r\n\t\t\t\tif ( list ) {\r\n\t\t\t\t\t// First, we save the current length\r\n\t\t\t\t\tvar start = list.length;\r\n\t\t\t\t\t(function add( args ) {\r\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\r\n\t\t\t\t\t\t\tvar type = jQuery.type( arg );\r\n\t\t\t\t\t\t\tif ( type === \"function\" ) {\r\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\r\n\t\t\t\t\t\t\t\t\tlist.push( arg );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if ( arg && arg.length && type !== \"string\" ) {\r\n\t\t\t\t\t\t\t\t// Inspect recursively\r\n\t\t\t\t\t\t\t\tadd( arg );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})( arguments );\r\n\t\t\t\t\t// Do we need to add the callbacks to the\r\n\t\t\t\t\t// current firing batch?\r\n\t\t\t\t\tif ( firing ) {\r\n\t\t\t\t\t\tfiringLength = list.length;\r\n\t\t\t\t\t// With memory, if we're not firing then\r\n\t\t\t\t\t// we should call right away\r\n\t\t\t\t\t} else if ( memory ) {\r\n\t\t\t\t\t\tfiringStart = start;\r\n\t\t\t\t\t\tfire( memory );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\t// Remove a callback from the list\r\n\t\t\tremove: function() {\r\n\t\t\t\tif ( list ) {\r\n\t\t\t\t\tjQuery.each( arguments, function( _, arg ) {\r\n\t\t\t\t\t\tvar index;\r\n\t\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\r\n\t\t\t\t\t\t\tlist.splice( index, 1 );\r\n\t\t\t\t\t\t\t// Handle firing indexes\r\n\t\t\t\t\t\t\tif ( firing ) {\r\n\t\t\t\t\t\t\t\tif ( index <= firingLength ) {\r\n\t\t\t\t\t\t\t\t\tfiringLength--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif ( index <= firingIndex ) {\r\n\t\t\t\t\t\t\t\t\tfiringIndex--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\t// Check if a given callback is in the list.\r\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\r\n\t\t\thas: function( fn ) {\r\n\t\t\t\treturn fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );\r\n\t\t\t},\r\n\t\t\t// Remove all callbacks from the list\r\n\t\t\tempty: function() {\r\n\t\t\t\tlist = [];\r\n\t\t\t\tfiringLength = 0;\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\t// Have the list do nothing anymore\r\n\t\t\tdisable: function() {\r\n\t\t\t\tlist = stack = memory = undefined;\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\t// Is it disabled?\r\n\t\t\tdisabled: function() {\r\n\t\t\t\treturn !list;\r\n\t\t\t},\r\n\t\t\t// Lock the list in its current state\r\n\t\t\tlock: function() {\r\n\t\t\t\tstack = undefined;\r\n\t\t\t\tif ( !memory ) {\r\n\t\t\t\t\tself.disable();\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\t// Is it locked?\r\n\t\t\tlocked: function() {\r\n\t\t\t\treturn !stack;\r\n\t\t\t},\r\n\t\t\t// Call all callbacks with the given context and arguments\r\n\t\t\tfireWith: function( context, args ) {\r\n\t\t\t\tif ( list && ( !fired || stack ) ) {\r\n\t\t\t\t\targs = args || [];\r\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\r\n\t\t\t\t\tif ( firing ) {\r\n\t\t\t\t\t\tstack.push( args );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfire( args );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\t// Call all the callbacks with the given arguments\r\n\t\t\tfire: function() {\r\n\t\t\t\tself.fireWith( this, arguments );\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\t// To know if the callbacks have already been called at least once\r\n\t\t\tfired: function() {\r\n\t\t\t\treturn !!fired;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\treturn self;\r\n};\r\n\r\n\r\njQuery.extend({\r\n\r\n\tDeferred: function( func ) {\r\n\t\tvar tuples = [\r\n\t\t\t\t// action, add listener, listener list, final state\r\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\" ],\r\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\" ],\r\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks(\"memory\") ]\r\n\t\t\t],\r\n\t\t\tstate = \"pending\",\r\n\t\t\tpromise = {\r\n\t\t\t\tstate: function() {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t},\r\n\t\t\t\talways: function() {\r\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\r\n\t\t\t\t\tvar fns = arguments;\r\n\t\t\t\t\treturn jQuery.Deferred(function( newDefer ) {\r\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\r\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\r\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\r\n\t\t\t\t\t\t\tdeferred[ tuple[1] ](function() {\r\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\r\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\r\n\t\t\t\t\t\t\t\t\treturned.promise()\r\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\r\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject )\r\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify );\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tfns = null;\r\n\t\t\t\t\t}).promise();\r\n\t\t\t\t},\r\n\t\t\t\t// Get a promise for this deferred\r\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\r\n\t\t\t\tpromise: function( obj ) {\r\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdeferred = {};\r\n\r\n\t\t// Keep pipe for back-compat\r\n\t\tpromise.pipe = promise.then;\r\n\r\n\t\t// Add list-specific methods\r\n\t\tjQuery.each( tuples, function( i, tuple ) {\r\n\t\t\tvar list = tuple[ 2 ],\r\n\t\t\t\tstateString = tuple[ 3 ];\r\n\r\n\t\t\t// promise[ done | fail | progress ] = list.add\r\n\t\t\tpromise[ tuple[1] ] = list.add;\r\n\r\n\t\t\t// Handle state\r\n\t\t\tif ( stateString ) {\r\n\t\t\t\tlist.add(function() {\r\n\t\t\t\t\t// state = [ resolved | rejected ]\r\n\t\t\t\t\tstate = stateString;\r\n\r\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\r\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\r\n\t\t\t}\r\n\r\n\t\t\t// deferred[ resolve | reject | notify ]\r\n\t\t\tdeferred[ tuple[0] ] = function() {\r\n\t\t\t\tdeferred[ tuple[0] + \"With\" ]( this === deferred ? promise : this, arguments );\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\t\t\tdeferred[ tuple[0] + \"With\" ] = list.fireWith;\r\n\t\t});\r\n\r\n\t\t// Make the deferred a promise\r\n\t\tpromise.promise( deferred );\r\n\r\n\t\t// Call given func if any\r\n\t\tif ( func ) {\r\n\t\t\tfunc.call( deferred, deferred );\r\n\t\t}\r\n\r\n\t\t// All done!\r\n\t\treturn deferred;\r\n\t},\r\n\r\n\t// Deferred helper\r\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\r\n\t\tvar i = 0,\r\n\t\t\tresolveValues = slice.call( arguments ),\r\n\t\t\tlength = resolveValues.length,\r\n\r\n\t\t\t// the count of uncompleted subordinates\r\n\t\t\tremaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\r\n\r\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\r\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\r\n\r\n\t\t\t// Update function for both resolve and progress values\r\n\t\t\tupdateFunc = function( i, contexts, values ) {\r\n\t\t\t\treturn function( value ) {\r\n\t\t\t\t\tcontexts[ i ] = this;\r\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\r\n\t\t\t\t\tif ( values === progressValues ) {\r\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\r\n\r\n\t\t\t\t\t} else if ( !(--remaining) ) {\r\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\tprogressValues, progressContexts, resolveContexts;\r\n\r\n\t\t// add listeners to Deferred subordinates; treat others as resolved\r\n\t\tif ( length > 1 ) {\r\n\t\t\tprogressValues = new Array( length );\r\n\t\t\tprogressContexts = new Array( length );\r\n\t\t\tresolveContexts = new Array( length );\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\r\n\t\t\t\t\tresolveValues[ i ].promise()\r\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\r\n\t\t\t\t\t\t.fail( deferred.reject )\r\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t--remaining;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if we're not waiting on anything, resolve the master\r\n\t\tif ( !remaining ) {\r\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\r\n\t\t}\r\n\r\n\t\treturn deferred.promise();\r\n\t}\r\n});\r\n\r\n\r\n// The deferred used on DOM ready\r\nvar readyList;\r\n\r\njQuery.fn.ready = function( fn ) {\r\n\t// Add the callback\r\n\tjQuery.ready.promise().done( fn );\r\n\r\n\treturn this;\r\n};\r\n\r\njQuery.extend({\r\n\t// Is the DOM ready to be used? Set to true once it occurs.\r\n\tisReady: false,\r\n\r\n\t// A counter to track how many items to wait for before\r\n\t// the ready event fires. See #6781\r\n\treadyWait: 1,\r\n\r\n\t// Hold (or release) the ready event\r\n\tholdReady: function( hold ) {\r\n\t\tif ( hold ) {\r\n\t\t\tjQuery.readyWait++;\r\n\t\t} else {\r\n\t\t\tjQuery.ready( true );\r\n\t\t}\r\n\t},\r\n\r\n\t// Handle when the DOM is ready\r\n\tready: function( wait ) {\r\n\r\n\t\t// Abort if there are pending holds or we're already ready\r\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\r\n\t\tif ( !document.body ) {\r\n\t\t\treturn setTimeout( jQuery.ready );\r\n\t\t}\r\n\r\n\t\t// Remember that the DOM is ready\r\n\t\tjQuery.isReady = true;\r\n\r\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\r\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If there are functions bound, to execute\r\n\t\treadyList.resolveWith( document, [ jQuery ] );\r\n\r\n\t\t// Trigger any bound ready events\r\n\t\tif ( jQuery.fn.triggerHandler ) {\r\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\r\n\t\t\tjQuery( document ).off( \"ready\" );\r\n\t\t}\r\n\t}\r\n});\r\n\r\n/**\r\n * Clean-up method for dom ready events\r\n */\r\nfunction detach() {\r\n\tif ( document.addEventListener ) {\r\n\t\tdocument.removeEventListener( \"DOMContentLoaded\", completed, false );\r\n\t\twindow.removeEventListener( \"load\", completed, false );\r\n\r\n\t} else {\r\n\t\tdocument.detachEvent( \"onreadystatechange\", completed );\r\n\t\twindow.detachEvent( \"onload\", completed );\r\n\t}\r\n}\r\n\r\n/**\r\n * The ready event handler and self cleanup method\r\n */\r\nfunction completed() {\r\n\t// readyState === \"complete\" is good enough for us to call the dom ready in oldIE\r\n\tif ( document.addEventListener || event.type === \"load\" || document.readyState === \"complete\" ) {\r\n\t\tdetach();\r\n\t\tjQuery.ready();\r\n\t}\r\n}\r\n\r\njQuery.ready.promise = function( obj ) {\r\n\tif ( !readyList ) {\r\n\r\n\t\treadyList = jQuery.Deferred();\r\n\r\n\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\r\n\t\t// we once tried to use readyState \"interactive\" here, but it caused issues like the one\r\n\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\r\n\t\tif ( document.readyState === \"complete\" ) {\r\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\r\n\t\t\tsetTimeout( jQuery.ready );\r\n\r\n\t\t// Standards-based browsers support DOMContentLoaded\r\n\t\t} else if ( document.addEventListener ) {\r\n\t\t\t// Use the handy event callback\r\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed, false );\r\n\r\n\t\t\t// A fallback to window.onload, that will always work\r\n\t\t\twindow.addEventListener( \"load\", completed, false );\r\n\r\n\t\t// If IE event model is used\r\n\t\t} else {\r\n\t\t\t// Ensure firing before onload, maybe late but safe also for iframes\r\n\t\t\tdocument.attachEvent( \"onreadystatechange\", completed );\r\n\r\n\t\t\t// A fallback to window.onload, that will always work\r\n\t\t\twindow.attachEvent( \"onload\", completed );\r\n\r\n\t\t\t// If IE and not a frame\r\n\t\t\t// continually check to see if the document is ready\r\n\t\t\tvar top = false;\r\n\r\n\t\t\ttry {\r\n\t\t\t\ttop = window.frameElement == null && document.documentElement;\r\n\t\t\t} catch(e) {}\r\n\r\n\t\t\tif ( top && top.doScroll ) {\r\n\t\t\t\t(function doScrollCheck() {\r\n\t\t\t\t\tif ( !jQuery.isReady ) {\r\n\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t// Use the trick by Diego Perini\r\n\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\r\n\t\t\t\t\t\t\ttop.doScroll(\"left\");\r\n\t\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\t\treturn setTimeout( doScrollCheck, 50 );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// detach all dom ready events\r\n\t\t\t\t\t\tdetach();\r\n\r\n\t\t\t\t\t\t// and execute any waiting functions\r\n\t\t\t\t\t\tjQuery.ready();\r\n\t\t\t\t\t}\r\n\t\t\t\t})();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn readyList.promise( obj );\r\n};\r\n\r\n\r\nvar strundefined = typeof undefined;\r\n\r\n\r\n\r\n// Support: IE<9\r\n// Iteration over object's inherited properties before its own\r\nvar i;\r\nfor ( i in jQuery( support ) ) {\r\n\tbreak;\r\n}\r\nsupport.ownLast = i !== \"0\";\r\n\r\n// Note: most support tests are defined in their respective modules.\r\n// false until the test is run\r\nsupport.inlineBlockNeedsLayout = false;\r\n\r\n// Execute ASAP in case we need to set body.style.zoom\r\njQuery(function() {\r\n\t// Minified: var a,b,c,d\r\n\tvar val, div, body, container;\r\n\r\n\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\r\n\tif ( !body || !body.style ) {\r\n\t\t// Return for frameset docs that don't have a body\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Setup\r\n\tdiv = document.createElement( \"div\" );\r\n\tcontainer = document.createElement( \"div\" );\r\n\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\r\n\tbody.appendChild( container ).appendChild( div );\r\n\r\n\tif ( typeof div.style.zoom !== strundefined ) {\r\n\t\t// Support: IE<8\r\n\t\t// Check if natively block-level elements act like inline-block\r\n\t\t// elements when setting their display to 'inline' and giving\r\n\t\t// them layout\r\n\t\tdiv.style.cssText = \"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\";\r\n\r\n\t\tsupport.inlineBlockNeedsLayout = val = div.offsetWidth === 3;\r\n\t\tif ( val ) {\r\n\t\t\t// Prevent IE 6 from affecting layout for positioned elements #11048\r\n\t\t\t// Prevent IE from shrinking the body in IE 7 mode #12869\r\n\t\t\t// Support: IE<8\r\n\t\t\tbody.style.zoom = 1;\r\n\t\t}\r\n\t}\r\n\r\n\tbody.removeChild( container );\r\n});\r\n\r\n\r\n\r\n\r\n(function() {\r\n\tvar div = document.createElement( \"div\" );\r\n\r\n\t// Execute the test only if not already executed in another module.\r\n\tif (support.deleteExpando == null) {\r\n\t\t// Support: IE<9\r\n\t\tsupport.deleteExpando = true;\r\n\t\ttry {\r\n\t\t\tdelete div.test;\r\n\t\t} catch( e ) {\r\n\t\t\tsupport.deleteExpando = false;\r\n\t\t}\r\n\t}\r\n\r\n\t// Null elements to avoid leaks in IE.\r\n\tdiv = null;\r\n})();\r\n\r\n\r\n/**\r\n * Determines whether an object can have data\r\n */\r\njQuery.acceptData = function( elem ) {\r\n\tvar noData = jQuery.noData[ (elem.nodeName + \" \").toLowerCase() ],\r\n\t\tnodeType = +elem.nodeType || 1;\r\n\r\n\t// Do not set data on non-element DOM nodes because it will not be cleared (#8335).\r\n\treturn nodeType !== 1 && nodeType !== 9 ?\r\n\t\tfalse :\r\n\r\n\t\t// Nodes accept data unless otherwise specified; rejection can be conditional\r\n\t\t!noData || noData !== true && elem.getAttribute(\"classid\") === noData;\r\n};\r\n\r\n\r\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\r\n\trmultiDash = /([A-Z])/g;\r\n\r\nfunction dataAttr( elem, key, data ) {\r\n\t// If nothing was found internally, try to fetch any\r\n\t// data from the HTML5 data-* attribute\r\n\tif ( data === undefined && elem.nodeType === 1 ) {\r\n\r\n\t\tvar name = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();\r\n\r\n\t\tdata = elem.getAttribute( name );\r\n\r\n\t\tif ( typeof data === \"string\" ) {\r\n\t\t\ttry {\r\n\t\t\t\tdata = data === \"true\" ? true :\r\n\t\t\t\t\tdata === \"false\" ? false :\r\n\t\t\t\t\tdata === \"null\" ? null :\r\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\r\n\t\t\t\t\t+data + \"\" === data ? +data :\r\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\r\n\t\t\t\t\tdata;\r\n\t\t\t} catch( e ) {}\r\n\r\n\t\t\t// Make sure we set the data so it isn't changed later\r\n\t\t\tjQuery.data( elem, key, data );\r\n\r\n\t\t} else {\r\n\t\t\tdata = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\treturn data;\r\n}\r\n\r\n// checks a cache object for emptiness\r\nfunction isEmptyDataObject( obj ) {\r\n\tvar name;\r\n\tfor ( name in obj ) {\r\n\r\n\t\t// if the public data object is empty, the private is still empty\r\n\t\tif ( name === \"data\" && jQuery.isEmptyObject( obj[name] ) ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif ( name !== \"toJSON\" ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nfunction internalData( elem, name, data, pvt /* Internal Use Only */ ) {\r\n\tif ( !jQuery.acceptData( elem ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar ret, thisCache,\r\n\t\tinternalKey = jQuery.expando,\r\n\r\n\t\t// We have to handle DOM nodes and JS objects differently because IE6-7\r\n\t\t// can't GC object references properly across the DOM-JS boundary\r\n\t\tisNode = elem.nodeType,\r\n\r\n\t\t// Only DOM nodes need the global jQuery cache; JS object data is\r\n\t\t// attached directly to the object so GC can occur automatically\r\n\t\tcache = isNode ? jQuery.cache : elem,\r\n\r\n\t\t// Only defining an ID for JS objects if its cache already exists allows\r\n\t\t// the code to shortcut on the same path as a DOM node with no cache\r\n\t\tid = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;\r\n\r\n\t// Avoid doing any more work than we need to when trying to get data on an\r\n\t// object that has no data at all\r\n\tif ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === \"string\" ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( !id ) {\r\n\t\t// Only DOM nodes need a new unique ID for each element since their data\r\n\t\t// ends up in the global cache\r\n\t\tif ( isNode ) {\r\n\t\t\tid = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;\r\n\t\t} else {\r\n\t\t\tid = internalKey;\r\n\t\t}\r\n\t}\r\n\r\n\tif ( !cache[ id ] ) {\r\n\t\t// Avoid exposing jQuery metadata on plain JS objects when the object\r\n\t\t// is serialized using JSON.stringify\r\n\t\tcache[ id ] = isNode ? {} : { toJSON: jQuery.noop };\r\n\t}\r\n\r\n\t// An object can be passed to jQuery.data instead of a key/value pair; this gets\r\n\t// shallow copied over onto the existing cache\r\n\tif ( typeof name === \"object\" || typeof name === \"function\" ) {\r\n\t\tif ( pvt ) {\r\n\t\t\tcache[ id ] = jQuery.extend( cache[ id ], name );\r\n\t\t} else {\r\n\t\t\tcache[ id ].data = jQuery.extend( cache[ id ].data, name );\r\n\t\t}\r\n\t}\r\n\r\n\tthisCache = cache[ id ];\r\n\r\n\t// jQuery data() is stored in a separate object inside the object's internal data\r\n\t// cache in order to avoid key collisions between internal data and user-defined\r\n\t// data.\r\n\tif ( !pvt ) {\r\n\t\tif ( !thisCache.data ) {\r\n\t\t\tthisCache.data = {};\r\n\t\t}\r\n\r\n\t\tthisCache = thisCache.data;\r\n\t}\r\n\r\n\tif ( data !== undefined ) {\r\n\t\tthisCache[ jQuery.camelCase( name ) ] = data;\r\n\t}\r\n\r\n\t// Check for both converted-to-camel and non-converted data property names\r\n\t// If a data property was specified\r\n\tif ( typeof name === \"string\" ) {\r\n\r\n\t\t// First Try to find as-is property data\r\n\t\tret = thisCache[ name ];\r\n\r\n\t\t// Test for null|undefined property data\r\n\t\tif ( ret == null ) {\r\n\r\n\t\t\t// Try to find the camelCased property\r\n\t\t\tret = thisCache[ jQuery.camelCase( name ) ];\r\n\t\t}\r\n\t} else {\r\n\t\tret = thisCache;\r\n\t}\r\n\r\n\treturn ret;\r\n}\r\n\r\nfunction internalRemoveData( elem, name, pvt ) {\r\n\tif ( !jQuery.acceptData( elem ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar thisCache, i,\r\n\t\tisNode = elem.nodeType,\r\n\r\n\t\t// See jQuery.data for more information\r\n\t\tcache = isNode ? jQuery.cache : elem,\r\n\t\tid = isNode ? elem[ jQuery.expando ] : jQuery.expando;\r\n\r\n\t// If there is already no cache entry for this object, there is no\r\n\t// purpose in continuing\r\n\tif ( !cache[ id ] ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif ( name ) {\r\n\r\n\t\tthisCache = pvt ? cache[ id ] : cache[ id ].data;\r\n\r\n\t\tif ( thisCache ) {\r\n\r\n\t\t\t// Support array or space separated string names for data keys\r\n\t\t\tif ( !jQuery.isArray( name ) ) {\r\n\r\n\t\t\t\t// try the string as a key before any manipulation\r\n\t\t\t\tif ( name in thisCache ) {\r\n\t\t\t\t\tname = [ name ];\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// split the camel cased version by spaces unless a key with the spaces exists\r\n\t\t\t\t\tname = jQuery.camelCase( name );\r\n\t\t\t\t\tif ( name in thisCache ) {\r\n\t\t\t\t\t\tname = [ name ];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tname = name.split(\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// If \"name\" is an array of keys...\r\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\r\n\t\t\t\t// keys will be converted to camelCase.\r\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\r\n\t\t\t\t// both plain key and camelCase key. #12786\r\n\t\t\t\t// This will only penalize the array argument path.\r\n\t\t\t\tname = name.concat( jQuery.map( name, jQuery.camelCase ) );\r\n\t\t\t}\r\n\r\n\t\t\ti = name.length;\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tdelete thisCache[ name[i] ];\r\n\t\t\t}\r\n\r\n\t\t\t// If there is no data left in the cache, we want to continue\r\n\t\t\t// and let the cache object itself get destroyed\r\n\t\t\tif ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// See jQuery.data for more information\r\n\tif ( !pvt ) {\r\n\t\tdelete cache[ id ].data;\r\n\r\n\t\t// Don't destroy the parent cache unless the internal data object\r\n\t\t// had been the only thing left in it\r\n\t\tif ( !isEmptyDataObject( cache[ id ] ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t// Destroy the cache\r\n\tif ( isNode ) {\r\n\t\tjQuery.cleanData( [ elem ], true );\r\n\r\n\t// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\r\n\t/* jshint eqeqeq: false */\r\n\t} else if ( support.deleteExpando || cache != cache.window ) {\r\n\t\t/* jshint eqeqeq: true */\r\n\t\tdelete cache[ id ];\r\n\r\n\t// When all else fails, null\r\n\t} else {\r\n\t\tcache[ id ] = null;\r\n\t}\r\n}\r\n\r\njQuery.extend({\r\n\tcache: {},\r\n\r\n\t// The following elements (space-suffixed to avoid Object.prototype collisions)\r\n\t// throw uncatchable exceptions if you attempt to set expando properties\r\n\tnoData: {\r\n\t\t\"applet \": true,\r\n\t\t\"embed \": true,\r\n\t\t// ...but Flash objects (which have this classid) *can* handle expandos\r\n\t\t\"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\r\n\t},\r\n\r\n\thasData: function( elem ) {\r\n\t\telem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];\r\n\t\treturn !!elem && !isEmptyDataObject( elem );\r\n\t},\r\n\r\n\tdata: function( elem, name, data ) {\r\n\t\treturn internalData( elem, name, data );\r\n\t},\r\n\r\n\tremoveData: function( elem, name ) {\r\n\t\treturn internalRemoveData( elem, name );\r\n\t},\r\n\r\n\t// For internal use only.\r\n\t_data: function( elem, name, data ) {\r\n\t\treturn internalData( elem, name, data, true );\r\n\t},\r\n\r\n\t_removeData: function( elem, name ) {\r\n\t\treturn internalRemoveData( elem, name, true );\r\n\t}\r\n});\r\n\r\njQuery.fn.extend({\r\n\tdata: function( key, value ) {\r\n\t\tvar i, name, data,\r\n\t\t\telem = this[0],\r\n\t\t\tattrs = elem && elem.attributes;\r\n\r\n\t\t// Special expections of .data basically thwart jQuery.access,\r\n\t\t// so implement the relevant behavior ourselves\r\n\r\n\t\t// Gets all values\r\n\t\tif ( key === undefined ) {\r\n\t\t\tif ( this.length ) {\r\n\t\t\t\tdata = jQuery.data( elem );\r\n\r\n\t\t\t\tif ( elem.nodeType === 1 && !jQuery._data( elem, \"parsedAttrs\" ) ) {\r\n\t\t\t\t\ti = attrs.length;\r\n\t\t\t\t\twhile ( i-- ) {\r\n\r\n\t\t\t\t\t\t// Support: IE11+\r\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\r\n\t\t\t\t\t\tif ( attrs[ i ] ) {\r\n\t\t\t\t\t\t\tname = attrs[ i ].name;\r\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\r\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice(5) );\r\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tjQuery._data( elem, \"parsedAttrs\", true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\t// Sets multiple values\r\n\t\tif ( typeof key === \"object\" ) {\r\n\t\t\treturn this.each(function() {\r\n\t\t\t\tjQuery.data( this, key );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn arguments.length > 1 ?\r\n\r\n\t\t\t// Sets one value\r\n\t\t\tthis.each(function() {\r\n\t\t\t\tjQuery.data( this, key, value );\r\n\t\t\t}) :\r\n\r\n\t\t\t// Gets one value\r\n\t\t\t// Try to fetch any internally stored data first\r\n\t\t\telem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;\r\n\t},\r\n\r\n\tremoveData: function( key ) {\r\n\t\treturn this.each(function() {\r\n\t\t\tjQuery.removeData( this, key );\r\n\t\t});\r\n\t}\r\n});\r\n\r\n\r\njQuery.extend({\r\n\tqueue: function( elem, type, data ) {\r\n\t\tvar queue;\r\n\r\n\t\tif ( elem ) {\r\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\r\n\t\t\tqueue = jQuery._data( elem, type );\r\n\r\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\r\n\t\t\tif ( data ) {\r\n\t\t\t\tif ( !queue || jQuery.isArray(data) ) {\r\n\t\t\t\t\tqueue = jQuery._data( elem, type, jQuery.makeArray(data) );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tqueue.push( data );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn queue || [];\r\n\t\t}\r\n\t},\r\n\r\n\tdequeue: function( elem, type ) {\r\n\t\ttype = type || \"fx\";\r\n\r\n\t\tvar queue = jQuery.queue( elem, type ),\r\n\t\t\tstartLength = queue.length,\r\n\t\t\tfn = queue.shift(),\r\n\t\t\thooks = jQuery._queueHooks( elem, type ),\r\n\t\t\tnext = function() {\r\n\t\t\t\tjQuery.dequeue( elem, type );\r\n\t\t\t};\r\n\r\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\r\n\t\tif ( fn === \"inprogress\" ) {\r\n\t\t\tfn = queue.shift();\r\n\t\t\tstartLength--;\r\n\t\t}\r\n\r\n\t\tif ( fn ) {\r\n\r\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\r\n\t\t\t// automatically dequeued\r\n\t\t\tif ( type === \"fx\" ) {\r\n\t\t\t\tqueue.unshift( \"inprogress\" );\r\n\t\t\t}\r\n\r\n\t\t\t// clear up the last queue stop function\r\n\t\t\tdelete hooks.stop;\r\n\t\t\tfn.call( elem, next, hooks );\r\n\t\t}\r\n\r\n\t\tif ( !startLength && hooks ) {\r\n\t\t\thooks.empty.fire();\r\n\t\t}\r\n\t},\r\n\r\n\t// not intended for public consumption - generates a queueHooks object, or returns the current one\r\n\t_queueHooks: function( elem, type ) {\r\n\t\tvar key = type + \"queueHooks\";\r\n\t\treturn jQuery._data( elem, key ) || jQuery._data( elem, key, {\r\n\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function() {\r\n\t\t\t\tjQuery._removeData( elem, type + \"queue\" );\r\n\t\t\t\tjQuery._removeData( elem, key );\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n});\r\n\r\njQuery.fn.extend({\r\n\tqueue: function( type, data ) {\r\n\t\tvar setter = 2;\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tdata = type;\r\n\t\t\ttype = \"fx\";\r\n\t\t\tsetter--;\r\n\t\t}\r\n\r\n\t\tif ( arguments.length < setter ) {\r\n\t\t\treturn jQuery.queue( this[0], type );\r\n\t\t}\r\n\r\n\t\treturn data === undefined ?\r\n\t\t\tthis :\r\n\t\t\tthis.each(function() {\r\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\r\n\r\n\t\t\t\t// ensure a hooks for this queue\r\n\t\t\t\tjQuery._queueHooks( this, type );\r\n\r\n\t\t\t\tif ( type === \"fx\" && queue[0] !== \"inprogress\" ) {\r\n\t\t\t\t\tjQuery.dequeue( this, type );\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t},\r\n\tdequeue: function( type ) {\r\n\t\treturn this.each(function() {\r\n\t\t\tjQuery.dequeue( this, type );\r\n\t\t});\r\n\t},\r\n\tclearQueue: function( type ) {\r\n\t\treturn this.queue( type || \"fx\", [] );\r\n\t},\r\n\t// Get a promise resolved when queues of a certain type\r\n\t// are emptied (fx is the type by default)\r\n\tpromise: function( type, obj ) {\r\n\t\tvar tmp,\r\n\t\t\tcount = 1,\r\n\t\t\tdefer = jQuery.Deferred(),\r\n\t\t\telements = this,\r\n\t\t\ti = this.length,\r\n\t\t\tresolve = function() {\r\n\t\t\t\tif ( !( --count ) ) {\r\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tobj = type;\r\n\t\t\ttype = undefined;\r\n\t\t}\r\n\t\ttype = type || \"fx\";\r\n\r\n\t\twhile ( i-- ) {\r\n\t\t\ttmp = jQuery._data( elements[ i ], type + \"queueHooks\" );\r\n\t\t\tif ( tmp && tmp.empty ) {\r\n\t\t\t\tcount++;\r\n\t\t\t\ttmp.empty.add( resolve );\r\n\t\t\t}\r\n\t\t}\r\n\t\tresolve();\r\n\t\treturn defer.promise( obj );\r\n\t}\r\n});\r\nvar pnum = (/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/).source;\r\n\r\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\r\n\r\nvar isHidden = function( elem, el ) {\r\n\t\t// isHidden might be called from jQuery#filter function;\r\n\t\t// in that case, element will be second argument\r\n\t\telem = el || elem;\r\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" || !jQuery.contains( elem.ownerDocument, elem );\r\n\t};\r\n\r\n\r\n\r\n// Multifunctional method to get and set values of a collection\r\n// The value/s can optionally be executed if it's a function\r\nvar access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\r\n\tvar i = 0,\r\n\t\tlength = elems.length,\r\n\t\tbulk = key == null;\r\n\r\n\t// Sets many values\r\n\tif ( jQuery.type( key ) === \"object\" ) {\r\n\t\tchainable = true;\r\n\t\tfor ( i in key ) {\r\n\t\t\tjQuery.access( elems, fn, i, key[i], true, emptyGet, raw );\r\n\t\t}\r\n\r\n\t// Sets one value\r\n\t} else if ( value !== undefined ) {\r\n\t\tchainable = true;\r\n\r\n\t\tif ( !jQuery.isFunction( value ) ) {\r\n\t\t\traw = true;\r\n\t\t}\r\n\r\n\t\tif ( bulk ) {\r\n\t\t\t// Bulk operations run against the entire set\r\n\t\t\tif ( raw ) {\r\n\t\t\t\tfn.call( elems, value );\r\n\t\t\t\tfn = null;\r\n\r\n\t\t\t// ...except when executing function values\r\n\t\t\t} else {\r\n\t\t\t\tbulk = fn;\r\n\t\t\t\tfn = function( elem, key, value ) {\r\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( fn ) {\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tfn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn chainable ?\r\n\t\telems :\r\n\r\n\t\t// Gets\r\n\t\tbulk ?\r\n\t\t\tfn.call( elems ) :\r\n\t\t\tlength ? fn( elems[0], key ) : emptyGet;\r\n};\r\nvar rcheckableType = (/^(?:checkbox|radio)$/i);\r\n\r\n\r\n\r\n(function() {\r\n\t// Minified: var a,b,c\r\n\tvar input = document.createElement( \"input\" ),\r\n\t\tdiv = document.createElement( \"div\" ),\r\n\t\tfragment = document.createDocumentFragment();\r\n\r\n\t// Setup\r\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\r\n\r\n\t// IE strips leading whitespace when .innerHTML is used\r\n\tsupport.leadingWhitespace = div.firstChild.nodeType === 3;\r\n\r\n\t// Make sure that tbody elements aren't automatically inserted\r\n\t// IE will insert them into empty tables\r\n\tsupport.tbody = !div.getElementsByTagName( \"tbody\" ).length;\r\n\r\n\t// Make sure that link elements get serialized correctly by innerHTML\r\n\t// This requires a wrapper element in IE\r\n\tsupport.htmlSerialize = !!div.getElementsByTagName( \"link\" ).length;\r\n\r\n\t// Makes sure cloning an html5 element does not cause problems\r\n\t// Where outerHTML is undefined, this still works\r\n\tsupport.html5Clone =\r\n\t\tdocument.createElement( \"nav\" ).cloneNode( true ).outerHTML !== \"<:nav></:nav>\";\r\n\r\n\t// Check if a disconnected checkbox will retain its checked\r\n\t// value of true after appended to the DOM (IE6/7)\r\n\tinput.type = \"checkbox\";\r\n\tinput.checked = true;\r\n\tfragment.appendChild( input );\r\n\tsupport.appendChecked = input.checked;\r\n\r\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\r\n\t// Support: IE6-IE11+\r\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\r\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\r\n\r\n\t// #11217 - WebKit loses check when the name is after the checked attribute\r\n\tfragment.appendChild( div );\r\n\tdiv.innerHTML = \"<input type='radio' checked='checked' name='t'/>\";\r\n\r\n\t// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3\r\n\t// old WebKit doesn't clone checked state correctly in fragments\r\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\r\n\r\n\t// Support: IE<9\r\n\t// Opera does not clone events (and typeof div.attachEvent === undefined).\r\n\t// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()\r\n\tsupport.noCloneEvent = true;\r\n\tif ( div.attachEvent ) {\r\n\t\tdiv.attachEvent( \"onclick\", function() {\r\n\t\t\tsupport.noCloneEvent = false;\r\n\t\t});\r\n\r\n\t\tdiv.cloneNode( true ).click();\r\n\t}\r\n\r\n\t// Execute the test only if not already executed in another module.\r\n\tif (support.deleteExpando == null) {\r\n\t\t// Support: IE<9\r\n\t\tsupport.deleteExpando = true;\r\n\t\ttry {\r\n\t\t\tdelete div.test;\r\n\t\t} catch( e ) {\r\n\t\t\tsupport.deleteExpando = false;\r\n\t\t}\r\n\t}\r\n})();\r\n\r\n\r\n(function() {\r\n\tvar i, eventName,\r\n\t\tdiv = document.createElement( \"div\" );\r\n\r\n\t// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)\r\n\tfor ( i in { submit: true, change: true, focusin: true }) {\r\n\t\teventName = \"on\" + i;\r\n\r\n\t\tif ( !(support[ i + \"Bubbles\" ] = eventName in window) ) {\r\n\t\t\t// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)\r\n\t\t\tdiv.setAttribute( eventName, \"t\" );\r\n\t\t\tsupport[ i + \"Bubbles\" ] = div.attributes[ eventName ].expando === false;\r\n\t\t}\r\n\t}\r\n\r\n\t// Null elements to avoid leaks in IE.\r\n\tdiv = null;\r\n})();\r\n\r\n\r\nvar rformElems = /^(?:input|select|textarea)$/i,\r\n\trkeyEvent = /^key/,\r\n\trmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\r\n\trfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\r\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\r\n\r\nfunction returnTrue() {\r\n\treturn true;\r\n}\r\n\r\nfunction returnFalse() {\r\n\treturn false;\r\n}\r\n\r\nfunction safeActiveElement() {\r\n\ttry {\r\n\t\treturn document.activeElement;\r\n\t} catch ( err ) { }\r\n}\r\n\r\n/*\r\n * Helper functions for managing events -- not part of the public interface.\r\n * Props to Dean Edwards' addEvent library for many of the ideas.\r\n */\r\njQuery.event = {\r\n\r\n\tglobal: {},\r\n\r\n\tadd: function( elem, types, handler, data, selector ) {\r\n\t\tvar tmp, events, t, handleObjIn,\r\n\t\t\tspecial, eventHandle, handleObj,\r\n\t\t\thandlers, type, namespaces, origType,\r\n\t\t\telemData = jQuery._data( elem );\r\n\r\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\r\n\t\tif ( !elemData ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Caller can pass in an object of custom data in lieu of the handler\r\n\t\tif ( handler.handler ) {\r\n\t\t\thandleObjIn = handler;\r\n\t\t\thandler = handleObjIn.handler;\r\n\t\t\tselector = handleObjIn.selector;\r\n\t\t}\r\n\r\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\r\n\t\tif ( !handler.guid ) {\r\n\t\t\thandler.guid = jQuery.guid++;\r\n\t\t}\r\n\r\n\t\t// Init the element's event structure and main handler, if this is the first\r\n\t\tif ( !(events = elemData.events) ) {\r\n\t\t\tevents = elemData.events = {};\r\n\t\t}\r\n\t\tif ( !(eventHandle = elemData.handle) ) {\r\n\t\t\teventHandle = elemData.handle = function( e ) {\r\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\r\n\t\t\t\t// when an event is called after a page has unloaded\r\n\t\t\t\treturn typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?\r\n\t\t\t\t\tjQuery.event.dispatch.apply( eventHandle.elem, arguments ) :\r\n\t\t\t\t\tundefined;\r\n\t\t\t};\r\n\t\t\t// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\r\n\t\t\teventHandle.elem = elem;\r\n\t\t}\r\n\r\n\t\t// Handle multiple events separated by a space\r\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\r\n\t\tt = types.length;\r\n\t\twhile ( t-- ) {\r\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];\r\n\t\t\ttype = origType = tmp[1];\r\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\r\n\r\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\r\n\t\t\tif ( !type ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// If event changes its type, use the special event handlers for the changed type\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\r\n\t\t\t// If selector defined, determine special event api type, otherwise given type\r\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\r\n\r\n\t\t\t// Update special based on newly reset type\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\r\n\t\t\t// handleObj is passed to all event handlers\r\n\t\t\thandleObj = jQuery.extend({\r\n\t\t\t\ttype: type,\r\n\t\t\t\torigType: origType,\r\n\t\t\t\tdata: data,\r\n\t\t\t\thandler: handler,\r\n\t\t\t\tguid: handler.guid,\r\n\t\t\t\tselector: selector,\r\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\r\n\t\t\t\tnamespace: namespaces.join(\".\")\r\n\t\t\t}, handleObjIn );\r\n\r\n\t\t\t// Init the event handler queue if we're the first\r\n\t\t\tif ( !(handlers = events[ type ]) ) {\r\n\t\t\t\thandlers = events[ type ] = [];\r\n\t\t\t\thandlers.delegateCount = 0;\r\n\r\n\t\t\t\t// Only use addEventListener/attachEvent if the special events handler returns false\r\n\t\t\t\tif ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\r\n\t\t\t\t\t// Bind the global event handler to the element\r\n\t\t\t\t\tif ( elem.addEventListener ) {\r\n\t\t\t\t\t\telem.addEventListener( type, eventHandle, false );\r\n\r\n\t\t\t\t\t} else if ( elem.attachEvent ) {\r\n\t\t\t\t\t\telem.attachEvent( \"on\" + type, eventHandle );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( special.add ) {\r\n\t\t\t\tspecial.add.call( elem, handleObj );\r\n\r\n\t\t\t\tif ( !handleObj.handler.guid ) {\r\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Add to the element's handler list, delegates in front\r\n\t\t\tif ( selector ) {\r\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\r\n\t\t\t} else {\r\n\t\t\t\thandlers.push( handleObj );\r\n\t\t\t}\r\n\r\n\t\t\t// Keep track of which events have ever been used, for event optimization\r\n\t\t\tjQuery.event.global[ type ] = true;\r\n\t\t}\r\n\r\n\t\t// Nullify elem to prevent memory leaks in IE\r\n\t\telem = null;\r\n\t},\r\n\r\n\t// Detach an event or set of events from an element\r\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\r\n\t\tvar j, handleObj, tmp,\r\n\t\t\torigCount, t, events,\r\n\t\t\tspecial, handlers, type,\r\n\t\t\tnamespaces, origType,\r\n\t\t\telemData = jQuery.hasData( elem ) && jQuery._data( elem );\r\n\r\n\t\tif ( !elemData || !(events = elemData.events) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Once for each type.namespace in types; type may be omitted\r\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\r\n\t\tt = types.length;\r\n\t\twhile ( t-- ) {\r\n\t\t\ttmp = rtypenamespace.exec( types[t] ) || [];\r\n\t\t\ttype = origType = tmp[1];\r\n\t\t\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\r\n\r\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\r\n\t\t\tif ( !type ) {\r\n\t\t\t\tfor ( type in events ) {\r\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\r\n\t\t\thandlers = events[ type ] || [];\r\n\t\t\ttmp = tmp[2] && new RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" );\r\n\r\n\t\t\t// Remove matching events\r\n\t\t\torigCount = j = handlers.length;\r\n\t\t\twhile ( j-- ) {\r\n\t\t\t\thandleObj = handlers[ j ];\r\n\r\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\r\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\r\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\r\n\t\t\t\t\t( !selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector ) ) {\r\n\t\t\t\t\thandlers.splice( j, 1 );\r\n\r\n\t\t\t\t\tif ( handleObj.selector ) {\r\n\t\t\t\t\t\thandlers.delegateCount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( special.remove ) {\r\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\r\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\r\n\t\t\tif ( origCount && !handlers.length ) {\r\n\t\t\t\tif ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {\r\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete events[ type ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Remove the expando if it's no longer used\r\n\t\tif ( jQuery.isEmptyObject( events ) ) {\r\n\t\t\tdelete elemData.handle;\r\n\r\n\t\t\t// removeData also checks for emptiness and clears the expando if empty\r\n\t\t\t// so use it instead of delete\r\n\t\t\tjQuery._removeData( elem, \"events\" );\r\n\t\t}\r\n\t},\r\n\r\n\ttrigger: function( event, data, elem, onlyHandlers ) {\r\n\t\tvar handle, ontype, cur,\r\n\t\t\tbubbleType, special, tmp, i,\r\n\t\t\teventPath = [ elem || document ],\r\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\r\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split(\".\") : [];\r\n\r\n\t\tcur = tmp = elem = elem || document;\r\n\r\n\t\t// Don't do events on text and comment nodes\r\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\r\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( type.indexOf(\".\") >= 0 ) {\r\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\r\n\t\t\tnamespaces = type.split(\".\");\r\n\t\t\ttype = namespaces.shift();\r\n\t\t\tnamespaces.sort();\r\n\t\t}\r\n\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\r\n\r\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\r\n\t\tevent = event[ jQuery.expando ] ?\r\n\t\t\tevent :\r\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\r\n\r\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\r\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\r\n\t\tevent.namespace = namespaces.join(\".\");\r\n\t\tevent.namespace_re = event.namespace ?\r\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" ) :\r\n\t\t\tnull;\r\n\r\n\t\t// Clean up the event in case it is being reused\r\n\t\tevent.result = undefined;\r\n\t\tif ( !event.target ) {\r\n\t\t\tevent.target = elem;\r\n\t\t}\r\n\r\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\r\n\t\tdata = data == null ?\r\n\t\t\t[ event ] :\r\n\t\t\tjQuery.makeArray( data, [ event ] );\r\n\r\n\t\t// Allow special events to draw outside the lines\r\n\t\tspecial = jQuery.event.special[ type ] || {};\r\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\r\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\r\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\r\n\r\n\t\t\tbubbleType = special.delegateType || type;\r\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\r\n\t\t\t\tcur = cur.parentNode;\r\n\t\t\t}\r\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\r\n\t\t\t\teventPath.push( cur );\r\n\t\t\t\ttmp = cur;\r\n\t\t\t}\r\n\r\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\r\n\t\t\tif ( tmp === (elem.ownerDocument || document) ) {\r\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fire handlers on the event path\r\n\t\ti = 0;\r\n\t\twhile ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {\r\n\r\n\t\t\tevent.type = i > 1 ?\r\n\t\t\t\tbubbleType :\r\n\t\t\t\tspecial.bindType || type;\r\n\r\n\t\t\t// jQuery handler\r\n\t\t\thandle = ( jQuery._data( cur, \"events\" ) || {} )[ event.type ] && jQuery._data( cur, \"handle\" );\r\n\t\t\tif ( handle ) {\r\n\t\t\t\thandle.apply( cur, data );\r\n\t\t\t}\r\n\r\n\t\t\t// Native handler\r\n\t\t\thandle = ontype && cur[ ontype ];\r\n\t\t\tif ( handle && handle.apply && jQuery.acceptData( cur ) ) {\r\n\t\t\t\tevent.result = handle.apply( cur, data );\r\n\t\t\t\tif ( event.result === false ) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tevent.type = type;\r\n\r\n\t\t// If nobody prevented the default action, do it now\r\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\r\n\r\n\t\t\tif ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&\r\n\t\t\t\tjQuery.acceptData( elem ) ) {\r\n\r\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\r\n\t\t\t\t// Can't use an .isFunction() check here because IE6/7 fails that test.\r\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\r\n\t\t\t\tif ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {\r\n\r\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\r\n\t\t\t\t\ttmp = elem[ ontype ];\r\n\r\n\t\t\t\t\tif ( tmp ) {\r\n\t\t\t\t\t\telem[ ontype ] = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\r\n\t\t\t\t\tjQuery.event.triggered = type;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\telem[ type ]();\r\n\t\t\t\t\t} catch ( e ) {\r\n\t\t\t\t\t\t// IE<9 dies on focus/blur to hidden element (#1486,#12518)\r\n\t\t\t\t\t\t// only reproducible on winXP IE8 native, not IE9 in IE8 mode\r\n\t\t\t\t\t}\r\n\t\t\t\t\tjQuery.event.triggered = undefined;\r\n\r\n\t\t\t\t\tif ( tmp ) {\r\n\t\t\t\t\t\telem[ ontype ] = tmp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn event.result;\r\n\t},\r\n\r\n\tdispatch: function( event ) {\r\n\r\n\t\t// Make a writable jQuery.Event from the native event object\r\n\t\tevent = jQuery.event.fix( event );\r\n\r\n\t\tvar i, ret, handleObj, matched, j,\r\n\t\t\thandlerQueue = [],\r\n\t\t\targs = slice.call( arguments ),\r\n\t\t\thandlers = ( jQuery._data( this, \"events\" ) || {} )[ event.type ] || [],\r\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\r\n\r\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\r\n\t\targs[0] = event;\r\n\t\tevent.delegateTarget = this;\r\n\r\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\r\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Determine handlers\r\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\r\n\r\n\t\t// Run delegates first; they may want to stop propagation beneath us\r\n\t\ti = 0;\r\n\t\twhile ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {\r\n\t\t\tevent.currentTarget = matched.elem;\r\n\r\n\t\t\tj = 0;\r\n\t\t\twhile ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {\r\n\r\n\t\t\t\t// Triggered event must either 1) have no namespace, or\r\n\t\t\t\t// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\r\n\t\t\t\tif ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {\r\n\r\n\t\t\t\t\tevent.handleObj = handleObj;\r\n\t\t\t\t\tevent.data = handleObj.data;\r\n\r\n\t\t\t\t\tret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )\r\n\t\t\t\t\t\t\t.apply( matched.elem, args );\r\n\r\n\t\t\t\t\tif ( ret !== undefined ) {\r\n\t\t\t\t\t\tif ( (event.result = ret) === false ) {\r\n\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Call the postDispatch hook for the mapped type\r\n\t\tif ( special.postDispatch ) {\r\n\t\t\tspecial.postDispatch.call( this, event );\r\n\t\t}\r\n\r\n\t\treturn event.result;\r\n\t},\r\n\r\n\thandlers: function( event, handlers ) {\r\n\t\tvar sel, handleObj, matches, i,\r\n\t\t\thandlerQueue = [],\r\n\t\t\tdelegateCount = handlers.delegateCount,\r\n\t\t\tcur = event.target;\r\n\r\n\t\t// Find delegate handlers\r\n\t\t// Black-hole SVG <use> instance trees (#13180)\r\n\t\t// Avoid non-left-click bubbling in Firefox (#3861)\r\n\t\tif ( delegateCount && cur.nodeType && (!event.button || event.type !== \"click\") ) {\r\n\r\n\t\t\t/* jshint eqeqeq: false */\r\n\t\t\tfor ( ; cur != this; cur = cur.parentNode || this ) {\r\n\t\t\t\t/* jshint eqeqeq: true */\r\n\r\n\t\t\t\t// Don't check non-elements (#13208)\r\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\r\n\t\t\t\tif ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\") ) {\r\n\t\t\t\t\tmatches = [];\r\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\r\n\t\t\t\t\t\thandleObj = handlers[ i ];\r\n\r\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\r\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\r\n\r\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\r\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\r\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) >= 0 :\r\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( matches[ sel ] ) {\r\n\t\t\t\t\t\t\tmatches.push( handleObj );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( matches.length ) {\r\n\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add the remaining (directly-bound) handlers\r\n\t\tif ( delegateCount < handlers.length ) {\r\n\t\t\thandlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });\r\n\t\t}\r\n\r\n\t\treturn handlerQueue;\r\n\t},\r\n\r\n\tfix: function( event ) {\r\n\t\tif ( event[ jQuery.expando ] ) {\r\n\t\t\treturn event;\r\n\t\t}\r\n\r\n\t\t// Create a writable copy of the event object and normalize some properties\r\n\t\tvar i, prop, copy,\r\n\t\t\ttype = event.type,\r\n\t\t\toriginalEvent = event,\r\n\t\t\tfixHook = this.fixHooks[ type ];\r\n\r\n\t\tif ( !fixHook ) {\r\n\t\t\tthis.fixHooks[ type ] = fixHook =\r\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\r\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\r\n\t\t\t\t{};\r\n\t\t}\r\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\r\n\r\n\t\tevent = new jQuery.Event( originalEvent );\r\n\r\n\t\ti = copy.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\tprop = copy[ i ];\r\n\t\t\tevent[ prop ] = originalEvent[ prop ];\r\n\t\t}\r\n\r\n\t\t// Support: IE<9\r\n\t\t// Fix target property (#1925)\r\n\t\tif ( !event.target ) {\r\n\t\t\tevent.target = originalEvent.srcElement || document;\r\n\t\t}\r\n\r\n\t\t// Support: Chrome 23+, Safari?\r\n\t\t// Target should not be a text node (#504, #13143)\r\n\t\tif ( event.target.nodeType === 3 ) {\r\n\t\t\tevent.target = event.target.parentNode;\r\n\t\t}\r\n\r\n\t\t// Support: IE<9\r\n\t\t// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\r\n\t\tevent.metaKey = !!event.metaKey;\r\n\r\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\r\n\t},\r\n\r\n\t// Includes some event props shared by KeyEvent and MouseEvent\r\n\tprops: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\r\n\r\n\tfixHooks: {},\r\n\r\n\tkeyHooks: {\r\n\t\tprops: \"char charCode key keyCode\".split(\" \"),\r\n\t\tfilter: function( event, original ) {\r\n\r\n\t\t\t// Add which for key events\r\n\t\t\tif ( event.which == null ) {\r\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\r\n\t\t\t}\r\n\r\n\t\t\treturn event;\r\n\t\t}\r\n\t},\r\n\r\n\tmouseHooks: {\r\n\t\tprops: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\r\n\t\tfilter: function( event, original ) {\r\n\t\t\tvar body, eventDoc, doc,\r\n\t\t\t\tbutton = original.button,\r\n\t\t\t\tfromElement = original.fromElement;\r\n\r\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\r\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\r\n\t\t\t\teventDoc = event.target.ownerDocument || document;\r\n\t\t\t\tdoc = eventDoc.documentElement;\r\n\t\t\t\tbody = eventDoc.body;\r\n\r\n\t\t\t\tevent.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );\r\n\t\t\t\tevent.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );\r\n\t\t\t}\r\n\r\n\t\t\t// Add relatedTarget, if necessary\r\n\t\t\tif ( !event.relatedTarget && fromElement ) {\r\n\t\t\t\tevent.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\r\n\t\t\t}\r\n\r\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\r\n\t\t\t// Note: button is not normalized, so don't use it\r\n\t\t\tif ( !event.which && button !== undefined ) {\r\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\r\n\t\t\t}\r\n\r\n\t\t\treturn event;\r\n\t\t}\r\n\t},\r\n\r\n\tspecial: {\r\n\t\tload: {\r\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\r\n\t\t\tnoBubble: true\r\n\t\t},\r\n\t\tfocus: {\r\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\r\n\t\t\ttrigger: function() {\r\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthis.focus();\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t} catch ( e ) {\r\n\t\t\t\t\t\t// Support: IE<9\r\n\t\t\t\t\t\t// If we error on focus to hidden element (#1486, #12518),\r\n\t\t\t\t\t\t// let .trigger() run the handlers\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdelegateType: \"focusin\"\r\n\t\t},\r\n\t\tblur: {\r\n\t\t\ttrigger: function() {\r\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\r\n\t\t\t\t\tthis.blur();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdelegateType: \"focusout\"\r\n\t\t},\r\n\t\tclick: {\r\n\t\t\t// For checkbox, fire native event so checked state will be right\r\n\t\t\ttrigger: function() {\r\n\t\t\t\tif ( jQuery.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click ) {\r\n\t\t\t\t\tthis.click();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\r\n\t\t\t_default: function( event ) {\r\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tbeforeunload: {\r\n\t\t\tpostDispatch: function( event ) {\r\n\r\n\t\t\t\t// Support: Firefox 20+\r\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\r\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\r\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tsimulate: function( type, elem, event, bubble ) {\r\n\t\t// Piggyback on a donor event to simulate a different one.\r\n\t\t// Fake originalEvent to avoid donor's stopPropagation, but if the\r\n\t\t// simulated event prevents default then we do the same on the donor.\r\n\t\tvar e = jQuery.extend(\r\n\t\t\tnew jQuery.Event(),\r\n\t\t\tevent,\r\n\t\t\t{\r\n\t\t\t\ttype: type,\r\n\t\t\t\tisSimulated: true,\r\n\t\t\t\toriginalEvent: {}\r\n\t\t\t}\r\n\t\t);\r\n\t\tif ( bubble ) {\r\n\t\t\tjQuery.event.trigger( e, null, elem );\r\n\t\t} else {\r\n\t\t\tjQuery.event.dispatch.call( elem, e );\r\n\t\t}\r\n\t\tif ( e.isDefaultPrevented() ) {\r\n\t\t\tevent.preventDefault();\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.removeEvent = document.removeEventListener ?\r\n\tfunction( elem, type, handle ) {\r\n\t\tif ( elem.removeEventListener ) {\r\n\t\t\telem.removeEventListener( type, handle, false );\r\n\t\t}\r\n\t} :\r\n\tfunction( elem, type, handle ) {\r\n\t\tvar name = \"on\" + type;\r\n\r\n\t\tif ( elem.detachEvent ) {\r\n\r\n\t\t\t// #8545, #7054, preventing memory leaks for custom events in IE6-8\r\n\t\t\t// detachEvent needed property on element, by name of that event, to properly expose it to GC\r\n\t\t\tif ( typeof elem[ name ] === strundefined ) {\r\n\t\t\t\telem[ name ] = null;\r\n\t\t\t}\r\n\r\n\t\t\telem.detachEvent( name, handle );\r\n\t\t}\r\n\t};\r\n\r\njQuery.Event = function( src, props ) {\r\n\t// Allow instantiation without the 'new' keyword\r\n\tif ( !(this instanceof jQuery.Event) ) {\r\n\t\treturn new jQuery.Event( src, props );\r\n\t}\r\n\r\n\t// Event object\r\n\tif ( src && src.type ) {\r\n\t\tthis.originalEvent = src;\r\n\t\tthis.type = src.type;\r\n\r\n\t\t// Events bubbling up the document may have been marked as prevented\r\n\t\t// by a handler lower down the tree; reflect the correct value.\r\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\r\n\t\t\t\tsrc.defaultPrevented === undefined &&\r\n\t\t\t\t// Support: IE < 9, Android < 4.0\r\n\t\t\t\tsrc.returnValue === false ?\r\n\t\t\treturnTrue :\r\n\t\t\treturnFalse;\r\n\r\n\t// Event type\r\n\t} else {\r\n\t\tthis.type = src;\r\n\t}\r\n\r\n\t// Put explicitly provided properties onto the event object\r\n\tif ( props ) {\r\n\t\tjQuery.extend( this, props );\r\n\t}\r\n\r\n\t// Create a timestamp if incoming event doesn't have one\r\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\r\n\r\n\t// Mark it as fixed\r\n\tthis[ jQuery.expando ] = true;\r\n};\r\n\r\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\r\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\r\njQuery.Event.prototype = {\r\n\tisDefaultPrevented: returnFalse,\r\n\tisPropagationStopped: returnFalse,\r\n\tisImmediatePropagationStopped: returnFalse,\r\n\r\n\tpreventDefault: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isDefaultPrevented = returnTrue;\r\n\t\tif ( !e ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If preventDefault exists, run it on the original event\r\n\t\tif ( e.preventDefault ) {\r\n\t\t\te.preventDefault();\r\n\r\n\t\t// Support: IE\r\n\t\t// Otherwise set the returnValue property of the original event to false\r\n\t\t} else {\r\n\t\t\te.returnValue = false;\r\n\t\t}\r\n\t},\r\n\tstopPropagation: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isPropagationStopped = returnTrue;\r\n\t\tif ( !e ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// If stopPropagation exists, run it on the original event\r\n\t\tif ( e.stopPropagation ) {\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\r\n\t\t// Support: IE\r\n\t\t// Set the cancelBubble property of the original event to true\r\n\t\te.cancelBubble = true;\r\n\t},\r\n\tstopImmediatePropagation: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isImmediatePropagationStopped = returnTrue;\r\n\r\n\t\tif ( e && e.stopImmediatePropagation ) {\r\n\t\t\te.stopImmediatePropagation();\r\n\t\t}\r\n\r\n\t\tthis.stopPropagation();\r\n\t}\r\n};\r\n\r\n// Create mouseenter/leave events using mouseover/out and event-time checks\r\njQuery.each({\r\n\tmouseenter: \"mouseover\",\r\n\tmouseleave: \"mouseout\",\r\n\tpointerenter: \"pointerover\",\r\n\tpointerleave: \"pointerout\"\r\n}, function( orig, fix ) {\r\n\tjQuery.event.special[ orig ] = {\r\n\t\tdelegateType: fix,\r\n\t\tbindType: fix,\r\n\r\n\t\thandle: function( event ) {\r\n\t\t\tvar ret,\r\n\t\t\t\ttarget = this,\r\n\t\t\t\trelated = event.relatedTarget,\r\n\t\t\t\thandleObj = event.handleObj;\r\n\r\n\t\t\t// For mousenter/leave call the handler if related is outside the target.\r\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\r\n\t\t\tif ( !related || (related !== target && !jQuery.contains( target, related )) ) {\r\n\t\t\t\tevent.type = handleObj.origType;\r\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\r\n\t\t\t\tevent.type = fix;\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t};\r\n});\r\n\r\n// IE submit delegation\r\nif ( !support.submitBubbles ) {\r\n\r\n\tjQuery.event.special.submit = {\r\n\t\tsetup: function() {\r\n\t\t\t// Only need this for delegated form submit events\r\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Lazy-add a submit handler when a descendant form may potentially be submitted\r\n\t\t\tjQuery.event.add( this, \"click._submit keypress._submit\", function( e ) {\r\n\t\t\t\t// Node name check avoids a VML-related crash in IE (#9807)\r\n\t\t\t\tvar elem = e.target,\r\n\t\t\t\t\tform = jQuery.nodeName( elem, \"input\" ) || jQuery.nodeName( elem, \"button\" ) ? elem.form : undefined;\r\n\t\t\t\tif ( form && !jQuery._data( form, \"submitBubbles\" ) ) {\r\n\t\t\t\t\tjQuery.event.add( form, \"submit._submit\", function( event ) {\r\n\t\t\t\t\t\tevent._submit_bubble = true;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tjQuery._data( form, \"submitBubbles\", true );\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// return undefined since we don't need an event listener\r\n\t\t},\r\n\r\n\t\tpostDispatch: function( event ) {\r\n\t\t\t// If form was submitted by the user, bubble the event up the tree\r\n\t\t\tif ( event._submit_bubble ) {\r\n\t\t\t\tdelete event._submit_bubble;\r\n\t\t\t\tif ( this.parentNode && !event.isTrigger ) {\r\n\t\t\t\t\tjQuery.event.simulate( \"submit\", this.parentNode, event, true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tteardown: function() {\r\n\t\t\t// Only need this for delegated form submit events\r\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Remove delegated handlers; cleanData eventually reaps submit handlers attached above\r\n\t\t\tjQuery.event.remove( this, \"._submit\" );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// IE change delegation and checkbox/radio fix\r\nif ( !support.changeBubbles ) {\r\n\r\n\tjQuery.event.special.change = {\r\n\r\n\t\tsetup: function() {\r\n\r\n\t\t\tif ( rformElems.test( this.nodeName ) ) {\r\n\t\t\t\t// IE doesn't fire change on a check/radio until blur; trigger it on click\r\n\t\t\t\t// after a propertychange. Eat the blur-change in special.change.handle.\r\n\t\t\t\t// This still fires onchange a second time for check/radio after blur.\r\n\t\t\t\tif ( this.type === \"checkbox\" || this.type === \"radio\" ) {\r\n\t\t\t\t\tjQuery.event.add( this, \"propertychange._change\", function( event ) {\r\n\t\t\t\t\t\tif ( event.originalEvent.propertyName === \"checked\" ) {\r\n\t\t\t\t\t\t\tthis._just_changed = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tjQuery.event.add( this, \"click._change\", function( event ) {\r\n\t\t\t\t\t\tif ( this._just_changed && !event.isTrigger ) {\r\n\t\t\t\t\t\t\tthis._just_changed = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Allow triggered, simulated change events (#11500)\r\n\t\t\t\t\t\tjQuery.event.simulate( \"change\", this, event, true );\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Delegated event; lazy-add a change handler on descendant inputs\r\n\t\t\tjQuery.event.add( this, \"beforeactivate._change\", function( e ) {\r\n\t\t\t\tvar elem = e.target;\r\n\r\n\t\t\t\tif ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, \"changeBubbles\" ) ) {\r\n\t\t\t\t\tjQuery.event.add( elem, \"change._change\", function( event ) {\r\n\t\t\t\t\t\tif ( this.parentNode && !event.isSimulated && !event.isTrigger ) {\r\n\t\t\t\t\t\t\tjQuery.event.simulate( \"change\", this.parentNode, event, true );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tjQuery._data( elem, \"changeBubbles\", true );\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\thandle: function( event ) {\r\n\t\t\tvar elem = event.target;\r\n\r\n\t\t\t// Swallow native change events from checkbox/radio, we already triggered them above\r\n\t\t\tif ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== \"radio\" && elem.type !== \"checkbox\") ) {\r\n\t\t\t\treturn event.handleObj.handler.apply( this, arguments );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tteardown: function() {\r\n\t\t\tjQuery.event.remove( this, \"._change\" );\r\n\r\n\t\t\treturn !rformElems.test( this.nodeName );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// Create \"bubbling\" focus and blur events\r\nif ( !support.focusinBubbles ) {\r\n\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\r\n\r\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\r\n\t\tvar handler = function( event ) {\r\n\t\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );\r\n\t\t\t};\r\n\r\n\t\tjQuery.event.special[ fix ] = {\r\n\t\t\tsetup: function() {\r\n\t\t\t\tvar doc = this.ownerDocument || this,\r\n\t\t\t\t\tattaches = jQuery._data( doc, fix );\r\n\r\n\t\t\t\tif ( !attaches ) {\r\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\r\n\t\t\t\t}\r\n\t\t\t\tjQuery._data( doc, fix, ( attaches || 0 ) + 1 );\r\n\t\t\t},\r\n\t\t\tteardown: function() {\r\n\t\t\t\tvar doc = this.ownerDocument || this,\r\n\t\t\t\t\tattaches = jQuery._data( doc, fix ) - 1;\r\n\r\n\t\t\t\tif ( !attaches ) {\r\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\r\n\t\t\t\t\tjQuery._removeData( doc, fix );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tjQuery._data( doc, fix, attaches );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n}\r\n\r\njQuery.fn.extend({\r\n\r\n\ton: function( types, selector, data, fn, /*INTERNAL*/ one ) {\r\n\t\tvar type, origFn;\r\n\r\n\t\t// Types can be a map of types/handlers\r\n\t\tif ( typeof types === \"object\" ) {\r\n\t\t\t// ( types-Object, selector, data )\r\n\t\t\tif ( typeof selector !== \"string\" ) {\r\n\t\t\t\t// ( types-Object, data )\r\n\t\t\t\tdata = data || selector;\r\n\t\t\t\tselector = undefined;\r\n\t\t\t}\r\n\t\t\tfor ( type in types ) {\r\n\t\t\t\tthis.on( type, selector, data, types[ type ], one );\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tif ( data == null && fn == null ) {\r\n\t\t\t// ( types, fn )\r\n\t\t\tfn = selector;\r\n\t\t\tdata = selector = undefined;\r\n\t\t} else if ( fn == null ) {\r\n\t\t\tif ( typeof selector === \"string\" ) {\r\n\t\t\t\t// ( types, selector, fn )\r\n\t\t\t\tfn = data;\r\n\t\t\t\tdata = undefined;\r\n\t\t\t} else {\r\n\t\t\t\t// ( types, data, fn )\r\n\t\t\t\tfn = data;\r\n\t\t\t\tdata = selector;\r\n\t\t\t\tselector = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( fn === false ) {\r\n\t\t\tfn = returnFalse;\r\n\t\t} else if ( !fn ) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tif ( one === 1 ) {\r\n\t\t\torigFn = fn;\r\n\t\t\tfn = function( event ) {\r\n\t\t\t\t// Can use an empty set, since event contains the info\r\n\t\t\t\tjQuery().off( event );\r\n\t\t\t\treturn origFn.apply( this, arguments );\r\n\t\t\t};\r\n\t\t\t// Use same guid so caller can remove using origFn\r\n\t\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\r\n\t\t}\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.event.add( this, types, fn, data, selector );\r\n\t\t});\r\n\t},\r\n\tone: function( types, selector, data, fn ) {\r\n\t\treturn this.on( types, selector, data, fn, 1 );\r\n\t},\r\n\toff: function( types, selector, fn ) {\r\n\t\tvar handleObj, type;\r\n\t\tif ( types && types.preventDefault && types.handleObj ) {\r\n\t\t\t// ( event )  dispatched jQuery.Event\r\n\t\t\thandleObj = types.handleObj;\r\n\t\t\tjQuery( types.delegateTarget ).off(\r\n\t\t\t\thandleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType,\r\n\t\t\t\thandleObj.selector,\r\n\t\t\t\thandleObj.handler\r\n\t\t\t);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif ( typeof types === \"object\" ) {\r\n\t\t\t// ( types-object [, selector] )\r\n\t\t\tfor ( type in types ) {\r\n\t\t\t\tthis.off( type, selector, types[ type ] );\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif ( selector === false || typeof selector === \"function\" ) {\r\n\t\t\t// ( types [, fn] )\r\n\t\t\tfn = selector;\r\n\t\t\tselector = undefined;\r\n\t\t}\r\n\t\tif ( fn === false ) {\r\n\t\t\tfn = returnFalse;\r\n\t\t}\r\n\t\treturn this.each(function() {\r\n\t\t\tjQuery.event.remove( this, types, fn, selector );\r\n\t\t});\r\n\t},\r\n\r\n\ttrigger: function( type, data ) {\r\n\t\treturn this.each(function() {\r\n\t\t\tjQuery.event.trigger( type, data, this );\r\n\t\t});\r\n\t},\r\n\ttriggerHandler: function( type, data ) {\r\n\t\tvar elem = this[0];\r\n\t\tif ( elem ) {\r\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\r\n\t\t}\r\n\t}\r\n});\r\n\r\n\r\nfunction createSafeFragment( document ) {\r\n\tvar list = nodeNames.split( \"|\" ),\r\n\t\tsafeFrag = document.createDocumentFragment();\r\n\r\n\tif ( safeFrag.createElement ) {\r\n\t\twhile ( list.length ) {\r\n\t\t\tsafeFrag.createElement(\r\n\t\t\t\tlist.pop()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn safeFrag;\r\n}\r\n\r\nvar nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" +\r\n\t\t\"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\r\n\trinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,\r\n\trnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\r\n\trleadingWhitespace = /^\\s+/,\r\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\r\n\trtagName = /<([\\w:]+)/,\r\n\trtbody = /<tbody/i,\r\n\trhtml = /<|&#?\\w+;/,\r\n\trnoInnerhtml = /<(?:script|style|link)/i,\r\n\t// checked=\"checked\" or checked\r\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\r\n\trscriptType = /^$|\\/(?:java|ecma)script/i,\r\n\trscriptTypeMasked = /^true\\/(.*)/,\r\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\r\n\r\n\t// We have to close these tags to support XHTML (#13200)\r\n\twrapMap = {\r\n\t\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\r\n\t\tlegend: [ 1, \"<fieldset>\", \"</fieldset>\" ],\r\n\t\tarea: [ 1, \"<map>\", \"</map>\" ],\r\n\t\tparam: [ 1, \"<object>\", \"</object>\" ],\r\n\t\tthead: [ 1, \"<table>\", \"</table>\" ],\r\n\t\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\r\n\t\tcol: [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ],\r\n\t\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\r\n\r\n\t\t// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\r\n\t\t// unless wrapped in a div with non-breaking characters in front of it.\r\n\t\t_default: support.htmlSerialize ? [ 0, \"\", \"\" ] : [ 1, \"X<div>\", \"</div>\"  ]\r\n\t},\r\n\tsafeFragment = createSafeFragment( document ),\r\n\tfragmentDiv = safeFragment.appendChild( document.createElement(\"div\") );\r\n\r\nwrapMap.optgroup = wrapMap.option;\r\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\r\nwrapMap.th = wrapMap.td;\r\n\r\nfunction getAll( context, tag ) {\r\n\tvar elems, elem,\r\n\t\ti = 0,\r\n\t\tfound = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || \"*\" ) :\r\n\t\t\ttypeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || \"*\" ) :\r\n\t\t\tundefined;\r\n\r\n\tif ( !found ) {\r\n\t\tfor ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {\r\n\t\t\tif ( !tag || jQuery.nodeName( elem, tag ) ) {\r\n\t\t\t\tfound.push( elem );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery.merge( found, getAll( elem, tag ) );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\r\n\t\tjQuery.merge( [ context ], found ) :\r\n\t\tfound;\r\n}\r\n\r\n// Used in buildFragment, fixes the defaultChecked property\r\nfunction fixDefaultChecked( elem ) {\r\n\tif ( rcheckableType.test( elem.type ) ) {\r\n\t\telem.defaultChecked = elem.checked;\r\n\t}\r\n}\r\n\r\n// Support: IE<8\r\n// Manipulating tables requires a tbody\r\nfunction manipulationTarget( elem, content ) {\r\n\treturn jQuery.nodeName( elem, \"table\" ) &&\r\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\r\n\r\n\t\telem.getElementsByTagName(\"tbody\")[0] ||\r\n\t\t\telem.appendChild( elem.ownerDocument.createElement(\"tbody\") ) :\r\n\t\telem;\r\n}\r\n\r\n// Replace/restore the type attribute of script elements for safe DOM manipulation\r\nfunction disableScript( elem ) {\r\n\telem.type = (jQuery.find.attr( elem, \"type\" ) !== null) + \"/\" + elem.type;\r\n\treturn elem;\r\n}\r\nfunction restoreScript( elem ) {\r\n\tvar match = rscriptTypeMasked.exec( elem.type );\r\n\tif ( match ) {\r\n\t\telem.type = match[1];\r\n\t} else {\r\n\t\telem.removeAttribute(\"type\");\r\n\t}\r\n\treturn elem;\r\n}\r\n\r\n// Mark scripts as having already been evaluated\r\nfunction setGlobalEval( elems, refElements ) {\r\n\tvar elem,\r\n\t\ti = 0;\r\n\tfor ( ; (elem = elems[i]) != null; i++ ) {\r\n\t\tjQuery._data( elem, \"globalEval\", !refElements || jQuery._data( refElements[i], \"globalEval\" ) );\r\n\t}\r\n}\r\n\r\nfunction cloneCopyEvent( src, dest ) {\r\n\r\n\tif ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar type, i, l,\r\n\t\toldData = jQuery._data( src ),\r\n\t\tcurData = jQuery._data( dest, oldData ),\r\n\t\tevents = oldData.events;\r\n\r\n\tif ( events ) {\r\n\t\tdelete curData.handle;\r\n\t\tcurData.events = {};\r\n\r\n\t\tfor ( type in events ) {\r\n\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\r\n\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// make the cloned public data object a copy from the original\r\n\tif ( curData.data ) {\r\n\t\tcurData.data = jQuery.extend( {}, curData.data );\r\n\t}\r\n}\r\n\r\nfunction fixCloneNodeIssues( src, dest ) {\r\n\tvar nodeName, e, data;\r\n\r\n\t// We do not need to do anything for non-Elements\r\n\tif ( dest.nodeType !== 1 ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tnodeName = dest.nodeName.toLowerCase();\r\n\r\n\t// IE6-8 copies events bound via attachEvent when using cloneNode.\r\n\tif ( !support.noCloneEvent && dest[ jQuery.expando ] ) {\r\n\t\tdata = jQuery._data( dest );\r\n\r\n\t\tfor ( e in data.events ) {\r\n\t\t\tjQuery.removeEvent( dest, e, data.handle );\r\n\t\t}\r\n\r\n\t\t// Event data gets referenced instead of copied if the expando gets copied too\r\n\t\tdest.removeAttribute( jQuery.expando );\r\n\t}\r\n\r\n\t// IE blanks contents when cloning scripts, and tries to evaluate newly-set text\r\n\tif ( nodeName === \"script\" && dest.text !== src.text ) {\r\n\t\tdisableScript( dest ).text = src.text;\r\n\t\trestoreScript( dest );\r\n\r\n\t// IE6-10 improperly clones children of object elements using classid.\r\n\t// IE10 throws NoModificationAllowedError if parent is null, #12132.\r\n\t} else if ( nodeName === \"object\" ) {\r\n\t\tif ( dest.parentNode ) {\r\n\t\t\tdest.outerHTML = src.outerHTML;\r\n\t\t}\r\n\r\n\t\t// This path appears unavoidable for IE9. When cloning an object\r\n\t\t// element in IE9, the outerHTML strategy above is not sufficient.\r\n\t\t// If the src has innerHTML and the destination does not,\r\n\t\t// copy the src.innerHTML into the dest.innerHTML. #10324\r\n\t\tif ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {\r\n\t\t\tdest.innerHTML = src.innerHTML;\r\n\t\t}\r\n\r\n\t} else if ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\r\n\t\t// IE6-8 fails to persist the checked state of a cloned checkbox\r\n\t\t// or radio button. Worse, IE6-7 fail to give the cloned element\r\n\t\t// a checked appearance if the defaultChecked value isn't also set\r\n\r\n\t\tdest.defaultChecked = dest.checked = src.checked;\r\n\r\n\t\t// IE6-7 get confused and end up setting the value of a cloned\r\n\t\t// checkbox/radio button to an empty string instead of \"on\"\r\n\t\tif ( dest.value !== src.value ) {\r\n\t\t\tdest.value = src.value;\r\n\t\t}\r\n\r\n\t// IE6-8 fails to return the selected option to the default selected\r\n\t// state when cloning options\r\n\t} else if ( nodeName === \"option\" ) {\r\n\t\tdest.defaultSelected = dest.selected = src.defaultSelected;\r\n\r\n\t// IE6-8 fails to set the defaultValue to the correct value when\r\n\t// cloning other types of input fields\r\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\r\n\t\tdest.defaultValue = src.defaultValue;\r\n\t}\r\n}\r\n\r\njQuery.extend({\r\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\r\n\t\tvar destElements, node, clone, i, srcElements,\r\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\r\n\r\n\t\tif ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( \"<\" + elem.nodeName + \">\" ) ) {\r\n\t\t\tclone = elem.cloneNode( true );\r\n\r\n\t\t// IE<=8 does not properly clone detached, unknown element nodes\r\n\t\t} else {\r\n\t\t\tfragmentDiv.innerHTML = elem.outerHTML;\r\n\t\t\tfragmentDiv.removeChild( clone = fragmentDiv.firstChild );\r\n\t\t}\r\n\r\n\t\tif ( (!support.noCloneEvent || !support.noCloneChecked) &&\r\n\t\t\t\t(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {\r\n\r\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\r\n\t\t\tdestElements = getAll( clone );\r\n\t\t\tsrcElements = getAll( elem );\r\n\r\n\t\t\t// Fix all IE cloning issues\r\n\t\t\tfor ( i = 0; (node = srcElements[i]) != null; ++i ) {\r\n\t\t\t\t// Ensure that the destination node is not null; Fixes #9587\r\n\t\t\t\tif ( destElements[i] ) {\r\n\t\t\t\t\tfixCloneNodeIssues( node, destElements[i] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Copy the events from the original to the clone\r\n\t\tif ( dataAndEvents ) {\r\n\t\t\tif ( deepDataAndEvents ) {\r\n\t\t\t\tsrcElements = srcElements || getAll( elem );\r\n\t\t\t\tdestElements = destElements || getAll( clone );\r\n\r\n\t\t\t\tfor ( i = 0; (node = srcElements[i]) != null; i++ ) {\r\n\t\t\t\t\tcloneCopyEvent( node, destElements[i] );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcloneCopyEvent( elem, clone );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Preserve script evaluation history\r\n\t\tdestElements = getAll( clone, \"script\" );\r\n\t\tif ( destElements.length > 0 ) {\r\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\r\n\t\t}\r\n\r\n\t\tdestElements = srcElements = node = null;\r\n\r\n\t\t// Return the cloned set\r\n\t\treturn clone;\r\n\t},\r\n\r\n\tbuildFragment: function( elems, context, scripts, selection ) {\r\n\t\tvar j, elem, contains,\r\n\t\t\ttmp, tag, tbody, wrap,\r\n\t\t\tl = elems.length,\r\n\r\n\t\t\t// Ensure a safe fragment\r\n\t\t\tsafe = createSafeFragment( context ),\r\n\r\n\t\t\tnodes = [],\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; i < l; i++ ) {\r\n\t\t\telem = elems[ i ];\r\n\r\n\t\t\tif ( elem || elem === 0 ) {\r\n\r\n\t\t\t\t// Add nodes directly\r\n\t\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\r\n\t\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\r\n\r\n\t\t\t\t// Convert non-html into a text node\r\n\t\t\t\t} else if ( !rhtml.test( elem ) ) {\r\n\t\t\t\t\tnodes.push( context.createTextNode( elem ) );\r\n\r\n\t\t\t\t// Convert html into DOM nodes\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttmp = tmp || safe.appendChild( context.createElement(\"div\") );\r\n\r\n\t\t\t\t\t// Deserialize a standard representation\r\n\t\t\t\t\ttag = (rtagName.exec( elem ) || [ \"\", \"\" ])[ 1 ].toLowerCase();\r\n\t\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\r\n\r\n\t\t\t\t\ttmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, \"<$1></$2>\" ) + wrap[2];\r\n\r\n\t\t\t\t\t// Descend through wrappers to the right content\r\n\t\t\t\t\tj = wrap[0];\r\n\t\t\t\t\twhile ( j-- ) {\r\n\t\t\t\t\t\ttmp = tmp.lastChild;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Manually add leading whitespace removed by IE\r\n\t\t\t\t\tif ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {\r\n\t\t\t\t\t\tnodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Remove IE's autoinserted <tbody> from table fragments\r\n\t\t\t\t\tif ( !support.tbody ) {\r\n\r\n\t\t\t\t\t\t// String was a <table>, *may* have spurious <tbody>\r\n\t\t\t\t\t\telem = tag === \"table\" && !rtbody.test( elem ) ?\r\n\t\t\t\t\t\t\ttmp.firstChild :\r\n\r\n\t\t\t\t\t\t\t// String was a bare <thead> or <tfoot>\r\n\t\t\t\t\t\t\twrap[1] === \"<table>\" && !rtbody.test( elem ) ?\r\n\t\t\t\t\t\t\t\ttmp :\r\n\t\t\t\t\t\t\t\t0;\r\n\r\n\t\t\t\t\t\tj = elem && elem.childNodes.length;\r\n\t\t\t\t\t\twhile ( j-- ) {\r\n\t\t\t\t\t\t\tif ( jQuery.nodeName( (tbody = elem.childNodes[j]), \"tbody\" ) && !tbody.childNodes.length ) {\r\n\t\t\t\t\t\t\t\telem.removeChild( tbody );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\r\n\r\n\t\t\t\t\t// Fix #12392 for WebKit and IE > 9\r\n\t\t\t\t\ttmp.textContent = \"\";\r\n\r\n\t\t\t\t\t// Fix #12392 for oldIE\r\n\t\t\t\t\twhile ( tmp.firstChild ) {\r\n\t\t\t\t\t\ttmp.removeChild( tmp.firstChild );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Remember the top-level container for proper cleanup\r\n\t\t\t\t\ttmp = safe.lastChild;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fix #11356: Clear elements from fragment\r\n\t\tif ( tmp ) {\r\n\t\t\tsafe.removeChild( tmp );\r\n\t\t}\r\n\r\n\t\t// Reset defaultChecked for any radios and checkboxes\r\n\t\t// about to be appended to the DOM in IE 6/7 (#8060)\r\n\t\tif ( !support.appendChecked ) {\r\n\t\t\tjQuery.grep( getAll( nodes, \"input\" ), fixDefaultChecked );\r\n\t\t}\r\n\r\n\t\ti = 0;\r\n\t\twhile ( (elem = nodes[ i++ ]) ) {\r\n\r\n\t\t\t// #4087 - If origin and destination elements are the same, and this is\r\n\t\t\t// that element, do not do anything\r\n\t\t\tif ( selection && jQuery.inArray( elem, selection ) !== -1 ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\r\n\r\n\t\t\t// Append to fragment\r\n\t\t\ttmp = getAll( safe.appendChild( elem ), \"script\" );\r\n\r\n\t\t\t// Preserve script evaluation history\r\n\t\t\tif ( contains ) {\r\n\t\t\t\tsetGlobalEval( tmp );\r\n\t\t\t}\r\n\r\n\t\t\t// Capture executables\r\n\t\t\tif ( scripts ) {\r\n\t\t\t\tj = 0;\r\n\t\t\t\twhile ( (elem = tmp[ j++ ]) ) {\r\n\t\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\r\n\t\t\t\t\t\tscripts.push( elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttmp = null;\r\n\r\n\t\treturn safe;\r\n\t},\r\n\r\n\tcleanData: function( elems, /* internal */ acceptData ) {\r\n\t\tvar elem, type, id, data,\r\n\t\t\ti = 0,\r\n\t\t\tinternalKey = jQuery.expando,\r\n\t\t\tcache = jQuery.cache,\r\n\t\t\tdeleteExpando = support.deleteExpando,\r\n\t\t\tspecial = jQuery.event.special;\r\n\r\n\t\tfor ( ; (elem = elems[i]) != null; i++ ) {\r\n\t\t\tif ( acceptData || jQuery.acceptData( elem ) ) {\r\n\r\n\t\t\t\tid = elem[ internalKey ];\r\n\t\t\t\tdata = id && cache[ id ];\r\n\r\n\t\t\t\tif ( data ) {\r\n\t\t\t\t\tif ( data.events ) {\r\n\t\t\t\t\t\tfor ( type in data.events ) {\r\n\t\t\t\t\t\t\tif ( special[ type ] ) {\r\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\r\n\r\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Remove cache only if it was not already removed by jQuery.event.remove\r\n\t\t\t\t\tif ( cache[ id ] ) {\r\n\r\n\t\t\t\t\t\tdelete cache[ id ];\r\n\r\n\t\t\t\t\t\t// IE does not allow us to delete expando properties from nodes,\r\n\t\t\t\t\t\t// nor does it have a removeAttribute function on Document nodes;\r\n\t\t\t\t\t\t// we must handle all of these cases\r\n\t\t\t\t\t\tif ( deleteExpando ) {\r\n\t\t\t\t\t\t\tdelete elem[ internalKey ];\r\n\r\n\t\t\t\t\t\t} else if ( typeof elem.removeAttribute !== strundefined ) {\r\n\t\t\t\t\t\t\telem.removeAttribute( internalKey );\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telem[ internalKey ] = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdeletedIds.push( id );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\njQuery.fn.extend({\r\n\ttext: function( value ) {\r\n\t\treturn access( this, function( value ) {\r\n\t\t\treturn value === undefined ?\r\n\t\t\t\tjQuery.text( this ) :\r\n\t\t\t\tthis.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );\r\n\t\t}, null, value, arguments.length );\r\n\t},\r\n\r\n\tappend: function() {\r\n\t\treturn this.domManip( arguments, function( elem ) {\r\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\tvar target = manipulationTarget( this, elem );\r\n\t\t\t\ttarget.appendChild( elem );\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tprepend: function() {\r\n\t\treturn this.domManip( arguments, function( elem ) {\r\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\tvar target = manipulationTarget( this, elem );\r\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tbefore: function() {\r\n\t\treturn this.domManip( arguments, function( elem ) {\r\n\t\t\tif ( this.parentNode ) {\r\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tafter: function() {\r\n\t\treturn this.domManip( arguments, function( elem ) {\r\n\t\t\tif ( this.parentNode ) {\r\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tremove: function( selector, keepData /* Internal Use Only */ ) {\r\n\t\tvar elem,\r\n\t\t\telems = selector ? jQuery.filter( selector, this ) : this,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; (elem = elems[i]) != null; i++ ) {\r\n\r\n\t\t\tif ( !keepData && elem.nodeType === 1 ) {\r\n\t\t\t\tjQuery.cleanData( getAll( elem ) );\r\n\t\t\t}\r\n\r\n\t\t\tif ( elem.parentNode ) {\r\n\t\t\t\tif ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {\r\n\t\t\t\t\tsetGlobalEval( getAll( elem, \"script\" ) );\r\n\t\t\t\t}\r\n\t\t\t\telem.parentNode.removeChild( elem );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tempty: function() {\r\n\t\tvar elem,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; (elem = this[i]) != null; i++ ) {\r\n\t\t\t// Remove element nodes and prevent memory leaks\r\n\t\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\r\n\t\t\t}\r\n\r\n\t\t\t// Remove any remaining nodes\r\n\t\t\twhile ( elem.firstChild ) {\r\n\t\t\t\telem.removeChild( elem.firstChild );\r\n\t\t\t}\r\n\r\n\t\t\t// If this is a select, ensure that it displays empty (#12336)\r\n\t\t\t// Support: IE<9\r\n\t\t\tif ( elem.options && jQuery.nodeName( elem, \"select\" ) ) {\r\n\t\t\t\telem.options.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\r\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\r\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\r\n\r\n\t\treturn this.map(function() {\r\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\r\n\t\t});\r\n\t},\r\n\r\n\thtml: function( value ) {\r\n\t\treturn access( this, function( value ) {\r\n\t\t\tvar elem = this[ 0 ] || {},\r\n\t\t\t\ti = 0,\r\n\t\t\t\tl = this.length;\r\n\r\n\t\t\tif ( value === undefined ) {\r\n\t\t\t\treturn elem.nodeType === 1 ?\r\n\t\t\t\t\telem.innerHTML.replace( rinlinejQuery, \"\" ) :\r\n\t\t\t\t\tundefined;\r\n\t\t\t}\r\n\r\n\t\t\t// See if we can take a shortcut and just use innerHTML\r\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\r\n\t\t\t\t( support.htmlSerialize || !rnoshimcache.test( value )  ) &&\r\n\t\t\t\t( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&\r\n\t\t\t\t!wrapMap[ (rtagName.exec( value ) || [ \"\", \"\" ])[ 1 ].toLowerCase() ] ) {\r\n\r\n\t\t\t\tvalue = value.replace( rxhtmlTag, \"<$1></$2>\" );\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tfor (; i < l; i++ ) {\r\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\r\n\t\t\t\t\t\telem = this[i] || {};\r\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\r\n\t\t\t\t\t\t\telem.innerHTML = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telem = 0;\r\n\r\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\r\n\t\t\t\t} catch(e) {}\r\n\t\t\t}\r\n\r\n\t\t\tif ( elem ) {\r\n\t\t\t\tthis.empty().append( value );\r\n\t\t\t}\r\n\t\t}, null, value, arguments.length );\r\n\t},\r\n\r\n\treplaceWith: function() {\r\n\t\tvar arg = arguments[ 0 ];\r\n\r\n\t\t// Make the changes, replacing each context element with the new content\r\n\t\tthis.domManip( arguments, function( elem ) {\r\n\t\t\targ = this.parentNode;\r\n\r\n\t\t\tjQuery.cleanData( getAll( this ) );\r\n\r\n\t\t\tif ( arg ) {\r\n\t\t\t\targ.replaceChild( elem, this );\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Force removal if there was no new content (e.g., from empty arguments)\r\n\t\treturn arg && (arg.length || arg.nodeType) ? this : this.remove();\r\n\t},\r\n\r\n\tdetach: function( selector ) {\r\n\t\treturn this.remove( selector, true );\r\n\t},\r\n\r\n\tdomManip: function( args, callback ) {\r\n\r\n\t\t// Flatten any nested arrays\r\n\t\targs = concat.apply( [], args );\r\n\r\n\t\tvar first, node, hasScripts,\r\n\t\t\tscripts, doc, fragment,\r\n\t\t\ti = 0,\r\n\t\t\tl = this.length,\r\n\t\t\tset = this,\r\n\t\t\tiNoClone = l - 1,\r\n\t\t\tvalue = args[0],\r\n\t\t\tisFunction = jQuery.isFunction( value );\r\n\r\n\t\t// We can't cloneNode fragments that contain checked, in WebKit\r\n\t\tif ( isFunction ||\r\n\t\t\t\t( l > 1 && typeof value === \"string\" &&\r\n\t\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\r\n\t\t\treturn this.each(function( index ) {\r\n\t\t\t\tvar self = set.eq( index );\r\n\t\t\t\tif ( isFunction ) {\r\n\t\t\t\t\targs[0] = value.call( this, index, self.html() );\r\n\t\t\t\t}\r\n\t\t\t\tself.domManip( args, callback );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif ( l ) {\r\n\t\t\tfragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );\r\n\t\t\tfirst = fragment.firstChild;\r\n\r\n\t\t\tif ( fragment.childNodes.length === 1 ) {\r\n\t\t\t\tfragment = first;\r\n\t\t\t}\r\n\r\n\t\t\tif ( first ) {\r\n\t\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\r\n\t\t\t\thasScripts = scripts.length;\r\n\r\n\t\t\t\t// Use the original fragment for the last item instead of the first because it can end up\r\n\t\t\t\t// being emptied incorrectly in certain situations (#8070).\r\n\t\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\t\tnode = fragment;\r\n\r\n\t\t\t\t\tif ( i !== iNoClone ) {\r\n\t\t\t\t\t\tnode = jQuery.clone( node, true, true );\r\n\r\n\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\r\n\t\t\t\t\t\tif ( hasScripts ) {\r\n\t\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcallback.call( this[i], node, i );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasScripts ) {\r\n\t\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\r\n\r\n\t\t\t\t\t// Reenable scripts\r\n\t\t\t\t\tjQuery.map( scripts, restoreScript );\r\n\r\n\t\t\t\t\t// Evaluate executable scripts on first document insertion\r\n\t\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\r\n\t\t\t\t\t\tnode = scripts[ i ];\r\n\t\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\r\n\t\t\t\t\t\t\t!jQuery._data( node, \"globalEval\" ) && jQuery.contains( doc, node ) ) {\r\n\r\n\t\t\t\t\t\t\tif ( node.src ) {\r\n\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\r\n\t\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\r\n\t\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tjQuery.globalEval( ( node.text || node.textContent || node.innerHTML || \"\" ).replace( rcleanScript, \"\" ) );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Fix #11809: Avoid leaking memory\r\n\t\t\t\tfragment = first = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n});\r\n\r\njQuery.each({\r\n\tappendTo: \"append\",\r\n\tprependTo: \"prepend\",\r\n\tinsertBefore: \"before\",\r\n\tinsertAfter: \"after\",\r\n\treplaceAll: \"replaceWith\"\r\n}, function( name, original ) {\r\n\tjQuery.fn[ name ] = function( selector ) {\r\n\t\tvar elems,\r\n\t\t\ti = 0,\r\n\t\t\tret = [],\r\n\t\t\tinsert = jQuery( selector ),\r\n\t\t\tlast = insert.length - 1;\r\n\r\n\t\tfor ( ; i <= last; i++ ) {\r\n\t\t\telems = i === last ? this : this.clone(true);\r\n\t\t\tjQuery( insert[i] )[ original ]( elems );\r\n\r\n\t\t\t// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\r\n\t\t\tpush.apply( ret, elems.get() );\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( ret );\r\n\t};\r\n});\r\n\r\n\r\nvar iframe,\r\n\telemdisplay = {};\r\n\r\n/**\r\n * Retrieve the actual display of a element\r\n * @param {String} name nodeName of the element\r\n * @param {Object} doc Document object\r\n */\r\n// Called only from within defaultDisplay\r\nfunction actualDisplay( name, doc ) {\r\n\tvar style,\r\n\t\telem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\r\n\r\n\t\t// getDefaultComputedStyle might be reliably used only on attached element\r\n\t\tdisplay = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?\r\n\r\n\t\t\t// Use of this method is a temporary fix (more like optmization) until something better comes along,\r\n\t\t\t// since it was removed from specification and supported only in FF\r\n\t\t\tstyle.display : jQuery.css( elem[ 0 ], \"display\" );\r\n\r\n\t// We don't have any data stored on the element,\r\n\t// so use \"detach\" method as fast way to get rid of the element\r\n\telem.detach();\r\n\r\n\treturn display;\r\n}\r\n\r\n/**\r\n * Try to determine the default display value of an element\r\n * @param {String} nodeName\r\n */\r\nfunction defaultDisplay( nodeName ) {\r\n\tvar doc = document,\r\n\t\tdisplay = elemdisplay[ nodeName ];\r\n\r\n\tif ( !display ) {\r\n\t\tdisplay = actualDisplay( nodeName, doc );\r\n\r\n\t\t// If the simple way fails, read from inside an iframe\r\n\t\tif ( display === \"none\" || !display ) {\r\n\r\n\t\t\t// Use the already-created iframe if possible\r\n\t\t\tiframe = (iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" )).appendTo( doc.documentElement );\r\n\r\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\r\n\t\t\tdoc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;\r\n\r\n\t\t\t// Support: IE\r\n\t\t\tdoc.write();\r\n\t\t\tdoc.close();\r\n\r\n\t\t\tdisplay = actualDisplay( nodeName, doc );\r\n\t\t\tiframe.detach();\r\n\t\t}\r\n\r\n\t\t// Store the correct default display\r\n\t\telemdisplay[ nodeName ] = display;\r\n\t}\r\n\r\n\treturn display;\r\n}\r\n\r\n\r\n(function() {\r\n\tvar shrinkWrapBlocksVal;\r\n\r\n\tsupport.shrinkWrapBlocks = function() {\r\n\t\tif ( shrinkWrapBlocksVal != null ) {\r\n\t\t\treturn shrinkWrapBlocksVal;\r\n\t\t}\r\n\r\n\t\t// Will be changed later if needed.\r\n\t\tshrinkWrapBlocksVal = false;\r\n\r\n\t\t// Minified: var b,c,d\r\n\t\tvar div, body, container;\r\n\r\n\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\r\n\t\tif ( !body || !body.style ) {\r\n\t\t\t// Test fired too early or in an unsupported environment, exit.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Setup\r\n\t\tdiv = document.createElement( \"div\" );\r\n\t\tcontainer = document.createElement( \"div\" );\r\n\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\r\n\t\tbody.appendChild( container ).appendChild( div );\r\n\r\n\t\t// Support: IE6\r\n\t\t// Check if elements with layout shrink-wrap their children\r\n\t\tif ( typeof div.style.zoom !== strundefined ) {\r\n\t\t\t// Reset CSS: box-sizing; display; margin; border\r\n\t\t\tdiv.style.cssText =\r\n\t\t\t\t// Support: Firefox<29, Android 2.3\r\n\t\t\t\t// Vendor-prefix box-sizing\r\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" +\r\n\t\t\t\t\"box-sizing:content-box;display:block;margin:0;border:0;\" +\r\n\t\t\t\t\"padding:1px;width:1px;zoom:1\";\r\n\t\t\tdiv.appendChild( document.createElement( \"div\" ) ).style.width = \"5px\";\r\n\t\t\tshrinkWrapBlocksVal = div.offsetWidth !== 3;\r\n\t\t}\r\n\r\n\t\tbody.removeChild( container );\r\n\r\n\t\treturn shrinkWrapBlocksVal;\r\n\t};\r\n\r\n})();\r\nvar rmargin = (/^margin/);\r\n\r\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\r\n\r\n\r\n\r\nvar getStyles, curCSS,\r\n\trposition = /^(top|right|bottom|left)$/;\r\n\r\nif ( window.getComputedStyle ) {\r\n\tgetStyles = function( elem ) {\r\n\t\treturn elem.ownerDocument.defaultView.getComputedStyle( elem, null );\r\n\t};\r\n\r\n\tcurCSS = function( elem, name, computed ) {\r\n\t\tvar width, minWidth, maxWidth, ret,\r\n\t\t\tstyle = elem.style;\r\n\r\n\t\tcomputed = computed || getStyles( elem );\r\n\r\n\t\t// getPropertyValue is only needed for .css('filter') in IE9, see #12537\r\n\t\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\r\n\r\n\t\tif ( computed ) {\r\n\r\n\t\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\r\n\t\t\t\tret = jQuery.style( elem, name );\r\n\t\t\t}\r\n\r\n\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\r\n\t\t\t// Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right\r\n\t\t\t// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\r\n\t\t\t// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\r\n\t\t\tif ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {\r\n\r\n\t\t\t\t// Remember the original values\r\n\t\t\t\twidth = style.width;\r\n\t\t\t\tminWidth = style.minWidth;\r\n\t\t\t\tmaxWidth = style.maxWidth;\r\n\r\n\t\t\t\t// Put in the new values to get a computed value out\r\n\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\r\n\t\t\t\tret = computed.width;\r\n\r\n\t\t\t\t// Revert the changed values\r\n\t\t\t\tstyle.width = width;\r\n\t\t\t\tstyle.minWidth = minWidth;\r\n\t\t\t\tstyle.maxWidth = maxWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Support: IE\r\n\t\t// IE returns zIndex value as an integer.\r\n\t\treturn ret === undefined ?\r\n\t\t\tret :\r\n\t\t\tret + \"\";\r\n\t};\r\n} else if ( document.documentElement.currentStyle ) {\r\n\tgetStyles = function( elem ) {\r\n\t\treturn elem.currentStyle;\r\n\t};\r\n\r\n\tcurCSS = function( elem, name, computed ) {\r\n\t\tvar left, rs, rsLeft, ret,\r\n\t\t\tstyle = elem.style;\r\n\r\n\t\tcomputed = computed || getStyles( elem );\r\n\t\tret = computed ? computed[ name ] : undefined;\r\n\r\n\t\t// Avoid setting ret to empty string here\r\n\t\t// so we don't default to auto\r\n\t\tif ( ret == null && style && style[ name ] ) {\r\n\t\t\tret = style[ name ];\r\n\t\t}\r\n\r\n\t\t// From the awesome hack by Dean Edwards\r\n\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\r\n\r\n\t\t// If we're not dealing with a regular pixel number\r\n\t\t// but a number that has a weird ending, we need to convert it to pixels\r\n\t\t// but not position css attributes, as those are proportional to the parent element instead\r\n\t\t// and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem\r\n\t\tif ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {\r\n\r\n\t\t\t// Remember the original values\r\n\t\t\tleft = style.left;\r\n\t\t\trs = elem.runtimeStyle;\r\n\t\t\trsLeft = rs && rs.left;\r\n\r\n\t\t\t// Put in the new values to get a computed value out\r\n\t\t\tif ( rsLeft ) {\r\n\t\t\t\trs.left = elem.currentStyle.left;\r\n\t\t\t}\r\n\t\t\tstyle.left = name === \"fontSize\" ? \"1em\" : ret;\r\n\t\t\tret = style.pixelLeft + \"px\";\r\n\r\n\t\t\t// Revert the changed values\r\n\t\t\tstyle.left = left;\r\n\t\t\tif ( rsLeft ) {\r\n\t\t\t\trs.left = rsLeft;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Support: IE\r\n\t\t// IE returns zIndex value as an integer.\r\n\t\treturn ret === undefined ?\r\n\t\t\tret :\r\n\t\t\tret + \"\" || \"auto\";\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\nfunction addGetHookIf( conditionFn, hookFn ) {\r\n\t// Define the hook, we'll check on the first run if it's really needed.\r\n\treturn {\r\n\t\tget: function() {\r\n\t\t\tvar condition = conditionFn();\r\n\r\n\t\t\tif ( condition == null ) {\r\n\t\t\t\t// The test was not ready at this point; screw the hook this time\r\n\t\t\t\t// but check again when needed next time.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( condition ) {\r\n\t\t\t\t// Hook not needed (or it's not possible to use it due to missing dependency),\r\n\t\t\t\t// remove it.\r\n\t\t\t\t// Since there are no other hooks for marginRight, remove the whole object.\r\n\t\t\t\tdelete this.get;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\r\n\r\n\t\t\treturn (this.get = hookFn).apply( this, arguments );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n\r\n(function() {\r\n\t// Minified: var b,c,d,e,f,g, h,i\r\n\tvar div, style, a, pixelPositionVal, boxSizingReliableVal,\r\n\t\treliableHiddenOffsetsVal, reliableMarginRightVal;\r\n\r\n\t// Setup\r\n\tdiv = document.createElement( \"div\" );\r\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\r\n\ta = div.getElementsByTagName( \"a\" )[ 0 ];\r\n\tstyle = a && a.style;\r\n\r\n\t// Finish early in limited (non-browser) environments\r\n\tif ( !style ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tstyle.cssText = \"float:left;opacity:.5\";\r\n\r\n\t// Support: IE<9\r\n\t// Make sure that element opacity exists (as opposed to filter)\r\n\tsupport.opacity = style.opacity === \"0.5\";\r\n\r\n\t// Verify style float existence\r\n\t// (IE uses styleFloat instead of cssFloat)\r\n\tsupport.cssFloat = !!style.cssFloat;\r\n\r\n\tdiv.style.backgroundClip = \"content-box\";\r\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\r\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\r\n\r\n\t// Support: Firefox<29, Android 2.3\r\n\t// Vendor-prefix box-sizing\r\n\tsupport.boxSizing = style.boxSizing === \"\" || style.MozBoxSizing === \"\" ||\r\n\t\tstyle.WebkitBoxSizing === \"\";\r\n\r\n\tjQuery.extend(support, {\r\n\t\treliableHiddenOffsets: function() {\r\n\t\t\tif ( reliableHiddenOffsetsVal == null ) {\r\n\t\t\t\tcomputeStyleTests();\r\n\t\t\t}\r\n\t\t\treturn reliableHiddenOffsetsVal;\r\n\t\t},\r\n\r\n\t\tboxSizingReliable: function() {\r\n\t\t\tif ( boxSizingReliableVal == null ) {\r\n\t\t\t\tcomputeStyleTests();\r\n\t\t\t}\r\n\t\t\treturn boxSizingReliableVal;\r\n\t\t},\r\n\r\n\t\tpixelPosition: function() {\r\n\t\t\tif ( pixelPositionVal == null ) {\r\n\t\t\t\tcomputeStyleTests();\r\n\t\t\t}\r\n\t\t\treturn pixelPositionVal;\r\n\t\t},\r\n\r\n\t\t// Support: Android 2.3\r\n\t\treliableMarginRight: function() {\r\n\t\t\tif ( reliableMarginRightVal == null ) {\r\n\t\t\t\tcomputeStyleTests();\r\n\t\t\t}\r\n\t\t\treturn reliableMarginRightVal;\r\n\t\t}\r\n\t});\r\n\r\n\tfunction computeStyleTests() {\r\n\t\t// Minified: var b,c,d,j\r\n\t\tvar div, body, container, contents;\r\n\r\n\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\r\n\t\tif ( !body || !body.style ) {\r\n\t\t\t// Test fired too early or in an unsupported environment, exit.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Setup\r\n\t\tdiv = document.createElement( \"div\" );\r\n\t\tcontainer = document.createElement( \"div\" );\r\n\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\r\n\t\tbody.appendChild( container ).appendChild( div );\r\n\r\n\t\tdiv.style.cssText =\r\n\t\t\t// Support: Firefox<29, Android 2.3\r\n\t\t\t// Vendor-prefix box-sizing\r\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;\" +\r\n\t\t\t\"box-sizing:border-box;display:block;margin-top:1%;top:1%;\" +\r\n\t\t\t\"border:1px;padding:1px;width:4px;position:absolute\";\r\n\r\n\t\t// Support: IE<9\r\n\t\t// Assume reasonable values in the absence of getComputedStyle\r\n\t\tpixelPositionVal = boxSizingReliableVal = false;\r\n\t\treliableMarginRightVal = true;\r\n\r\n\t\t// Check for getComputedStyle so that this code is not run in IE<9.\r\n\t\tif ( window.getComputedStyle ) {\r\n\t\t\tpixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== \"1%\";\r\n\t\t\tboxSizingReliableVal =\r\n\t\t\t\t( window.getComputedStyle( div, null ) || { width: \"4px\" } ).width === \"4px\";\r\n\r\n\t\t\t// Support: Android 2.3\r\n\t\t\t// Div with explicit width and no margin-right incorrectly\r\n\t\t\t// gets computed margin-right based on width of container (#3333)\r\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\r\n\t\t\tcontents = div.appendChild( document.createElement( \"div\" ) );\r\n\r\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\r\n\t\t\tcontents.style.cssText = div.style.cssText =\r\n\t\t\t\t// Support: Firefox<29, Android 2.3\r\n\t\t\t\t// Vendor-prefix box-sizing\r\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" +\r\n\t\t\t\t\"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\r\n\t\t\tcontents.style.marginRight = contents.style.width = \"0\";\r\n\t\t\tdiv.style.width = \"1px\";\r\n\r\n\t\t\treliableMarginRightVal =\r\n\t\t\t\t!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );\r\n\t\t}\r\n\r\n\t\t// Support: IE8\r\n\t\t// Check if table cells still have offsetWidth/Height when they are set\r\n\t\t// to display:none and there are still other visible table cells in a\r\n\t\t// table row; if so, offsetWidth/Height are not reliable for use when\r\n\t\t// determining if an element has been hidden directly using\r\n\t\t// display:none (it is still safe to use offsets if a parent element is\r\n\t\t// hidden; don safety goggles and see bug #4512 for more information).\r\n\t\tdiv.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\r\n\t\tcontents = div.getElementsByTagName( \"td\" );\r\n\t\tcontents[ 0 ].style.cssText = \"margin:0;border:0;padding:0;display:none\";\r\n\t\treliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;\r\n\t\tif ( reliableHiddenOffsetsVal ) {\r\n\t\t\tcontents[ 0 ].style.display = \"\";\r\n\t\t\tcontents[ 1 ].style.display = \"none\";\r\n\t\t\treliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;\r\n\t\t}\r\n\r\n\t\tbody.removeChild( container );\r\n\t}\r\n\r\n})();\r\n\r\n\r\n// A method for quickly swapping in/out CSS properties to get correct calculations.\r\njQuery.swap = function( elem, options, callback, args ) {\r\n\tvar ret, name,\r\n\t\told = {};\r\n\r\n\t// Remember the old values, and insert the new ones\r\n\tfor ( name in options ) {\r\n\t\told[ name ] = elem.style[ name ];\r\n\t\telem.style[ name ] = options[ name ];\r\n\t}\r\n\r\n\tret = callback.apply( elem, args || [] );\r\n\r\n\t// Revert the old values\r\n\tfor ( name in options ) {\r\n\t\telem.style[ name ] = old[ name ];\r\n\t}\r\n\r\n\treturn ret;\r\n};\r\n\r\n\r\nvar\r\n\t\tralpha = /alpha\\([^)]*\\)/i,\r\n\tropacity = /opacity\\s*=\\s*([^)]*)/,\r\n\r\n\t// swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\r\n\t// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\r\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\r\n\trnumsplit = new RegExp( \"^(\" + pnum + \")(.*)$\", \"i\" ),\r\n\trrelNum = new RegExp( \"^([+-])=(\" + pnum + \")\", \"i\" ),\r\n\r\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\r\n\tcssNormalTransform = {\r\n\t\tletterSpacing: \"0\",\r\n\t\tfontWeight: \"400\"\r\n\t},\r\n\r\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ];\r\n\r\n\r\n// return a css property mapped to a potentially vendor prefixed property\r\nfunction vendorPropName( style, name ) {\r\n\r\n\t// shortcut for names that are not vendor prefixed\r\n\tif ( name in style ) {\r\n\t\treturn name;\r\n\t}\r\n\r\n\t// check for vendor prefixed names\r\n\tvar capName = name.charAt(0).toUpperCase() + name.slice(1),\r\n\t\torigName = name,\r\n\t\ti = cssPrefixes.length;\r\n\r\n\twhile ( i-- ) {\r\n\t\tname = cssPrefixes[ i ] + capName;\r\n\t\tif ( name in style ) {\r\n\t\t\treturn name;\r\n\t\t}\r\n\t}\r\n\r\n\treturn origName;\r\n}\r\n\r\nfunction showHide( elements, show ) {\r\n\tvar display, elem, hidden,\r\n\t\tvalues = [],\r\n\t\tindex = 0,\r\n\t\tlength = elements.length;\r\n\r\n\tfor ( ; index < length; index++ ) {\r\n\t\telem = elements[ index ];\r\n\t\tif ( !elem.style ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tvalues[ index ] = jQuery._data( elem, \"olddisplay\" );\r\n\t\tdisplay = elem.style.display;\r\n\t\tif ( show ) {\r\n\t\t\t// Reset the inline display of this element to learn if it is\r\n\t\t\t// being hidden by cascaded rules or not\r\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\r\n\t\t\t\telem.style.display = \"\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set elements which have been overridden with display: none\r\n\t\t\t// in a stylesheet to whatever the default browser style is\r\n\t\t\t// for such an element\r\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\r\n\t\t\t\tvalues[ index ] = jQuery._data( elem, \"olddisplay\", defaultDisplay(elem.nodeName) );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\thidden = isHidden( elem );\r\n\r\n\t\t\tif ( display && display !== \"none\" || !hidden ) {\r\n\t\t\t\tjQuery._data( elem, \"olddisplay\", hidden ? display : jQuery.css( elem, \"display\" ) );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the display of most of the elements in a second loop\r\n\t// to avoid the constant reflow\r\n\tfor ( index = 0; index < length; index++ ) {\r\n\t\telem = elements[ index ];\r\n\t\tif ( !elem.style ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\r\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\r\n\t\t}\r\n\t}\r\n\r\n\treturn elements;\r\n}\r\n\r\nfunction setPositiveNumber( elem, value, subtract ) {\r\n\tvar matches = rnumsplit.exec( value );\r\n\treturn matches ?\r\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\r\n\t\tMath.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || \"px\" ) :\r\n\t\tvalue;\r\n}\r\n\r\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\r\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\r\n\t\t// If we already have the right measurement, avoid augmentation\r\n\t\t4 :\r\n\t\t// Otherwise initialize for horizontal or vertical properties\r\n\t\tname === \"width\" ? 1 : 0,\r\n\r\n\t\tval = 0;\r\n\r\n\tfor ( ; i < 4; i += 2 ) {\r\n\t\t// both box models exclude margin, so add it if we want it\r\n\t\tif ( extra === \"margin\" ) {\r\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\r\n\t\t}\r\n\r\n\t\tif ( isBorderBox ) {\r\n\t\t\t// border-box includes padding, so remove it if we want content\r\n\t\t\tif ( extra === \"content\" ) {\r\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\r\n\t\t\t}\r\n\r\n\t\t\t// at this point, extra isn't border nor margin, so remove border\r\n\t\t\tif ( extra !== \"margin\" ) {\r\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// at this point, extra isn't content, so add padding\r\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\r\n\r\n\t\t\t// at this point, extra isn't content nor padding, so add border\r\n\t\t\tif ( extra !== \"padding\" ) {\r\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn val;\r\n}\r\n\r\nfunction getWidthOrHeight( elem, name, extra ) {\r\n\r\n\t// Start with offset property, which is equivalent to the border-box value\r\n\tvar valueIsBorderBox = true,\r\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\r\n\t\tstyles = getStyles( elem ),\r\n\t\tisBorderBox = support.boxSizing && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\r\n\r\n\t// some non-html elements return undefined for offsetWidth, so check for null/undefined\r\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\r\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\r\n\tif ( val <= 0 || val == null ) {\r\n\t\t// Fall back to computed then uncomputed css if necessary\r\n\t\tval = curCSS( elem, name, styles );\r\n\t\tif ( val < 0 || val == null ) {\r\n\t\t\tval = elem.style[ name ];\r\n\t\t}\r\n\r\n\t\t// Computed unit is not pixels. Stop here and return.\r\n\t\tif ( rnumnonpx.test(val) ) {\r\n\t\t\treturn val;\r\n\t\t}\r\n\r\n\t\t// we need the check for style in case a browser which returns unreliable values\r\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\r\n\t\tvalueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );\r\n\r\n\t\t// Normalize \"\", auto, and prepare for extra\r\n\t\tval = parseFloat( val ) || 0;\r\n\t}\r\n\r\n\t// use the active box-sizing model to add/subtract irrelevant styles\r\n\treturn ( val +\r\n\t\taugmentWidthOrHeight(\r\n\t\t\telem,\r\n\t\t\tname,\r\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\r\n\t\t\tvalueIsBorderBox,\r\n\t\t\tstyles\r\n\t\t)\r\n\t) + \"px\";\r\n}\r\n\r\njQuery.extend({\r\n\t// Add in style property hooks for overriding the default\r\n\t// behavior of getting and setting a style property\r\n\tcssHooks: {\r\n\t\topacity: {\r\n\t\t\tget: function( elem, computed ) {\r\n\t\t\t\tif ( computed ) {\r\n\t\t\t\t\t// We should always get a number back from opacity\r\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\r\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Don't automatically add \"px\" to these possibly-unitless properties\r\n\tcssNumber: {\r\n\t\t\"columnCount\": true,\r\n\t\t\"fillOpacity\": true,\r\n\t\t\"flexGrow\": true,\r\n\t\t\"flexShrink\": true,\r\n\t\t\"fontWeight\": true,\r\n\t\t\"lineHeight\": true,\r\n\t\t\"opacity\": true,\r\n\t\t\"order\": true,\r\n\t\t\"orphans\": true,\r\n\t\t\"widows\": true,\r\n\t\t\"zIndex\": true,\r\n\t\t\"zoom\": true\r\n\t},\r\n\r\n\t// Add in properties whose names you wish to fix before\r\n\t// setting or getting the value\r\n\tcssProps: {\r\n\t\t// normalize float css property\r\n\t\t\"float\": support.cssFloat ? \"cssFloat\" : \"styleFloat\"\r\n\t},\r\n\r\n\t// Get and set the style property on a DOM Node\r\n\tstyle: function( elem, name, value, extra ) {\r\n\t\t// Don't set styles on text and comment nodes\r\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Make sure that we're working with the right name\r\n\t\tvar ret, type, hooks,\r\n\t\t\torigName = jQuery.camelCase( name ),\r\n\t\t\tstyle = elem.style;\r\n\r\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );\r\n\r\n\t\t// gets hook for the prefixed version\r\n\t\t// followed by the unprefixed version\r\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\r\n\r\n\t\t// Check if we're setting a value\r\n\t\tif ( value !== undefined ) {\r\n\t\t\ttype = typeof value;\r\n\r\n\t\t\t// convert relative number strings (+= or -=) to relative numbers. #7345\r\n\t\t\tif ( type === \"string\" && (ret = rrelNum.exec( value )) ) {\r\n\t\t\t\tvalue = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );\r\n\t\t\t\t// Fixes bug #9237\r\n\t\t\t\ttype = \"number\";\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure that null and NaN values aren't set. See: #7116\r\n\t\t\tif ( value == null || value !== value ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If a number was passed in, add 'px' to the (except for certain CSS properties)\r\n\t\t\tif ( type === \"number\" && !jQuery.cssNumber[ origName ] ) {\r\n\t\t\t\tvalue += \"px\";\r\n\t\t\t}\r\n\r\n\t\t\t// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\r\n\t\t\t// but it would mean to define eight (for every problematic property) identical functions\r\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0 ) {\r\n\t\t\t\tstyle[ name ] = \"inherit\";\r\n\t\t\t}\r\n\r\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\r\n\t\t\tif ( !hooks || !(\"set\" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {\r\n\r\n\t\t\t\t// Support: IE\r\n\t\t\t\t// Swallow errors from 'invalid' CSS values (#5509)\r\n\t\t\t\ttry {\r\n\t\t\t\t\tstyle[ name ] = value;\r\n\t\t\t\t} catch(e) {}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t// If a hook was provided get the non-computed value from there\r\n\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise just get the value from the style object\r\n\t\t\treturn style[ name ];\r\n\t\t}\r\n\t},\r\n\r\n\tcss: function( elem, name, extra, styles ) {\r\n\t\tvar num, val, hooks,\r\n\t\t\torigName = jQuery.camelCase( name );\r\n\r\n\t\t// Make sure that we're working with the right name\r\n\t\tname = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );\r\n\r\n\t\t// gets hook for the prefixed version\r\n\t\t// followed by the unprefixed version\r\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\r\n\r\n\t\t// If a hook was provided get the computed value from there\r\n\t\tif ( hooks && \"get\" in hooks ) {\r\n\t\t\tval = hooks.get( elem, true, extra );\r\n\t\t}\r\n\r\n\t\t// Otherwise, if a way to get the computed value exists, use that\r\n\t\tif ( val === undefined ) {\r\n\t\t\tval = curCSS( elem, name, styles );\r\n\t\t}\r\n\r\n\t\t//convert \"normal\" to computed value\r\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\r\n\t\t\tval = cssNormalTransform[ name ];\r\n\t\t}\r\n\r\n\t\t// Return, converting to number if forced or a qualifier was provided and val looks numeric\r\n\t\tif ( extra === \"\" || extra ) {\r\n\t\t\tnum = parseFloat( val );\r\n\t\t\treturn extra === true || jQuery.isNumeric( num ) ? num || 0 : val;\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n});\r\n\r\njQuery.each([ \"height\", \"width\" ], function( i, name ) {\r\n\tjQuery.cssHooks[ name ] = {\r\n\t\tget: function( elem, computed, extra ) {\r\n\t\t\tif ( computed ) {\r\n\t\t\t\t// certain elements can have dimension info if we invisibly show them\r\n\t\t\t\t// however, it must have a current display style that would benefit from this\r\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) && elem.offsetWidth === 0 ?\r\n\t\t\t\t\tjQuery.swap( elem, cssShow, function() {\r\n\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\r\n\t\t\t\t\t}) :\r\n\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tset: function( elem, value, extra ) {\r\n\t\t\tvar styles = extra && getStyles( elem );\r\n\t\t\treturn setPositiveNumber( elem, value, extra ?\r\n\t\t\t\taugmentWidthOrHeight(\r\n\t\t\t\t\telem,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\textra,\r\n\t\t\t\t\tsupport.boxSizing && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\r\n\t\t\t\t\tstyles\r\n\t\t\t\t) : 0\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n});\r\n\r\nif ( !support.opacity ) {\r\n\tjQuery.cssHooks.opacity = {\r\n\t\tget: function( elem, computed ) {\r\n\t\t\t// IE uses filters for opacity\r\n\t\t\treturn ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\" ) ?\r\n\t\t\t\t( 0.01 * parseFloat( RegExp.$1 ) ) + \"\" :\r\n\t\t\t\tcomputed ? \"1\" : \"\";\r\n\t\t},\r\n\r\n\t\tset: function( elem, value ) {\r\n\t\t\tvar style = elem.style,\r\n\t\t\t\tcurrentStyle = elem.currentStyle,\r\n\t\t\t\topacity = jQuery.isNumeric( value ) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\r\n\t\t\t\tfilter = currentStyle && currentStyle.filter || style.filter || \"\";\r\n\r\n\t\t\t// IE has trouble with opacity if it does not have layout\r\n\t\t\t// Force it by setting the zoom level\r\n\t\t\tstyle.zoom = 1;\r\n\r\n\t\t\t// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\r\n\t\t\t// if value === \"\", then remove inline opacity #12685\r\n\t\t\tif ( ( value >= 1 || value === \"\" ) &&\r\n\t\t\t\t\tjQuery.trim( filter.replace( ralpha, \"\" ) ) === \"\" &&\r\n\t\t\t\t\tstyle.removeAttribute ) {\r\n\r\n\t\t\t\t// Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\r\n\t\t\t\t// if \"filter:\" is present at all, clearType is disabled, we want to avoid this\r\n\t\t\t\t// style.removeAttribute is IE Only, but so apparently is this code path...\r\n\t\t\t\tstyle.removeAttribute( \"filter\" );\r\n\r\n\t\t\t\t// if there is no filter style applied in a css rule or unset inline opacity, we are done\r\n\t\t\t\tif ( value === \"\" || currentStyle && !currentStyle.filter ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise, set new filter values\r\n\t\t\tstyle.filter = ralpha.test( filter ) ?\r\n\t\t\t\tfilter.replace( ralpha, opacity ) :\r\n\t\t\t\tfilter + \" \" + opacity;\r\n\t\t}\r\n\t};\r\n}\r\n\r\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\r\n\tfunction( elem, computed ) {\r\n\t\tif ( computed ) {\r\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\r\n\t\t\t// Work around by temporarily setting element display to inline-block\r\n\t\t\treturn jQuery.swap( elem, { \"display\": \"inline-block\" },\r\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\r\n\t\t}\r\n\t}\r\n);\r\n\r\n// These hooks are used by animate to expand properties\r\njQuery.each({\r\n\tmargin: \"\",\r\n\tpadding: \"\",\r\n\tborder: \"Width\"\r\n}, function( prefix, suffix ) {\r\n\tjQuery.cssHooks[ prefix + suffix ] = {\r\n\t\texpand: function( value ) {\r\n\t\t\tvar i = 0,\r\n\t\t\t\texpanded = {},\r\n\r\n\t\t\t\t// assumes a single number if not a string\r\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [ value ];\r\n\r\n\t\t\tfor ( ; i < 4; i++ ) {\r\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\r\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\r\n\t\t\t}\r\n\r\n\t\t\treturn expanded;\r\n\t\t}\r\n\t};\r\n\r\n\tif ( !rmargin.test( prefix ) ) {\r\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\r\n\t}\r\n});\r\n\r\njQuery.fn.extend({\r\n\tcss: function( name, value ) {\r\n\t\treturn access( this, function( elem, name, value ) {\r\n\t\t\tvar styles, len,\r\n\t\t\t\tmap = {},\r\n\t\t\t\ti = 0;\r\n\r\n\t\t\tif ( jQuery.isArray( name ) ) {\r\n\t\t\t\tstyles = getStyles( elem );\r\n\t\t\t\tlen = name.length;\r\n\r\n\t\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn map;\r\n\t\t\t}\r\n\r\n\t\t\treturn value !== undefined ?\r\n\t\t\t\tjQuery.style( elem, name, value ) :\r\n\t\t\t\tjQuery.css( elem, name );\r\n\t\t}, name, value, arguments.length > 1 );\r\n\t},\r\n\tshow: function() {\r\n\t\treturn showHide( this, true );\r\n\t},\r\n\thide: function() {\r\n\t\treturn showHide( this );\r\n\t},\r\n\ttoggle: function( state ) {\r\n\t\tif ( typeof state === \"boolean\" ) {\r\n\t\t\treturn state ? this.show() : this.hide();\r\n\t\t}\r\n\r\n\t\treturn this.each(function() {\r\n\t\t\tif ( isHidden( this ) ) {\r\n\t\t\t\tjQuery( this ).show();\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this ).hide();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n\r\n\r\nfunction Tween( elem, options, prop, end, easing ) {\r\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\r\n}\r\njQuery.Tween = Tween;\r\n\r\nTween.prototype = {\r\n\tconstructor: Tween,\r\n\tinit: function( elem, options, prop, end, easing, unit ) {\r\n\t\tthis.elem = elem;\r\n\t\tthis.prop = prop;\r\n\t\tthis.easing = easing || \"swing\";\r\n\t\tthis.options = options;\r\n\t\tthis.start = this.now = this.cur();\r\n\t\tthis.end = end;\r\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\r\n\t},\r\n\tcur: function() {\r\n\t\tvar hooks = Tween.propHooks[ this.prop ];\r\n\r\n\t\treturn hooks && hooks.get ?\r\n\t\t\thooks.get( this ) :\r\n\t\t\tTween.propHooks._default.get( this );\r\n\t},\r\n\trun: function( percent ) {\r\n\t\tvar eased,\r\n\t\t\thooks = Tween.propHooks[ this.prop ];\r\n\r\n\t\tif ( this.options.duration ) {\r\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\r\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tthis.pos = eased = percent;\r\n\t\t}\r\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\r\n\r\n\t\tif ( this.options.step ) {\r\n\t\t\tthis.options.step.call( this.elem, this.now, this );\r\n\t\t}\r\n\r\n\t\tif ( hooks && hooks.set ) {\r\n\t\t\thooks.set( this );\r\n\t\t} else {\r\n\t\t\tTween.propHooks._default.set( this );\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\nTween.prototype.init.prototype = Tween.prototype;\r\n\r\nTween.propHooks = {\r\n\t_default: {\r\n\t\tget: function( tween ) {\r\n\t\t\tvar result;\r\n\r\n\t\t\tif ( tween.elem[ tween.prop ] != null &&\r\n\t\t\t\t(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {\r\n\t\t\t\treturn tween.elem[ tween.prop ];\r\n\t\t\t}\r\n\r\n\t\t\t// passing an empty string as a 3rd parameter to .css will automatically\r\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails\r\n\t\t\t// so, simple values such as \"10px\" are parsed to Float.\r\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as is.\r\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\r\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\r\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\r\n\t\t},\r\n\t\tset: function( tween ) {\r\n\t\t\t// use step hook for back compat - use cssHook if its there - use .style if its\r\n\t\t\t// available and use plain properties where available\r\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\r\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\r\n\t\t\t} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {\r\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\r\n\t\t\t} else {\r\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Support: IE <=9\r\n// Panic based approach to setting things on disconnected nodes\r\n\r\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\r\n\tset: function( tween ) {\r\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\r\n\t\t\ttween.elem[ tween.prop ] = tween.now;\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.easing = {\r\n\tlinear: function( p ) {\r\n\t\treturn p;\r\n\t},\r\n\tswing: function( p ) {\r\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\r\n\t}\r\n};\r\n\r\njQuery.fx = Tween.prototype.init;\r\n\r\n// Back Compat <1.8 extension point\r\njQuery.fx.step = {};\r\n\r\n\r\n\r\n\r\nvar\r\n\tfxNow, timerId,\r\n\trfxtypes = /^(?:toggle|show|hide)$/,\r\n\trfxnum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" ),\r\n\trrun = /queueHooks$/,\r\n\tanimationPrefilters = [ defaultPrefilter ],\r\n\ttweeners = {\r\n\t\t\"*\": [ function( prop, value ) {\r\n\t\t\tvar tween = this.createTween( prop, value ),\r\n\t\t\t\ttarget = tween.cur(),\r\n\t\t\t\tparts = rfxnum.exec( value ),\r\n\t\t\t\tunit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\r\n\r\n\t\t\t\t// Starting value computation is required for potential unit mismatches\r\n\t\t\t\tstart = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +target ) &&\r\n\t\t\t\t\trfxnum.exec( jQuery.css( tween.elem, prop ) ),\r\n\t\t\t\tscale = 1,\r\n\t\t\t\tmaxIterations = 20;\r\n\r\n\t\t\tif ( start && start[ 3 ] !== unit ) {\r\n\t\t\t\t// Trust units reported by jQuery.css\r\n\t\t\t\tunit = unit || start[ 3 ];\r\n\r\n\t\t\t\t// Make sure we update the tween properties later on\r\n\t\t\t\tparts = parts || [];\r\n\r\n\t\t\t\t// Iteratively approximate from a nonzero starting point\r\n\t\t\t\tstart = +target || 1;\r\n\r\n\t\t\t\tdo {\r\n\t\t\t\t\t// If previous iteration zeroed out, double until we get *something*\r\n\t\t\t\t\t// Use a string for doubling factor so we don't accidentally see scale as unchanged below\r\n\t\t\t\t\tscale = scale || \".5\";\r\n\r\n\t\t\t\t\t// Adjust and apply\r\n\t\t\t\t\tstart = start / scale;\r\n\t\t\t\t\tjQuery.style( tween.elem, prop, start + unit );\r\n\r\n\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\r\n\t\t\t\t// And breaking the loop if scale is unchanged or perfect, or if we've just had enough\r\n\t\t\t\t} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );\r\n\t\t\t}\r\n\r\n\t\t\t// Update tween properties\r\n\t\t\tif ( parts ) {\r\n\t\t\t\tstart = tween.start = +start || +target || 0;\r\n\t\t\t\ttween.unit = unit;\r\n\t\t\t\t// If a +=/-= token was provided, we're doing a relative animation\r\n\t\t\t\ttween.end = parts[ 1 ] ?\r\n\t\t\t\t\tstart + ( parts[ 1 ] + 1 ) * parts[ 2 ] :\r\n\t\t\t\t\t+parts[ 2 ];\r\n\t\t\t}\r\n\r\n\t\t\treturn tween;\r\n\t\t} ]\r\n\t};\r\n\r\n// Animations created synchronously will run synchronously\r\nfunction createFxNow() {\r\n\tsetTimeout(function() {\r\n\t\tfxNow = undefined;\r\n\t});\r\n\treturn ( fxNow = jQuery.now() );\r\n}\r\n\r\n// Generate parameters to create a standard animation\r\nfunction genFx( type, includeWidth ) {\r\n\tvar which,\r\n\t\tattrs = { height: type },\r\n\t\ti = 0;\r\n\r\n\t// if we include width, step value is 1 to do all cssExpand values,\r\n\t// if we don't include width, step value is 2 to skip over Left and Right\r\n\tincludeWidth = includeWidth ? 1 : 0;\r\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\r\n\t\twhich = cssExpand[ i ];\r\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\r\n\t}\r\n\r\n\tif ( includeWidth ) {\r\n\t\tattrs.opacity = attrs.width = type;\r\n\t}\r\n\r\n\treturn attrs;\r\n}\r\n\r\nfunction createTween( value, prop, animation ) {\r\n\tvar tween,\r\n\t\tcollection = ( tweeners[ prop ] || [] ).concat( tweeners[ \"*\" ] ),\r\n\t\tindex = 0,\r\n\t\tlength = collection.length;\r\n\tfor ( ; index < length; index++ ) {\r\n\t\tif ( (tween = collection[ index ].call( animation, prop, value )) ) {\r\n\r\n\t\t\t// we're done with this property\r\n\t\t\treturn tween;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction defaultPrefilter( elem, props, opts ) {\r\n\t/* jshint validthis: true */\r\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\r\n\t\tanim = this,\r\n\t\torig = {},\r\n\t\tstyle = elem.style,\r\n\t\thidden = elem.nodeType && isHidden( elem ),\r\n\t\tdataShow = jQuery._data( elem, \"fxshow\" );\r\n\r\n\t// handle queue: false promises\r\n\tif ( !opts.queue ) {\r\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\r\n\t\tif ( hooks.unqueued == null ) {\r\n\t\t\thooks.unqueued = 0;\r\n\t\t\toldfire = hooks.empty.fire;\r\n\t\t\thooks.empty.fire = function() {\r\n\t\t\t\tif ( !hooks.unqueued ) {\r\n\t\t\t\t\toldfire();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\thooks.unqueued++;\r\n\r\n\t\tanim.always(function() {\r\n\t\t\t// doing this makes sure that the complete handler will be called\r\n\t\t\t// before this completes\r\n\t\t\tanim.always(function() {\r\n\t\t\t\thooks.unqueued--;\r\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\r\n\t\t\t\t\thooks.empty.fire();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// height/width overflow pass\r\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\r\n\t\t// Make sure that nothing sneaks out\r\n\t\t// Record all 3 overflow attributes because IE does not\r\n\t\t// change the overflow attribute when overflowX and\r\n\t\t// overflowY are set to the same value\r\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\r\n\r\n\t\t// Set display property to inline-block for height/width\r\n\t\t// animations on inline elements that are having width/height animated\r\n\t\tdisplay = jQuery.css( elem, \"display\" );\r\n\r\n\t\t// Test default display if display is currently \"none\"\r\n\t\tcheckDisplay = display === \"none\" ?\r\n\t\t\tjQuery._data( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\r\n\r\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\r\n\r\n\t\t\t// inline-level elements accept inline-block;\r\n\t\t\t// block-level elements need to be inline with layout\r\n\t\t\tif ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === \"inline\" ) {\r\n\t\t\t\tstyle.display = \"inline-block\";\r\n\t\t\t} else {\r\n\t\t\t\tstyle.zoom = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif ( opts.overflow ) {\r\n\t\tstyle.overflow = \"hidden\";\r\n\t\tif ( !support.shrinkWrapBlocks() ) {\r\n\t\t\tanim.always(function() {\r\n\t\t\t\tstyle.overflow = opts.overflow[ 0 ];\r\n\t\t\t\tstyle.overflowX = opts.overflow[ 1 ];\r\n\t\t\t\tstyle.overflowY = opts.overflow[ 2 ];\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// show/hide pass\r\n\tfor ( prop in props ) {\r\n\t\tvalue = props[ prop ];\r\n\t\tif ( rfxtypes.exec( value ) ) {\r\n\t\t\tdelete props[ prop ];\r\n\t\t\ttoggle = toggle || value === \"toggle\";\r\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\r\n\r\n\t\t\t\t// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden\r\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\r\n\t\t\t\t\thidden = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\r\n\r\n\t\t// Any non-fx value stops us from restoring the original display value\r\n\t\t} else {\r\n\t\t\tdisplay = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tif ( !jQuery.isEmptyObject( orig ) ) {\r\n\t\tif ( dataShow ) {\r\n\t\t\tif ( \"hidden\" in dataShow ) {\r\n\t\t\t\thidden = dataShow.hidden;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdataShow = jQuery._data( elem, \"fxshow\", {} );\r\n\t\t}\r\n\r\n\t\t// store state if its toggle - enables .stop().toggle() to \"reverse\"\r\n\t\tif ( toggle ) {\r\n\t\t\tdataShow.hidden = !hidden;\r\n\t\t}\r\n\t\tif ( hidden ) {\r\n\t\t\tjQuery( elem ).show();\r\n\t\t} else {\r\n\t\t\tanim.done(function() {\r\n\t\t\t\tjQuery( elem ).hide();\r\n\t\t\t});\r\n\t\t}\r\n\t\tanim.done(function() {\r\n\t\t\tvar prop;\r\n\t\t\tjQuery._removeData( elem, \"fxshow\" );\r\n\t\t\tfor ( prop in orig ) {\r\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\r\n\t\t\t}\r\n\t\t});\r\n\t\tfor ( prop in orig ) {\r\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\r\n\r\n\t\t\tif ( !( prop in dataShow ) ) {\r\n\t\t\t\tdataShow[ prop ] = tween.start;\r\n\t\t\t\tif ( hidden ) {\r\n\t\t\t\t\ttween.end = tween.start;\r\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\r\n\t} else if ( (display === \"none\" ? defaultDisplay( elem.nodeName ) : display) === \"inline\" ) {\r\n\t\tstyle.display = display;\r\n\t}\r\n}\r\n\r\nfunction propFilter( props, specialEasing ) {\r\n\tvar index, name, easing, value, hooks;\r\n\r\n\t// camelCase, specialEasing and expand cssHook pass\r\n\tfor ( index in props ) {\r\n\t\tname = jQuery.camelCase( index );\r\n\t\teasing = specialEasing[ name ];\r\n\t\tvalue = props[ index ];\r\n\t\tif ( jQuery.isArray( value ) ) {\r\n\t\t\teasing = value[ 1 ];\r\n\t\t\tvalue = props[ index ] = value[ 0 ];\r\n\t\t}\r\n\r\n\t\tif ( index !== name ) {\r\n\t\t\tprops[ name ] = value;\r\n\t\t\tdelete props[ index ];\r\n\t\t}\r\n\r\n\t\thooks = jQuery.cssHooks[ name ];\r\n\t\tif ( hooks && \"expand\" in hooks ) {\r\n\t\t\tvalue = hooks.expand( value );\r\n\t\t\tdelete props[ name ];\r\n\r\n\t\t\t// not quite $.extend, this wont overwrite keys already present.\r\n\t\t\t// also - reusing 'index' from above because we have the correct \"name\"\r\n\t\t\tfor ( index in value ) {\r\n\t\t\t\tif ( !( index in props ) ) {\r\n\t\t\t\t\tprops[ index ] = value[ index ];\r\n\t\t\t\t\tspecialEasing[ index ] = easing;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tspecialEasing[ name ] = easing;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction Animation( elem, properties, options ) {\r\n\tvar result,\r\n\t\tstopped,\r\n\t\tindex = 0,\r\n\t\tlength = animationPrefilters.length,\r\n\t\tdeferred = jQuery.Deferred().always( function() {\r\n\t\t\t// don't match elem in the :animated selector\r\n\t\t\tdelete tick.elem;\r\n\t\t}),\r\n\t\ttick = function() {\r\n\t\t\tif ( stopped ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar currentTime = fxNow || createFxNow(),\r\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\r\n\t\t\t\t// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)\r\n\t\t\t\ttemp = remaining / animation.duration || 0,\r\n\t\t\t\tpercent = 1 - temp,\r\n\t\t\t\tindex = 0,\r\n\t\t\t\tlength = animation.tweens.length;\r\n\r\n\t\t\tfor ( ; index < length ; index++ ) {\r\n\t\t\t\tanimation.tweens[ index ].run( percent );\r\n\t\t\t}\r\n\r\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ]);\r\n\r\n\t\t\tif ( percent < 1 && length ) {\r\n\t\t\t\treturn remaining;\r\n\t\t\t} else {\r\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\tanimation = deferred.promise({\r\n\t\t\telem: elem,\r\n\t\t\tprops: jQuery.extend( {}, properties ),\r\n\t\t\topts: jQuery.extend( true, { specialEasing: {} }, options ),\r\n\t\t\toriginalProperties: properties,\r\n\t\t\toriginalOptions: options,\r\n\t\t\tstartTime: fxNow || createFxNow(),\r\n\t\t\tduration: options.duration,\r\n\t\t\ttweens: [],\r\n\t\t\tcreateTween: function( prop, end ) {\r\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\r\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\r\n\t\t\t\tanimation.tweens.push( tween );\r\n\t\t\t\treturn tween;\r\n\t\t\t},\r\n\t\t\tstop: function( gotoEnd ) {\r\n\t\t\t\tvar index = 0,\r\n\t\t\t\t\t// if we are going to the end, we want to run all the tweens\r\n\t\t\t\t\t// otherwise we skip this part\r\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\r\n\t\t\t\tif ( stopped ) {\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t\tstopped = true;\r\n\t\t\t\tfor ( ; index < length ; index++ ) {\r\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// resolve when we played the last frame\r\n\t\t\t\t// otherwise, reject\r\n\t\t\t\tif ( gotoEnd ) {\r\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t}),\r\n\t\tprops = animation.props;\r\n\r\n\tpropFilter( props, animation.opts.specialEasing );\r\n\r\n\tfor ( ; index < length ; index++ ) {\r\n\t\tresult = animationPrefilters[ index ].call( animation, elem, props, animation.opts );\r\n\t\tif ( result ) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tjQuery.map( props, createTween, animation );\r\n\r\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\r\n\t\tanimation.opts.start.call( elem, animation );\r\n\t}\r\n\r\n\tjQuery.fx.timer(\r\n\t\tjQuery.extend( tick, {\r\n\t\t\telem: elem,\r\n\t\t\tanim: animation,\r\n\t\t\tqueue: animation.opts.queue\r\n\t\t})\r\n\t);\r\n\r\n\t// attach callbacks from options\r\n\treturn animation.progress( animation.opts.progress )\r\n\t\t.done( animation.opts.done, animation.opts.complete )\r\n\t\t.fail( animation.opts.fail )\r\n\t\t.always( animation.opts.always );\r\n}\r\n\r\njQuery.Animation = jQuery.extend( Animation, {\r\n\ttweener: function( props, callback ) {\r\n\t\tif ( jQuery.isFunction( props ) ) {\r\n\t\t\tcallback = props;\r\n\t\t\tprops = [ \"*\" ];\r\n\t\t} else {\r\n\t\t\tprops = props.split(\" \");\r\n\t\t}\r\n\r\n\t\tvar prop,\r\n\t\t\tindex = 0,\r\n\t\t\tlength = props.length;\r\n\r\n\t\tfor ( ; index < length ; index++ ) {\r\n\t\t\tprop = props[ index ];\r\n\t\t\ttweeners[ prop ] = tweeners[ prop ] || [];\r\n\t\t\ttweeners[ prop ].unshift( callback );\r\n\t\t}\r\n\t},\r\n\r\n\tprefilter: function( callback, prepend ) {\r\n\t\tif ( prepend ) {\r\n\t\t\tanimationPrefilters.unshift( callback );\r\n\t\t} else {\r\n\t\t\tanimationPrefilters.push( callback );\r\n\t\t}\r\n\t}\r\n});\r\n\r\njQuery.speed = function( speed, easing, fn ) {\r\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\r\n\t\tcomplete: fn || !fn && easing ||\r\n\t\t\tjQuery.isFunction( speed ) && speed,\r\n\t\tduration: speed,\r\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\r\n\t};\r\n\r\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :\r\n\t\topt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\r\n\r\n\t// normalize opt.queue - true/undefined/null -> \"fx\"\r\n\tif ( opt.queue == null || opt.queue === true ) {\r\n\t\topt.queue = \"fx\";\r\n\t}\r\n\r\n\t// Queueing\r\n\topt.old = opt.complete;\r\n\r\n\topt.complete = function() {\r\n\t\tif ( jQuery.isFunction( opt.old ) ) {\r\n\t\t\topt.old.call( this );\r\n\t\t}\r\n\r\n\t\tif ( opt.queue ) {\r\n\t\t\tjQuery.dequeue( this, opt.queue );\r\n\t\t}\r\n\t};\r\n\r\n\treturn opt;\r\n};\r\n\r\njQuery.fn.extend({\r\n\tfadeTo: function( speed, to, easing, callback ) {\r\n\r\n\t\t// show any hidden elements after setting opacity to 0\r\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\r\n\r\n\t\t\t// animate to the value specified\r\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback );\r\n\t},\r\n\tanimate: function( prop, speed, easing, callback ) {\r\n\t\tvar empty = jQuery.isEmptyObject( prop ),\r\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\r\n\t\t\tdoAnimation = function() {\r\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\r\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\r\n\r\n\t\t\t\t// Empty animations, or finishing resolves immediately\r\n\t\t\t\tif ( empty || jQuery._data( this, \"finish\" ) ) {\r\n\t\t\t\t\tanim.stop( true );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tdoAnimation.finish = doAnimation;\r\n\r\n\t\treturn empty || optall.queue === false ?\r\n\t\t\tthis.each( doAnimation ) :\r\n\t\t\tthis.queue( optall.queue, doAnimation );\r\n\t},\r\n\tstop: function( type, clearQueue, gotoEnd ) {\r\n\t\tvar stopQueue = function( hooks ) {\r\n\t\t\tvar stop = hooks.stop;\r\n\t\t\tdelete hooks.stop;\r\n\t\t\tstop( gotoEnd );\r\n\t\t};\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tgotoEnd = clearQueue;\r\n\t\t\tclearQueue = type;\r\n\t\t\ttype = undefined;\r\n\t\t}\r\n\t\tif ( clearQueue && type !== false ) {\r\n\t\t\tthis.queue( type || \"fx\", [] );\r\n\t\t}\r\n\r\n\t\treturn this.each(function() {\r\n\t\t\tvar dequeue = true,\r\n\t\t\t\tindex = type != null && type + \"queueHooks\",\r\n\t\t\t\ttimers = jQuery.timers,\r\n\t\t\t\tdata = jQuery._data( this );\r\n\r\n\t\t\tif ( index ) {\r\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\r\n\t\t\t\t\tstopQueue( data[ index ] );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor ( index in data ) {\r\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\r\n\t\t\t\t\t\tstopQueue( data[ index ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor ( index = timers.length; index--; ) {\r\n\t\t\t\tif ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {\r\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\r\n\t\t\t\t\tdequeue = false;\r\n\t\t\t\t\ttimers.splice( index, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// start the next in the queue if the last step wasn't forced\r\n\t\t\t// timers currently will call their complete callbacks, which will dequeue\r\n\t\t\t// but only if they were gotoEnd\r\n\t\t\tif ( dequeue || !gotoEnd ) {\r\n\t\t\t\tjQuery.dequeue( this, type );\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\tfinish: function( type ) {\r\n\t\tif ( type !== false ) {\r\n\t\t\ttype = type || \"fx\";\r\n\t\t}\r\n\t\treturn this.each(function() {\r\n\t\t\tvar index,\r\n\t\t\t\tdata = jQuery._data( this ),\r\n\t\t\t\tqueue = data[ type + \"queue\" ],\r\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\r\n\t\t\t\ttimers = jQuery.timers,\r\n\t\t\t\tlength = queue ? queue.length : 0;\r\n\r\n\t\t\t// enable finishing flag on private data\r\n\t\t\tdata.finish = true;\r\n\r\n\t\t\t// empty the queue first\r\n\t\t\tjQuery.queue( this, type, [] );\r\n\r\n\t\t\tif ( hooks && hooks.stop ) {\r\n\t\t\t\thooks.stop.call( this, true );\r\n\t\t\t}\r\n\r\n\t\t\t// look for any active animations, and finish them\r\n\t\t\tfor ( index = timers.length; index--; ) {\r\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\r\n\t\t\t\t\ttimers[ index ].anim.stop( true );\r\n\t\t\t\t\ttimers.splice( index, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// look for any animations in the old queue and finish them\r\n\t\t\tfor ( index = 0; index < length; index++ ) {\r\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\r\n\t\t\t\t\tqueue[ index ].finish.call( this );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// turn off finishing flag\r\n\t\t\tdelete data.finish;\r\n\t\t});\r\n\t}\r\n});\r\n\r\njQuery.each([ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\r\n\tvar cssFn = jQuery.fn[ name ];\r\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\r\n\t\treturn speed == null || typeof speed === \"boolean\" ?\r\n\t\t\tcssFn.apply( this, arguments ) :\r\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\r\n\t};\r\n});\r\n\r\n// Generate shortcuts for custom animations\r\njQuery.each({\r\n\tslideDown: genFx(\"show\"),\r\n\tslideUp: genFx(\"hide\"),\r\n\tslideToggle: genFx(\"toggle\"),\r\n\tfadeIn: { opacity: \"show\" },\r\n\tfadeOut: { opacity: \"hide\" },\r\n\tfadeToggle: { opacity: \"toggle\" }\r\n}, function( name, props ) {\r\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\r\n\t\treturn this.animate( props, speed, easing, callback );\r\n\t};\r\n});\r\n\r\njQuery.timers = [];\r\njQuery.fx.tick = function() {\r\n\tvar timer,\r\n\t\ttimers = jQuery.timers,\r\n\t\ti = 0;\r\n\r\n\tfxNow = jQuery.now();\r\n\r\n\tfor ( ; i < timers.length; i++ ) {\r\n\t\ttimer = timers[ i ];\r\n\t\t// Checks the timer has not already been removed\r\n\t\tif ( !timer() && timers[ i ] === timer ) {\r\n\t\t\ttimers.splice( i--, 1 );\r\n\t\t}\r\n\t}\r\n\r\n\tif ( !timers.length ) {\r\n\t\tjQuery.fx.stop();\r\n\t}\r\n\tfxNow = undefined;\r\n};\r\n\r\njQuery.fx.timer = function( timer ) {\r\n\tjQuery.timers.push( timer );\r\n\tif ( timer() ) {\r\n\t\tjQuery.fx.start();\r\n\t} else {\r\n\t\tjQuery.timers.pop();\r\n\t}\r\n};\r\n\r\njQuery.fx.interval = 13;\r\n\r\njQuery.fx.start = function() {\r\n\tif ( !timerId ) {\r\n\t\ttimerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );\r\n\t}\r\n};\r\n\r\njQuery.fx.stop = function() {\r\n\tclearInterval( timerId );\r\n\ttimerId = null;\r\n};\r\n\r\njQuery.fx.speeds = {\r\n\tslow: 600,\r\n\tfast: 200,\r\n\t// Default speed\r\n\t_default: 400\r\n};\r\n\r\n\r\n// Based off of the plugin by Clint Helfers, with permission.\r\n// http://blindsignals.com/index.php/2009/07/jquery-delay/\r\njQuery.fn.delay = function( time, type ) {\r\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\r\n\ttype = type || \"fx\";\r\n\r\n\treturn this.queue( type, function( next, hooks ) {\r\n\t\tvar timeout = setTimeout( next, time );\r\n\t\thooks.stop = function() {\r\n\t\t\tclearTimeout( timeout );\r\n\t\t};\r\n\t});\r\n};\r\n\r\n\r\n(function() {\r\n\t// Minified: var a,b,c,d,e\r\n\tvar input, div, select, a, opt;\r\n\r\n\t// Setup\r\n\tdiv = document.createElement( \"div\" );\r\n\tdiv.setAttribute( \"className\", \"t\" );\r\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\r\n\ta = div.getElementsByTagName(\"a\")[ 0 ];\r\n\r\n\t// First batch of tests.\r\n\tselect = document.createElement(\"select\");\r\n\topt = select.appendChild( document.createElement(\"option\") );\r\n\tinput = div.getElementsByTagName(\"input\")[ 0 ];\r\n\r\n\ta.style.cssText = \"top:1px\";\r\n\r\n\t// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\r\n\tsupport.getSetAttribute = div.className !== \"t\";\r\n\r\n\t// Get the style information from getAttribute\r\n\t// (IE uses .cssText instead)\r\n\tsupport.style = /top/.test( a.getAttribute(\"style\") );\r\n\r\n\t// Make sure that URLs aren't manipulated\r\n\t// (IE normalizes it by default)\r\n\tsupport.hrefNormalized = a.getAttribute(\"href\") === \"/a\";\r\n\r\n\t// Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)\r\n\tsupport.checkOn = !!input.value;\r\n\r\n\t// Make sure that a selected-by-default option has a working selected property.\r\n\t// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\r\n\tsupport.optSelected = opt.selected;\r\n\r\n\t// Tests for enctype support on a form (#6743)\r\n\tsupport.enctype = !!document.createElement(\"form\").enctype;\r\n\r\n\t// Make sure that the options inside disabled selects aren't marked as disabled\r\n\t// (WebKit marks them as disabled)\r\n\tselect.disabled = true;\r\n\tsupport.optDisabled = !opt.disabled;\r\n\r\n\t// Support: IE8 only\r\n\t// Check if we can trust getAttribute(\"value\")\r\n\tinput = document.createElement( \"input\" );\r\n\tinput.setAttribute( \"value\", \"\" );\r\n\tsupport.input = input.getAttribute( \"value\" ) === \"\";\r\n\r\n\t// Check if an input maintains its value after becoming a radio\r\n\tinput.value = \"t\";\r\n\tinput.setAttribute( \"type\", \"radio\" );\r\n\tsupport.radioValue = input.value === \"t\";\r\n})();\r\n\r\n\r\nvar rreturn = /\\r/g;\r\n\r\njQuery.fn.extend({\r\n\tval: function( value ) {\r\n\t\tvar hooks, ret, isFunction,\r\n\t\t\telem = this[0];\r\n\r\n\t\tif ( !arguments.length ) {\r\n\t\t\tif ( elem ) {\r\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];\r\n\r\n\t\t\t\tif ( hooks && \"get\" in hooks && (ret = hooks.get( elem, \"value\" )) !== undefined ) {\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tret = elem.value;\r\n\r\n\t\t\t\treturn typeof ret === \"string\" ?\r\n\t\t\t\t\t// handle most common string cases\r\n\t\t\t\t\tret.replace(rreturn, \"\") :\r\n\t\t\t\t\t// handle cases where value is null/undef or number\r\n\t\t\t\t\tret == null ? \"\" : ret;\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tisFunction = jQuery.isFunction( value );\r\n\r\n\t\treturn this.each(function( i ) {\r\n\t\t\tvar val;\r\n\r\n\t\t\tif ( this.nodeType !== 1 ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( isFunction ) {\r\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\r\n\t\t\t} else {\r\n\t\t\t\tval = value;\r\n\t\t\t}\r\n\r\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\r\n\t\t\tif ( val == null ) {\r\n\t\t\t\tval = \"\";\r\n\t\t\t} else if ( typeof val === \"number\" ) {\r\n\t\t\t\tval += \"\";\r\n\t\t\t} else if ( jQuery.isArray( val ) ) {\r\n\t\t\t\tval = jQuery.map( val, function( value ) {\r\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\r\n\r\n\t\t\t// If set returns undefined, fall back to normal setting\r\n\t\t\tif ( !hooks || !(\"set\" in hooks) || hooks.set( this, val, \"value\" ) === undefined ) {\r\n\t\t\t\tthis.value = val;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n\r\njQuery.extend({\r\n\tvalHooks: {\r\n\t\toption: {\r\n\t\t\tget: function( elem ) {\r\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\r\n\t\t\t\treturn val != null ?\r\n\t\t\t\t\tval :\r\n\t\t\t\t\t// Support: IE10-11+\r\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\r\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) );\r\n\t\t\t}\r\n\t\t},\r\n\t\tselect: {\r\n\t\t\tget: function( elem ) {\r\n\t\t\t\tvar value, option,\r\n\t\t\t\t\toptions = elem.options,\r\n\t\t\t\t\tindex = elem.selectedIndex,\r\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\r\n\t\t\t\t\tvalues = one ? null : [],\r\n\t\t\t\t\tmax = one ? index + 1 : options.length,\r\n\t\t\t\t\ti = index < 0 ?\r\n\t\t\t\t\t\tmax :\r\n\t\t\t\t\t\tone ? index : 0;\r\n\r\n\t\t\t\t// Loop through all the selected options\r\n\t\t\t\tfor ( ; i < max; i++ ) {\r\n\t\t\t\t\toption = options[ i ];\r\n\r\n\t\t\t\t\t// oldIE doesn't update selected after form reset (#2551)\r\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\r\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\r\n\t\t\t\t\t\t\t( support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null ) &&\r\n\t\t\t\t\t\t\t( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\r\n\r\n\t\t\t\t\t\t// Get the specific value for the option\r\n\t\t\t\t\t\tvalue = jQuery( option ).val();\r\n\r\n\t\t\t\t\t\t// We don't need an array for one selects\r\n\t\t\t\t\t\tif ( one ) {\r\n\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Multi-Selects return an array\r\n\t\t\t\t\t\tvalues.push( value );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn values;\r\n\t\t\t},\r\n\r\n\t\t\tset: function( elem, value ) {\r\n\t\t\t\tvar optionSet, option,\r\n\t\t\t\t\toptions = elem.options,\r\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\r\n\t\t\t\t\ti = options.length;\r\n\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\toption = options[ i ];\r\n\r\n\t\t\t\t\tif ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {\r\n\r\n\t\t\t\t\t\t// Support: IE6\r\n\t\t\t\t\t\t// When new option element is added to select box we need to\r\n\t\t\t\t\t\t// force reflow of newly added node in order to workaround delay\r\n\t\t\t\t\t\t// of initialization properties\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\toption.selected = optionSet = true;\r\n\r\n\t\t\t\t\t\t} catch ( _ ) {\r\n\r\n\t\t\t\t\t\t\t// Will be executed only in IE6\r\n\t\t\t\t\t\t\toption.scrollHeight;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toption.selected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\r\n\t\t\t\tif ( !optionSet ) {\r\n\t\t\t\t\telem.selectedIndex = -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn options;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Radios and checkboxes getter/setter\r\njQuery.each([ \"radio\", \"checkbox\" ], function() {\r\n\tjQuery.valHooks[ this ] = {\r\n\t\tset: function( elem, value ) {\r\n\t\t\tif ( jQuery.isArray( value ) ) {\r\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tif ( !support.checkOn ) {\r\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\r\n\t\t\t// Support: Webkit\r\n\t\t\t// \"\" is returned instead of \"on\" if a value isn't specified\r\n\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\r\n\t\t};\r\n\t}\r\n});\r\n\r\n\r\n\r\n\r\nvar nodeHook, boolHook,\r\n\tattrHandle = jQuery.expr.attrHandle,\r\n\truseDefault = /^(?:checked|selected)$/i,\r\n\tgetSetAttribute = support.getSetAttribute,\r\n\tgetSetInput = support.input;\r\n\r\njQuery.fn.extend({\r\n\tattr: function( name, value ) {\r\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\r\n\t},\r\n\r\n\tremoveAttr: function( name ) {\r\n\t\treturn this.each(function() {\r\n\t\t\tjQuery.removeAttr( this, name );\r\n\t\t});\r\n\t}\r\n});\r\n\r\njQuery.extend({\r\n\tattr: function( elem, name, value ) {\r\n\t\tvar hooks, ret,\r\n\t\t\tnType = elem.nodeType;\r\n\r\n\t\t// don't get/set attributes on text, comment and attribute nodes\r\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Fallback to prop when attributes are not supported\r\n\t\tif ( typeof elem.getAttribute === strundefined ) {\r\n\t\t\treturn jQuery.prop( elem, name, value );\r\n\t\t}\r\n\r\n\t\t// All attributes are lowercase\r\n\t\t// Grab necessary hook if one is defined\r\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\r\n\t\t\tname = name.toLowerCase();\r\n\t\t\thooks = jQuery.attrHooks[ name ] ||\r\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );\r\n\t\t}\r\n\r\n\t\tif ( value !== undefined ) {\r\n\r\n\t\t\tif ( value === null ) {\r\n\t\t\t\tjQuery.removeAttr( elem, name );\r\n\r\n\t\t\t} else if ( hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {\r\n\t\t\t\treturn ret;\r\n\r\n\t\t\t} else {\r\n\t\t\t\telem.setAttribute( name, value + \"\" );\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\r\n\t\t} else if ( hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ) {\r\n\t\t\treturn ret;\r\n\r\n\t\t} else {\r\n\t\t\tret = jQuery.find.attr( elem, name );\r\n\r\n\t\t\t// Non-existent attributes return null, we normalize to undefined\r\n\t\t\treturn ret == null ?\r\n\t\t\t\tundefined :\r\n\t\t\t\tret;\r\n\t\t}\r\n\t},\r\n\r\n\tremoveAttr: function( elem, value ) {\r\n\t\tvar name, propName,\r\n\t\t\ti = 0,\r\n\t\t\tattrNames = value && value.match( rnotwhite );\r\n\r\n\t\tif ( attrNames && elem.nodeType === 1 ) {\r\n\t\t\twhile ( (name = attrNames[i++]) ) {\r\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\r\n\r\n\t\t\t\t// Boolean attributes get special treatment (#10870)\r\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\r\n\t\t\t\t\t// Set corresponding property to false\r\n\t\t\t\t\tif ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\r\n\t\t\t\t\t\telem[ propName ] = false;\r\n\t\t\t\t\t// Support: IE<9\r\n\t\t\t\t\t// Also clear defaultChecked/defaultSelected (if appropriate)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] =\r\n\t\t\t\t\t\t\telem[ propName ] = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t// See #9699 for explanation of this approach (setting first, then removal)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tjQuery.attr( elem, name, \"\" );\r\n\t\t\t\t}\r\n\r\n\t\t\t\telem.removeAttribute( getSetAttribute ? name : propName );\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tattrHooks: {\r\n\t\ttype: {\r\n\t\t\tset: function( elem, value ) {\r\n\t\t\t\tif ( !support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\") ) {\r\n\t\t\t\t\t// Setting the type on a radio button after the value resets the value in IE6-9\r\n\t\t\t\t\t// Reset value to default in case type is set after value during creation\r\n\t\t\t\t\tvar val = elem.value;\r\n\t\t\t\t\telem.setAttribute( \"type\", value );\r\n\t\t\t\t\tif ( val ) {\r\n\t\t\t\t\t\telem.value = val;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Hook for boolean attributes\r\nboolHook = {\r\n\tset: function( elem, value, name ) {\r\n\t\tif ( value === false ) {\r\n\t\t\t// Remove boolean attributes when set to false\r\n\t\t\tjQuery.removeAttr( elem, name );\r\n\t\t} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\r\n\t\t\t// IE<8 needs the *property* name\r\n\t\t\telem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );\r\n\r\n\t\t// Use defaultChecked and defaultSelected for oldIE\r\n\t\t} else {\r\n\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] = elem[ name ] = true;\r\n\t\t}\r\n\r\n\t\treturn name;\r\n\t}\r\n};\r\n\r\n// Retrieve booleans specially\r\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\r\n\r\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\r\n\r\n\tattrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?\r\n\t\tfunction( elem, name, isXML ) {\r\n\t\t\tvar ret, handle;\r\n\t\t\tif ( !isXML ) {\r\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\r\n\t\t\t\thandle = attrHandle[ name ];\r\n\t\t\t\tattrHandle[ name ] = ret;\r\n\t\t\t\tret = getter( elem, name, isXML ) != null ?\r\n\t\t\t\t\tname.toLowerCase() :\r\n\t\t\t\t\tnull;\r\n\t\t\t\tattrHandle[ name ] = handle;\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t} :\r\n\t\tfunction( elem, name, isXML ) {\r\n\t\t\tif ( !isXML ) {\r\n\t\t\t\treturn elem[ jQuery.camelCase( \"default-\" + name ) ] ?\r\n\t\t\t\t\tname.toLowerCase() :\r\n\t\t\t\t\tnull;\r\n\t\t\t}\r\n\t\t};\r\n});\r\n\r\n// fix oldIE attroperties\r\nif ( !getSetInput || !getSetAttribute ) {\r\n\tjQuery.attrHooks.value = {\r\n\t\tset: function( elem, value, name ) {\r\n\t\t\tif ( jQuery.nodeName( elem, \"input\" ) ) {\r\n\t\t\t\t// Does not return so that setAttribute is also used\r\n\t\t\t\telem.defaultValue = value;\r\n\t\t\t} else {\r\n\t\t\t\t// Use nodeHook if defined (#1954); otherwise setAttribute is fine\r\n\t\t\t\treturn nodeHook && nodeHook.set( elem, value, name );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// IE6/7 do not support getting/setting some attributes with get/setAttribute\r\nif ( !getSetAttribute ) {\r\n\r\n\t// Use this for any attribute in IE6/7\r\n\t// This fixes almost every IE6/7 issue\r\n\tnodeHook = {\r\n\t\tset: function( elem, value, name ) {\r\n\t\t\t// Set the existing or create a new attribute node\r\n\t\t\tvar ret = elem.getAttributeNode( name );\r\n\t\t\tif ( !ret ) {\r\n\t\t\t\telem.setAttributeNode(\r\n\t\t\t\t\t(ret = elem.ownerDocument.createAttribute( name ))\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tret.value = value += \"\";\r\n\r\n\t\t\t// Break association with cloned elements by also using setAttribute (#9646)\r\n\t\t\tif ( name === \"value\" || value === elem.getAttribute( name ) ) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Some attributes are constructed with empty-string values when not defined\r\n\tattrHandle.id = attrHandle.name = attrHandle.coords =\r\n\t\tfunction( elem, name, isXML ) {\r\n\t\t\tvar ret;\r\n\t\t\tif ( !isXML ) {\r\n\t\t\t\treturn (ret = elem.getAttributeNode( name )) && ret.value !== \"\" ?\r\n\t\t\t\t\tret.value :\r\n\t\t\t\t\tnull;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t// Fixing value retrieval on a button requires this module\r\n\tjQuery.valHooks.button = {\r\n\t\tget: function( elem, name ) {\r\n\t\t\tvar ret = elem.getAttributeNode( name );\r\n\t\t\tif ( ret && ret.specified ) {\r\n\t\t\t\treturn ret.value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tset: nodeHook.set\r\n\t};\r\n\r\n\t// Set contenteditable to false on removals(#10429)\r\n\t// Setting to empty string throws an error as an invalid value\r\n\tjQuery.attrHooks.contenteditable = {\r\n\t\tset: function( elem, value, name ) {\r\n\t\t\tnodeHook.set( elem, value === \"\" ? false : value, name );\r\n\t\t}\r\n\t};\r\n\r\n\t// Set width and height to auto instead of 0 on empty string( Bug #8150 )\r\n\t// This is for removals\r\n\tjQuery.each([ \"width\", \"height\" ], function( i, name ) {\r\n\t\tjQuery.attrHooks[ name ] = {\r\n\t\t\tset: function( elem, value ) {\r\n\t\t\t\tif ( value === \"\" ) {\r\n\t\t\t\t\telem.setAttribute( name, \"auto\" );\r\n\t\t\t\t\treturn value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n}\r\n\r\nif ( !support.style ) {\r\n\tjQuery.attrHooks.style = {\r\n\t\tget: function( elem ) {\r\n\t\t\t// Return undefined in the case of empty string\r\n\t\t\t// Note: IE uppercases css property names, but if we were to .toLowerCase()\r\n\t\t\t// .cssText, that would destroy case senstitivity in URL's, like in \"background\"\r\n\t\t\treturn elem.style.cssText || undefined;\r\n\t\t},\r\n\t\tset: function( elem, value ) {\r\n\t\t\treturn ( elem.style.cssText = value + \"\" );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\nvar rfocusable = /^(?:input|select|textarea|button|object)$/i,\r\n\trclickable = /^(?:a|area)$/i;\r\n\r\njQuery.fn.extend({\r\n\tprop: function( name, value ) {\r\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\r\n\t},\r\n\r\n\tremoveProp: function( name ) {\r\n\t\tname = jQuery.propFix[ name ] || name;\r\n\t\treturn this.each(function() {\r\n\t\t\t// try/catch handles cases where IE balks (such as removing a property on window)\r\n\t\t\ttry {\r\n\t\t\t\tthis[ name ] = undefined;\r\n\t\t\t\tdelete this[ name ];\r\n\t\t\t} catch( e ) {}\r\n\t\t});\r\n\t}\r\n});\r\n\r\njQuery.extend({\r\n\tpropFix: {\r\n\t\t\"for\": \"htmlFor\",\r\n\t\t\"class\": \"className\"\r\n\t},\r\n\r\n\tprop: function( elem, name, value ) {\r\n\t\tvar ret, hooks, notxml,\r\n\t\t\tnType = elem.nodeType;\r\n\r\n\t\t// don't get/set properties on text, comment and attribute nodes\r\n\t\tif ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnotxml = nType !== 1 || !jQuery.isXMLDoc( elem );\r\n\r\n\t\tif ( notxml ) {\r\n\t\t\t// Fix name and attach hooks\r\n\t\t\tname = jQuery.propFix[ name ] || name;\r\n\t\t\thooks = jQuery.propHooks[ name ];\r\n\t\t}\r\n\r\n\t\tif ( value !== undefined ) {\r\n\t\t\treturn hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?\r\n\t\t\t\tret :\r\n\t\t\t\t( elem[ name ] = value );\r\n\r\n\t\t} else {\r\n\t\t\treturn hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ?\r\n\t\t\t\tret :\r\n\t\t\t\telem[ name ];\r\n\t\t}\r\n\t},\r\n\r\n\tpropHooks: {\r\n\t\ttabIndex: {\r\n\t\t\tget: function( elem ) {\r\n\t\t\t\t// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set\r\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\r\n\t\t\t\t// Use proper attribute retrieval(#12072)\r\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\r\n\r\n\t\t\t\treturn tabindex ?\r\n\t\t\t\t\tparseInt( tabindex, 10 ) :\r\n\t\t\t\t\trfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?\r\n\t\t\t\t\t\t0 :\r\n\t\t\t\t\t\t-1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Some attributes require a special call on IE\r\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\r\nif ( !support.hrefNormalized ) {\r\n\t// href/src property should get the full normalized URL (#10299/#12915)\r\n\tjQuery.each([ \"href\", \"src\" ], function( i, name ) {\r\n\t\tjQuery.propHooks[ name ] = {\r\n\t\t\tget: function( elem ) {\r\n\t\t\t\treturn elem.getAttribute( name, 4 );\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n}\r\n\r\n// Support: Safari, IE9+\r\n// mis-reports the default selected property of an option\r\n// Accessing the parent's selectedIndex property fixes it\r\nif ( !support.optSelected ) {\r\n\tjQuery.propHooks.selected = {\r\n\t\tget: function( elem ) {\r\n\t\t\tvar parent = elem.parentNode;\r\n\r\n\t\t\tif ( parent ) {\r\n\t\t\t\tparent.selectedIndex;\r\n\r\n\t\t\t\t// Make sure that it also works with optgroups, see #5701\r\n\t\t\t\tif ( parent.parentNode ) {\r\n\t\t\t\t\tparent.parentNode.selectedIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n}\r\n\r\njQuery.each([\r\n\t\"tabIndex\",\r\n\t\"readOnly\",\r\n\t\"maxLength\",\r\n\t\"cellSpacing\",\r\n\t\"cellPadding\",\r\n\t\"rowSpan\",\r\n\t\"colSpan\",\r\n\t\"useMap\",\r\n\t\"frameBorder\",\r\n\t\"contentEditable\"\r\n], function() {\r\n\tjQuery.propFix[ this.toLowerCase() ] = this;\r\n});\r\n\r\n// IE6/7 call enctype encoding\r\nif ( !support.enctype ) {\r\n\tjQuery.propFix.enctype = \"encoding\";\r\n}\r\n\r\n\r\n\r\n\r\nvar rclass = /[\\t\\r\\n\\f]/g;\r\n\r\njQuery.fn.extend({\r\n\taddClass: function( value ) {\r\n\t\tvar classes, elem, cur, clazz, j, finalValue,\r\n\t\t\ti = 0,\r\n\t\t\tlen = this.length,\r\n\t\t\tproceed = typeof value === \"string\" && value;\r\n\r\n\t\tif ( jQuery.isFunction( value ) ) {\r\n\t\t\treturn this.each(function( j ) {\r\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, this.className ) );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif ( proceed ) {\r\n\t\t\t// The disjunction here is for better compressibility (see removeClass)\r\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\r\n\r\n\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\telem = this[ i ];\r\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?\r\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\r\n\t\t\t\t\t\" \"\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( cur ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {\r\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\r\n\t\t\t\t\t\t\tcur += clazz + \" \";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.\r\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\r\n\t\t\t\t\tif ( elem.className !== finalValue ) {\r\n\t\t\t\t\t\telem.className = finalValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tremoveClass: function( value ) {\r\n\t\tvar classes, elem, cur, clazz, j, finalValue,\r\n\t\t\ti = 0,\r\n\t\t\tlen = this.length,\r\n\t\t\tproceed = arguments.length === 0 || typeof value === \"string\" && value;\r\n\r\n\t\tif ( jQuery.isFunction( value ) ) {\r\n\t\t\treturn this.each(function( j ) {\r\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, this.className ) );\r\n\t\t\t});\r\n\t\t}\r\n\t\tif ( proceed ) {\r\n\t\t\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\r\n\r\n\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\telem = this[ i ];\r\n\t\t\t\t// This expression is here for better compressibility (see addClass)\r\n\t\t\t\tcur = elem.nodeType === 1 && ( elem.className ?\r\n\t\t\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\r\n\t\t\t\t\t\"\"\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( cur ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\twhile ( (clazz = classes[j++]) ) {\r\n\t\t\t\t\t\t// Remove *all* instances\r\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) >= 0 ) {\r\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.\r\n\t\t\t\t\tfinalValue = value ? jQuery.trim( cur ) : \"\";\r\n\t\t\t\t\tif ( elem.className !== finalValue ) {\r\n\t\t\t\t\t\telem.className = finalValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoggleClass: function( value, stateVal ) {\r\n\t\tvar type = typeof value;\r\n\r\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\r\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\r\n\t\t}\r\n\r\n\t\tif ( jQuery.isFunction( value ) ) {\r\n\t\t\treturn this.each(function( i ) {\r\n\t\t\t\tjQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this.each(function() {\r\n\t\t\tif ( type === \"string\" ) {\r\n\t\t\t\t// toggle individual class names\r\n\t\t\t\tvar className,\r\n\t\t\t\t\ti = 0,\r\n\t\t\t\t\tself = jQuery( this ),\r\n\t\t\t\t\tclassNames = value.match( rnotwhite ) || [];\r\n\r\n\t\t\t\twhile ( (className = classNames[ i++ ]) ) {\r\n\t\t\t\t\t// check each className given, space separated list\r\n\t\t\t\t\tif ( self.hasClass( className ) ) {\r\n\t\t\t\t\t\tself.removeClass( className );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tself.addClass( className );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t// Toggle whole class name\r\n\t\t\t} else if ( type === strundefined || type === \"boolean\" ) {\r\n\t\t\t\tif ( this.className ) {\r\n\t\t\t\t\t// store className if set\r\n\t\t\t\t\tjQuery._data( this, \"__className__\", this.className );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the element has a class name or if we're passed \"false\",\r\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\r\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\r\n\t\t\t\t// falling back to the empty string if nothing was stored.\r\n\t\t\t\tthis.className = this.className || value === false ? \"\" : jQuery._data( this, \"__className__\" ) || \"\";\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\thasClass: function( selector ) {\r\n\t\tvar className = \" \" + selector + \" \",\r\n\t\t\ti = 0,\r\n\t\t\tl = this.length;\r\n\t\tfor ( ; i < l; i++ ) {\r\n\t\t\tif ( this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf( className ) >= 0 ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n});\r\n\r\n\r\n\r\n\r\n// Return jQuery for attributes-only inclusion\r\n\r\n\r\njQuery.each( (\"blur focus focusin focusout load resize scroll unload click dblclick \" +\r\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\r\n\t\"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function( i, name ) {\r\n\r\n\t// Handle event binding\r\n\tjQuery.fn[ name ] = function( data, fn ) {\r\n\t\treturn arguments.length > 0 ?\r\n\t\t\tthis.on( name, null, data, fn ) :\r\n\t\t\tthis.trigger( name );\r\n\t};\r\n});\r\n\r\njQuery.fn.extend({\r\n\thover: function( fnOver, fnOut ) {\r\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\r\n\t},\r\n\r\n\tbind: function( types, data, fn ) {\r\n\t\treturn this.on( types, null, data, fn );\r\n\t},\r\n\tunbind: function( types, fn ) {\r\n\t\treturn this.off( types, null, fn );\r\n\t},\r\n\r\n\tdelegate: function( selector, types, data, fn ) {\r\n\t\treturn this.on( types, selector, data, fn );\r\n\t},\r\n\tundelegate: function( selector, types, fn ) {\r\n\t\t// ( namespace ) or ( selector, types [, fn] )\r\n\t\treturn arguments.length === 1 ? this.off( selector, \"**\" ) : this.off( types, selector || \"**\", fn );\r\n\t}\r\n});\r\n\r\n\r\nvar nonce = jQuery.now();\r\n\r\nvar rquery = (/\\?/);\r\n\r\n\r\n\r\nvar rvalidtokens = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\r\n\r\njQuery.parseJSON = function( data ) {\r\n\t// Attempt to parse using the native JSON parser first\r\n\tif ( window.JSON && window.JSON.parse ) {\r\n\t\t// Support: Android 2.3\r\n\t\t// Workaround failure to string-cast null input\r\n\t\treturn window.JSON.parse( data + \"\" );\r\n\t}\r\n\r\n\tvar requireNonComma,\r\n\t\tdepth = null,\r\n\t\tstr = jQuery.trim( data + \"\" );\r\n\r\n\t// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains\r\n\t// after removing valid tokens\r\n\treturn str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {\r\n\r\n\t\t// Force termination if we see a misplaced comma\r\n\t\tif ( requireNonComma && comma ) {\r\n\t\t\tdepth = 0;\r\n\t\t}\r\n\r\n\t\t// Perform no more replacements after returning to outermost depth\r\n\t\tif ( depth === 0 ) {\r\n\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\t// Commas must not follow \"[\", \"{\", or \",\"\r\n\t\trequireNonComma = open || comma;\r\n\r\n\t\t// Determine new depth\r\n\t\t// array/object open (\"[\" or \"{\"): depth += true - false (increment)\r\n\t\t// array/object close (\"]\" or \"}\"): depth += false - true (decrement)\r\n\t\t// other cases (\",\" or primitive): depth += true - true (numeric cast)\r\n\t\tdepth += !close - !open;\r\n\r\n\t\t// Remove this token\r\n\t\treturn \"\";\r\n\t}) ) ?\r\n\t\t( Function( \"return \" + str ) )() :\r\n\t\tjQuery.error( \"Invalid JSON: \" + data );\r\n};\r\n\r\n\r\n// Cross-browser xml parsing\r\njQuery.parseXML = function( data ) {\r\n\tvar xml, tmp;\r\n\tif ( !data || typeof data !== \"string\" ) {\r\n\t\treturn null;\r\n\t}\r\n\ttry {\r\n\t\tif ( window.DOMParser ) { // Standard\r\n\t\t\ttmp = new DOMParser();\r\n\t\t\txml = tmp.parseFromString( data, \"text/xml\" );\r\n\t\t} else { // IE\r\n\t\t\txml = new ActiveXObject( \"Microsoft.XMLDOM\" );\r\n\t\t\txml.async = \"false\";\r\n\t\t\txml.loadXML( data );\r\n\t\t}\r\n\t} catch( e ) {\r\n\t\txml = undefined;\r\n\t}\r\n\tif ( !xml || !xml.documentElement || xml.getElementsByTagName( \"parsererror\" ).length ) {\r\n\t\tjQuery.error( \"Invalid XML: \" + data );\r\n\t}\r\n\treturn xml;\r\n};\r\n\r\n\r\nvar\r\n\t// Document location\r\n\tajaxLocParts,\r\n\tajaxLocation,\r\n\r\n\trhash = /#.*$/,\r\n\trts = /([?&])_=[^&]*/,\r\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg, // IE leaves an \\r character at EOL\r\n\t// #7653, #8125, #8152: local protocol detection\r\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\r\n\trnoContent = /^(?:GET|HEAD)$/,\r\n\trprotocol = /^\\/\\//,\r\n\trurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\r\n\r\n\t/* Prefilters\r\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\r\n\t * 2) These are called:\r\n\t *    - BEFORE asking for a transport\r\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\r\n\t * 3) key is the dataType\r\n\t * 4) the catchall symbol \"*\" can be used\r\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\r\n\t */\r\n\tprefilters = {},\r\n\r\n\t/* Transports bindings\r\n\t * 1) key is the dataType\r\n\t * 2) the catchall symbol \"*\" can be used\r\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\r\n\t */\r\n\ttransports = {},\r\n\r\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\r\n\tallTypes = \"*/\".concat(\"*\");\r\n\r\n// #8138, IE may throw an exception when accessing\r\n// a field from window.location if document.domain has been set\r\ntry {\r\n\tajaxLocation = location.href;\r\n} catch( e ) {\r\n\t// Use the href attribute of an A element\r\n\t// since IE will modify it given document.location\r\n\tajaxLocation = document.createElement( \"a\" );\r\n\tajaxLocation.href = \"\";\r\n\tajaxLocation = ajaxLocation.href;\r\n}\r\n\r\n// Segment location into parts\r\najaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];\r\n\r\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\nfunction addToPrefiltersOrTransports( structure ) {\r\n\r\n\t// dataTypeExpression is optional and defaults to \"*\"\r\n\treturn function( dataTypeExpression, func ) {\r\n\r\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\r\n\t\t\tfunc = dataTypeExpression;\r\n\t\t\tdataTypeExpression = \"*\";\r\n\t\t}\r\n\r\n\t\tvar dataType,\r\n\t\t\ti = 0,\r\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\r\n\r\n\t\tif ( jQuery.isFunction( func ) ) {\r\n\t\t\t// For each dataType in the dataTypeExpression\r\n\t\t\twhile ( (dataType = dataTypes[i++]) ) {\r\n\t\t\t\t// Prepend if requested\r\n\t\t\t\tif ( dataType.charAt( 0 ) === \"+\" ) {\r\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\r\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).unshift( func );\r\n\r\n\t\t\t\t// Otherwise append\r\n\t\t\t\t} else {\r\n\t\t\t\t\t(structure[ dataType ] = structure[ dataType ] || []).push( func );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// Base inspection function for prefilters and transports\r\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\r\n\r\n\tvar inspected = {},\r\n\t\tseekingTransport = ( structure === transports );\r\n\r\n\tfunction inspect( dataType ) {\r\n\t\tvar selected;\r\n\t\tinspected[ dataType ] = true;\r\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\r\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\r\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {\r\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\r\n\t\t\t\tinspect( dataTypeOrTransport );\r\n\t\t\t\treturn false;\r\n\t\t\t} else if ( seekingTransport ) {\r\n\t\t\t\treturn !( selected = dataTypeOrTransport );\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn selected;\r\n\t}\r\n\r\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\r\n}\r\n\r\n// A special extend for ajax options\r\n// that takes \"flat\" options (not to be deep extended)\r\n// Fixes #9887\r\nfunction ajaxExtend( target, src ) {\r\n\tvar deep, key,\r\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\r\n\r\n\tfor ( key in src ) {\r\n\t\tif ( src[ key ] !== undefined ) {\r\n\t\t\t( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];\r\n\t\t}\r\n\t}\r\n\tif ( deep ) {\r\n\t\tjQuery.extend( true, target, deep );\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n\r\n/* Handles responses to an ajax request:\r\n * - finds the right dataType (mediates between content-type and expected dataType)\r\n * - returns the corresponding response\r\n */\r\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\r\n\tvar firstDataType, ct, finalDataType, type,\r\n\t\tcontents = s.contents,\r\n\t\tdataTypes = s.dataTypes;\r\n\r\n\t// Remove auto dataType and get content-type in the process\r\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\r\n\t\tdataTypes.shift();\r\n\t\tif ( ct === undefined ) {\r\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if we're dealing with a known content-type\r\n\tif ( ct ) {\r\n\t\tfor ( type in contents ) {\r\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\r\n\t\t\t\tdataTypes.unshift( type );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Check to see if we have a response for the expected dataType\r\n\tif ( dataTypes[ 0 ] in responses ) {\r\n\t\tfinalDataType = dataTypes[ 0 ];\r\n\t} else {\r\n\t\t// Try convertible dataTypes\r\n\t\tfor ( type in responses ) {\r\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[0] ] ) {\r\n\t\t\t\tfinalDataType = type;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif ( !firstDataType ) {\r\n\t\t\t\tfirstDataType = type;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Or just use first one\r\n\t\tfinalDataType = finalDataType || firstDataType;\r\n\t}\r\n\r\n\t// If we found a dataType\r\n\t// We add the dataType to the list if needed\r\n\t// and return the corresponding response\r\n\tif ( finalDataType ) {\r\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\r\n\t\t\tdataTypes.unshift( finalDataType );\r\n\t\t}\r\n\t\treturn responses[ finalDataType ];\r\n\t}\r\n}\r\n\r\n/* Chain conversions given the request and the original response\r\n * Also sets the responseXXX fields on the jqXHR instance\r\n */\r\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\r\n\tvar conv2, current, conv, tmp, prev,\r\n\t\tconverters = {},\r\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\r\n\t\tdataTypes = s.dataTypes.slice();\r\n\r\n\t// Create converters map with lowercased keys\r\n\tif ( dataTypes[ 1 ] ) {\r\n\t\tfor ( conv in s.converters ) {\r\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\r\n\t\t}\r\n\t}\r\n\r\n\tcurrent = dataTypes.shift();\r\n\r\n\t// Convert to each sequential dataType\r\n\twhile ( current ) {\r\n\r\n\t\tif ( s.responseFields[ current ] ) {\r\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\r\n\t\t}\r\n\r\n\t\t// Apply the dataFilter if provided\r\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\r\n\t\t\tresponse = s.dataFilter( response, s.dataType );\r\n\t\t}\r\n\r\n\t\tprev = current;\r\n\t\tcurrent = dataTypes.shift();\r\n\r\n\t\tif ( current ) {\r\n\r\n\t\t\t// There's only work to do if current dataType is non-auto\r\n\t\t\tif ( current === \"*\" ) {\r\n\r\n\t\t\t\tcurrent = prev;\r\n\r\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\r\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\r\n\r\n\t\t\t\t// Seek a direct converter\r\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\r\n\r\n\t\t\t\t// If none found, seek a pair\r\n\t\t\t\tif ( !conv ) {\r\n\t\t\t\t\tfor ( conv2 in converters ) {\r\n\r\n\t\t\t\t\t\t// If conv2 outputs current\r\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\r\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\r\n\r\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\r\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\r\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\r\n\t\t\t\t\t\t\tif ( conv ) {\r\n\t\t\t\t\t\t\t\t// Condense equivalence converters\r\n\t\t\t\t\t\t\t\tif ( conv === true ) {\r\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\r\n\r\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\r\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\r\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\r\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply converter (if not an equivalence)\r\n\t\t\t\tif ( conv !== true ) {\r\n\r\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\r\n\t\t\t\t\tif ( conv && s[ \"throws\" ] ) {\r\n\t\t\t\t\t\tresponse = conv( response );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tresponse = conv( response );\r\n\t\t\t\t\t\t} catch ( e ) {\r\n\t\t\t\t\t\t\treturn { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { state: \"success\", data: response };\r\n}\r\n\r\njQuery.extend({\r\n\r\n\t// Counter for holding the number of active queries\r\n\tactive: 0,\r\n\r\n\t// Last-Modified header cache for next request\r\n\tlastModified: {},\r\n\tetag: {},\r\n\r\n\tajaxSettings: {\r\n\t\turl: ajaxLocation,\r\n\t\ttype: \"GET\",\r\n\t\tisLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),\r\n\t\tglobal: true,\r\n\t\tprocessData: true,\r\n\t\tasync: true,\r\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n\t\t/*\r\n\t\ttimeout: 0,\r\n\t\tdata: null,\r\n\t\tdataType: null,\r\n\t\tusername: null,\r\n\t\tpassword: null,\r\n\t\tcache: null,\r\n\t\tthrows: false,\r\n\t\ttraditional: false,\r\n\t\theaders: {},\r\n\t\t*/\r\n\r\n\t\taccepts: {\r\n\t\t\t\"*\": allTypes,\r\n\t\t\ttext: \"text/plain\",\r\n\t\t\thtml: \"text/html\",\r\n\t\t\txml: \"application/xml, text/xml\",\r\n\t\t\tjson: \"application/json, text/javascript\"\r\n\t\t},\r\n\r\n\t\tcontents: {\r\n\t\t\txml: /xml/,\r\n\t\t\thtml: /html/,\r\n\t\t\tjson: /json/\r\n\t\t},\r\n\r\n\t\tresponseFields: {\r\n\t\t\txml: \"responseXML\",\r\n\t\t\ttext: \"responseText\",\r\n\t\t\tjson: \"responseJSON\"\r\n\t\t},\r\n\r\n\t\t// Data converters\r\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\r\n\t\tconverters: {\r\n\r\n\t\t\t// Convert anything to text\r\n\t\t\t\"* text\": String,\r\n\r\n\t\t\t// Text to html (true = no transformation)\r\n\t\t\t\"text html\": true,\r\n\r\n\t\t\t// Evaluate text as a json expression\r\n\t\t\t\"text json\": jQuery.parseJSON,\r\n\r\n\t\t\t// Parse text as xml\r\n\t\t\t\"text xml\": jQuery.parseXML\r\n\t\t},\r\n\r\n\t\t// For options that shouldn't be deep extended:\r\n\t\t// you can add your own custom options here if\r\n\t\t// and when you create one that shouldn't be\r\n\t\t// deep extended (see ajaxExtend)\r\n\t\tflatOptions: {\r\n\t\t\turl: true,\r\n\t\t\tcontext: true\r\n\t\t}\r\n\t},\r\n\r\n\t// Creates a full fledged settings object into target\r\n\t// with both ajaxSettings and settings fields.\r\n\t// If target is omitted, writes into ajaxSettings.\r\n\tajaxSetup: function( target, settings ) {\r\n\t\treturn settings ?\r\n\r\n\t\t\t// Building a settings object\r\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\r\n\r\n\t\t\t// Extending ajaxSettings\r\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\r\n\t},\r\n\r\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\r\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\r\n\r\n\t// Main method\r\n\tajax: function( url, options ) {\r\n\r\n\t\t// If url is an object, simulate pre-1.5 signature\r\n\t\tif ( typeof url === \"object\" ) {\r\n\t\t\toptions = url;\r\n\t\t\turl = undefined;\r\n\t\t}\r\n\r\n\t\t// Force options to be an object\r\n\t\toptions = options || {};\r\n\r\n\t\tvar // Cross-domain detection vars\r\n\t\t\tparts,\r\n\t\t\t// Loop variable\r\n\t\t\ti,\r\n\t\t\t// URL without anti-cache param\r\n\t\t\tcacheURL,\r\n\t\t\t// Response headers as string\r\n\t\t\tresponseHeadersString,\r\n\t\t\t// timeout handle\r\n\t\t\ttimeoutTimer,\r\n\r\n\t\t\t// To know if global events are to be dispatched\r\n\t\t\tfireGlobals,\r\n\r\n\t\t\ttransport,\r\n\t\t\t// Response headers\r\n\t\t\tresponseHeaders,\r\n\t\t\t// Create the final options object\r\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\r\n\t\t\t// Callbacks context\r\n\t\t\tcallbackContext = s.context || s,\r\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\r\n\t\t\tglobalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?\r\n\t\t\t\tjQuery( callbackContext ) :\r\n\t\t\t\tjQuery.event,\r\n\t\t\t// Deferreds\r\n\t\t\tdeferred = jQuery.Deferred(),\r\n\t\t\tcompleteDeferred = jQuery.Callbacks(\"once memory\"),\r\n\t\t\t// Status-dependent callbacks\r\n\t\t\tstatusCode = s.statusCode || {},\r\n\t\t\t// Headers (they are sent all at once)\r\n\t\t\trequestHeaders = {},\r\n\t\t\trequestHeadersNames = {},\r\n\t\t\t// The jqXHR state\r\n\t\t\tstate = 0,\r\n\t\t\t// Default abort message\r\n\t\t\tstrAbort = \"canceled\",\r\n\t\t\t// Fake xhr\r\n\t\t\tjqXHR = {\r\n\t\t\t\treadyState: 0,\r\n\r\n\t\t\t\t// Builds headers hashtable if needed\r\n\t\t\t\tgetResponseHeader: function( key ) {\r\n\t\t\t\t\tvar match;\r\n\t\t\t\t\tif ( state === 2 ) {\r\n\t\t\t\t\t\tif ( !responseHeaders ) {\r\n\t\t\t\t\t\t\tresponseHeaders = {};\r\n\t\t\t\t\t\t\twhile ( (match = rheaders.exec( responseHeadersString )) ) {\r\n\t\t\t\t\t\t\t\tresponseHeaders[ match[1].toLowerCase() ] = match[ 2 ];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match == null ? null : match;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Raw string\r\n\t\t\t\tgetAllResponseHeaders: function() {\r\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Caches the header\r\n\t\t\t\tsetRequestHeader: function( name, value ) {\r\n\t\t\t\t\tvar lname = name.toLowerCase();\r\n\t\t\t\t\tif ( !state ) {\r\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\r\n\t\t\t\t\t\trequestHeaders[ name ] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Overrides response content-type header\r\n\t\t\t\toverrideMimeType: function( type ) {\r\n\t\t\t\t\tif ( !state ) {\r\n\t\t\t\t\t\ts.mimeType = type;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Status-dependent callbacks\r\n\t\t\t\tstatusCode: function( map ) {\r\n\t\t\t\t\tvar code;\r\n\t\t\t\t\tif ( map ) {\r\n\t\t\t\t\t\tif ( state < 2 ) {\r\n\t\t\t\t\t\t\tfor ( code in map ) {\r\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\r\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\r\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Cancel the request\r\n\t\t\t\tabort: function( statusText ) {\r\n\t\t\t\t\tvar finalText = statusText || strAbort;\r\n\t\t\t\t\tif ( transport ) {\r\n\t\t\t\t\t\ttransport.abort( finalText );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdone( 0, finalText );\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t// Attach deferreds\r\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\r\n\t\tjqXHR.success = jqXHR.done;\r\n\t\tjqXHR.error = jqXHR.fail;\r\n\r\n\t\t// Remove hash character (#7531: and string promotion)\r\n\t\t// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\r\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\r\n\t\t// We also use the url parameter if available\r\n\t\ts.url = ( ( url || s.url || ajaxLocation ) + \"\" ).replace( rhash, \"\" ).replace( rprotocol, ajaxLocParts[ 1 ] + \"//\" );\r\n\r\n\t\t// Alias method option to type as per ticket #12004\r\n\t\ts.type = options.method || options.type || s.method || s.type;\r\n\r\n\t\t// Extract dataTypes list\r\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\r\n\r\n\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\r\n\t\tif ( s.crossDomain == null ) {\r\n\t\t\tparts = rurl.exec( s.url.toLowerCase() );\r\n\t\t\ts.crossDomain = !!( parts &&\r\n\t\t\t\t( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||\r\n\t\t\t\t\t( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) !==\r\n\t\t\t\t\t\t( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) )\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Convert data if not already a string\r\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\r\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\r\n\t\t}\r\n\r\n\t\t// Apply prefilters\r\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\r\n\r\n\t\t// If request was aborted inside a prefilter, stop there\r\n\t\tif ( state === 2 ) {\r\n\t\t\treturn jqXHR;\r\n\t\t}\r\n\r\n\t\t// We can fire global events as of now if asked to\r\n\t\tfireGlobals = s.global;\r\n\r\n\t\t// Watch for a new set of requests\r\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\r\n\t\t\tjQuery.event.trigger(\"ajaxStart\");\r\n\t\t}\r\n\r\n\t\t// Uppercase the type\r\n\t\ts.type = s.type.toUpperCase();\r\n\r\n\t\t// Determine if request has content\r\n\t\ts.hasContent = !rnoContent.test( s.type );\r\n\r\n\t\t// Save the URL in case we're toying with the If-Modified-Since\r\n\t\t// and/or If-None-Match header later on\r\n\t\tcacheURL = s.url;\r\n\r\n\t\t// More options handling for requests with no content\r\n\t\tif ( !s.hasContent ) {\r\n\r\n\t\t\t// If data is available, append data to url\r\n\t\t\tif ( s.data ) {\r\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\r\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\r\n\t\t\t\tdelete s.data;\r\n\t\t\t}\r\n\r\n\t\t\t// Add anti-cache in url if needed\r\n\t\t\tif ( s.cache === false ) {\r\n\t\t\t\ts.url = rts.test( cacheURL ) ?\r\n\r\n\t\t\t\t\t// If there is already a '_' parameter, set its value\r\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\r\n\r\n\t\t\t\t\t// Otherwise add one to the end\r\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n\t\tif ( s.ifModified ) {\r\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\r\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\r\n\t\t\t}\r\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\r\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set the correct header, if data is being sent\r\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\r\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\r\n\t\t}\r\n\r\n\t\t// Set the Accepts header for the server, depending on the dataType\r\n\t\tjqXHR.setRequestHeader(\r\n\t\t\t\"Accept\",\r\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?\r\n\t\t\t\ts.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\r\n\t\t\t\ts.accepts[ \"*\" ]\r\n\t\t);\r\n\r\n\t\t// Check for headers option\r\n\t\tfor ( i in s.headers ) {\r\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\r\n\t\t}\r\n\r\n\t\t// Allow custom headers/mimetypes and early abort\r\n\t\tif ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\r\n\t\t\t// Abort if not done already and return\r\n\t\t\treturn jqXHR.abort();\r\n\t\t}\r\n\r\n\t\t// aborting is no longer a cancellation\r\n\t\tstrAbort = \"abort\";\r\n\r\n\t\t// Install callbacks on deferreds\r\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\r\n\t\t\tjqXHR[ i ]( s[ i ] );\r\n\t\t}\r\n\r\n\t\t// Get transport\r\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\r\n\r\n\t\t// If no transport, we auto-abort\r\n\t\tif ( !transport ) {\r\n\t\t\tdone( -1, \"No Transport\" );\r\n\t\t} else {\r\n\t\t\tjqXHR.readyState = 1;\r\n\r\n\t\t\t// Send global event\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\r\n\t\t\t}\r\n\t\t\t// Timeout\r\n\t\t\tif ( s.async && s.timeout > 0 ) {\r\n\t\t\t\ttimeoutTimer = setTimeout(function() {\r\n\t\t\t\t\tjqXHR.abort(\"timeout\");\r\n\t\t\t\t}, s.timeout );\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tstate = 1;\r\n\t\t\t\ttransport.send( requestHeaders, done );\r\n\t\t\t} catch ( e ) {\r\n\t\t\t\t// Propagate exception as error if not done\r\n\t\t\t\tif ( state < 2 ) {\r\n\t\t\t\t\tdone( -1, e );\r\n\t\t\t\t// Simply rethrow otherwise\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Callback for when everything is done\r\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\r\n\t\t\tvar isSuccess, success, error, response, modified,\r\n\t\t\t\tstatusText = nativeStatusText;\r\n\r\n\t\t\t// Called once\r\n\t\t\tif ( state === 2 ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// State is \"done\" now\r\n\t\t\tstate = 2;\r\n\r\n\t\t\t// Clear timeout if it exists\r\n\t\t\tif ( timeoutTimer ) {\r\n\t\t\t\tclearTimeout( timeoutTimer );\r\n\t\t\t}\r\n\r\n\t\t\t// Dereference transport for early garbage collection\r\n\t\t\t// (no matter how long the jqXHR object will be used)\r\n\t\t\ttransport = undefined;\r\n\r\n\t\t\t// Cache response headers\r\n\t\t\tresponseHeadersString = headers || \"\";\r\n\r\n\t\t\t// Set readyState\r\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\r\n\r\n\t\t\t// Determine if successful\r\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\r\n\r\n\t\t\t// Get response data\r\n\t\t\tif ( responses ) {\r\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\r\n\t\t\t}\r\n\r\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\r\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\r\n\r\n\t\t\t\r\n\t\t\t//session为timeout时候跳转到登录界面\r\n\t\t\tvar sessionstatus = jqXHR.getResponseHeader('sessionstatus');\r\n\t\t\tif(\"timeout\"==sessionstatus){\r\n\t\t\t\twindow.location.replace(\"slogin.html\"); \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// If successful, handle type chaining\r\n\t\t\tif ( isSuccess ) {\r\n\r\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n\t\t\t\tif ( s.ifModified ) {\r\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\r\n\t\t\t\t\tif ( modified ) {\r\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\r\n\t\t\t\t\tif ( modified ) {\r\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if no content\r\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\r\n\t\t\t\t\tstatusText = \"nocontent\";\r\n\r\n\t\t\t\t// if not modified\r\n\t\t\t\t} else if ( status === 304 ) {\r\n\t\t\t\t\tstatusText = \"notmodified\";\r\n\r\n\t\t\t\t// If we have data, let's convert it\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstatusText = response.state;\r\n\t\t\t\t\tsuccess = response.data;\r\n\t\t\t\t\terror = response.error;\r\n\t\t\t\t\tisSuccess = !error;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// We extract error from statusText\r\n\t\t\t\t// then normalize statusText and status for non-aborts\r\n\t\t\t\terror = statusText;\r\n\t\t\t\tif ( status || !statusText ) {\r\n\t\t\t\t\tstatusText = \"error\";\r\n\t\t\t\t\tif ( status < 0 ) {\r\n\t\t\t\t\t\tstatus = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set data for the fake xhr object\r\n\t\t\tjqXHR.status = status;\r\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\r\n\r\n\t\t\t// Success/Error\r\n\t\t\tif ( isSuccess ) {\r\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\r\n\t\t\t} else {\r\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\r\n\t\t\t}\r\n\r\n\t\t\t// Status-dependent callbacks\r\n\t\t\tjqXHR.statusCode( statusCode );\r\n\t\t\tstatusCode = undefined;\r\n\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\r\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\r\n\t\t\t}\r\n\r\n\t\t\t// Complete\r\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\r\n\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\r\n\t\t\t\t// Handle the global AJAX counter\r\n\t\t\t\tif ( !( --jQuery.active ) ) {\r\n\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn jqXHR;\r\n\t},\r\n\r\n\tgetJSON: function( url, data, callback ) {\r\n\t\treturn jQuery.get( url, data, callback, \"json\" );\r\n\t},\r\n\r\n\tgetScript: function( url, callback ) {\r\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\r\n\t}\r\n});\r\n\r\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\r\n\tjQuery[ method ] = function( url, data, callback, type ) {\r\n\t\t// shift arguments if data argument was omitted\r\n\t\tif ( jQuery.isFunction( data ) ) {\r\n\t\t\ttype = type || callback;\r\n\t\t\tcallback = data;\r\n\t\t\tdata = undefined;\r\n\t\t}\r\n\r\n\t\treturn jQuery.ajax({\r\n\t\t\turl: url,\r\n\t\t\ttype: method,\r\n\t\t\tdataType: type,\r\n\t\t\tdata: data,\r\n\t\t\tsuccess: callback\r\n\t\t});\r\n\t};\r\n});\r\n\r\n// Attach a bunch of functions for handling common AJAX events\r\njQuery.each( [ \"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\" ], function( i, type ) {\r\n\tjQuery.fn[ type ] = function( fn ) {\r\n\t\treturn this.on( type, fn );\r\n\t};\r\n});\r\n\r\n\r\njQuery._evalUrl = function( url ) {\r\n\treturn jQuery.ajax({\r\n\t\turl: url,\r\n\t\ttype: \"GET\",\r\n\t\tdataType: \"script\",\r\n\t\tasync: false,\r\n\t\tglobal: false,\r\n\t\t\"throws\": true\r\n\t});\r\n};\r\n\r\n\r\njQuery.fn.extend({\r\n\twrapAll: function( html ) {\r\n\t\tif ( jQuery.isFunction( html ) ) {\r\n\t\t\treturn this.each(function(i) {\r\n\t\t\t\tjQuery(this).wrapAll( html.call(this, i) );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif ( this[0] ) {\r\n\t\t\t// The elements to wrap the target around\r\n\t\t\tvar wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);\r\n\r\n\t\t\tif ( this[0].parentNode ) {\r\n\t\t\t\twrap.insertBefore( this[0] );\r\n\t\t\t}\r\n\r\n\t\t\twrap.map(function() {\r\n\t\t\t\tvar elem = this;\r\n\r\n\t\t\t\twhile ( elem.firstChild && elem.firstChild.nodeType === 1 ) {\r\n\t\t\t\t\telem = elem.firstChild;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn elem;\r\n\t\t\t}).append( this );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\twrapInner: function( html ) {\r\n\t\tif ( jQuery.isFunction( html ) ) {\r\n\t\t\treturn this.each(function(i) {\r\n\t\t\t\tjQuery(this).wrapInner( html.call(this, i) );\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this.each(function() {\r\n\t\t\tvar self = jQuery( this ),\r\n\t\t\t\tcontents = self.contents();\r\n\r\n\t\t\tif ( contents.length ) {\r\n\t\t\t\tcontents.wrapAll( html );\r\n\r\n\t\t\t} else {\r\n\t\t\t\tself.append( html );\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\twrap: function( html ) {\r\n\t\tvar isFunction = jQuery.isFunction( html );\r\n\r\n\t\treturn this.each(function(i) {\r\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );\r\n\t\t});\r\n\t},\r\n\r\n\tunwrap: function() {\r\n\t\treturn this.parent().each(function() {\r\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\r\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\r\n\t\t\t}\r\n\t\t}).end();\r\n\t}\r\n});\r\n\r\n\r\njQuery.expr.filters.hidden = function( elem ) {\r\n\t// Support: Opera <= 12.12\r\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\r\n\treturn elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||\r\n\t\t(!support.reliableHiddenOffsets() &&\r\n\t\t\t((elem.style && elem.style.display) || jQuery.css( elem, \"display\" )) === \"none\");\r\n};\r\n\r\njQuery.expr.filters.visible = function( elem ) {\r\n\treturn !jQuery.expr.filters.hidden( elem );\r\n};\r\n\r\n\r\n\r\n\r\nvar r20 = /%20/g,\r\n\trbracket = /\\[\\]$/,\r\n\trCRLF = /\\r?\\n/g,\r\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\r\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\r\n\r\nfunction buildParams( prefix, obj, traditional, add ) {\r\n\tvar name;\r\n\r\n\tif ( jQuery.isArray( obj ) ) {\r\n\t\t// Serialize array item.\r\n\t\tjQuery.each( obj, function( i, v ) {\r\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\r\n\t\t\t\t// Treat each array item as a scalar.\r\n\t\t\t\tadd( prefix, v );\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\r\n\t\t\t\tbuildParams( prefix + \"[\" + ( typeof v === \"object\" ? i : \"\" ) + \"]\", v, traditional, add );\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\r\n\t\t// Serialize object item.\r\n\t\tfor ( name in obj ) {\r\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\r\n\t\t}\r\n\r\n\t} else {\r\n\t\t// Serialize scalar item.\r\n\t\tadd( prefix, obj );\r\n\t}\r\n}\r\n\r\n// Serialize an array of form elements or a set of\r\n// key/values into a query string\r\njQuery.param = function( a, traditional ) {\r\n\tvar prefix,\r\n\t\ts = [],\r\n\t\tadd = function( key, value ) {\r\n\t\t\t// If value is a function, invoke it and return its value\r\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\r\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\r\n\t\t};\r\n\r\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\r\n\tif ( traditional === undefined ) {\r\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\r\n\t}\r\n\r\n\t// If an array was passed in, assume that it is an array of form elements.\r\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\r\n\t\t// Serialize the form elements\r\n\t\tjQuery.each( a, function() {\r\n\t\t\tadd( this.name, this.value );\r\n\t\t});\r\n\r\n\t} else {\r\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\r\n\t\t// did it), otherwise encode params recursively.\r\n\t\tfor ( prefix in a ) {\r\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the resulting serialization\r\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\r\n};\r\n\r\njQuery.fn.extend({\r\n\tserialize: function() {\r\n\t\treturn jQuery.param( this.serializeArray() );\r\n\t},\r\n\tserializeArray: function() {\r\n\t\treturn this.map(function() {\r\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\r\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\r\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\r\n\t\t})\r\n\t\t.filter(function() {\r\n\t\t\tvar type = this.type;\r\n\t\t\t// Use .is(\":disabled\") so that fieldset[disabled] works\r\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\r\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\r\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\r\n\t\t})\r\n\t\t.map(function( i, elem ) {\r\n\t\t\tvar val = jQuery( this ).val();\r\n\r\n\t\t\treturn val == null ?\r\n\t\t\t\tnull :\r\n\t\t\t\tjQuery.isArray( val ) ?\r\n\t\t\t\t\tjQuery.map( val, function( val ) {\r\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\r\n\t\t\t\t\t}) :\r\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\r\n\t\t}).get();\r\n\t}\r\n});\r\n\r\n\r\n// Create the request object\r\n// (This is still attached to ajaxSettings for backward compatibility)\r\njQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?\r\n\t// Support: IE6+\r\n\tfunction() {\r\n\r\n\t\t// XHR cannot access local files, always use ActiveX for that case\r\n\t\treturn !this.isLocal &&\r\n\r\n\t\t\t// Support: IE7-8\r\n\t\t\t// oldIE XHR does not support non-RFC2616 methods (#13240)\r\n\t\t\t// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx\r\n\t\t\t// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9\r\n\t\t\t// Although this check for six methods instead of eight\r\n\t\t\t// since IE also does not support \"trace\" and \"connect\"\r\n\t\t\t/^(get|post|head|put|delete|options)$/i.test( this.type ) &&\r\n\r\n\t\t\tcreateStandardXHR() || createActiveXHR();\r\n\t} :\r\n\t// For all other browsers, use the standard XMLHttpRequest object\r\n\tcreateStandardXHR;\r\n\r\nvar xhrId = 0,\r\n\txhrCallbacks = {},\r\n\txhrSupported = jQuery.ajaxSettings.xhr();\r\n\r\n// Support: IE<10\r\n// Open requests must be manually aborted on unload (#5280)\r\nif ( window.ActiveXObject ) {\r\n\tjQuery( window ).on( \"unload\", function() {\r\n\t\tfor ( var key in xhrCallbacks ) {\r\n\t\t\txhrCallbacks[ key ]( undefined, true );\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Determine support properties\r\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\r\nxhrSupported = support.ajax = !!xhrSupported;\r\n\r\n// Create transport if the browser can provide an xhr\r\nif ( xhrSupported ) {\r\n\r\n\tjQuery.ajaxTransport(function( options ) {\r\n\t\t// Cross domain only allowed if supported through XMLHttpRequest\r\n\t\tif ( !options.crossDomain || support.cors ) {\r\n\r\n\t\t\tvar callback;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tsend: function( headers, complete ) {\r\n\t\t\t\t\tvar i,\r\n\t\t\t\t\t\txhr = options.xhr(),\r\n\t\t\t\t\t\tid = ++xhrId;\r\n\r\n\t\t\t\t\t// Open the socket\r\n\t\t\t\t\txhr.open( options.type, options.url, options.async, options.username, options.password );\r\n\r\n\t\t\t\t\t// Apply custom fields if provided\r\n\t\t\t\t\tif ( options.xhrFields ) {\r\n\t\t\t\t\t\tfor ( i in options.xhrFields ) {\r\n\t\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Override mime type if needed\r\n\t\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\r\n\t\t\t\t\t\txhr.overrideMimeType( options.mimeType );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// X-Requested-With header\r\n\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\r\n\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\r\n\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\r\n\t\t\t\t\t// For same-domain requests, won't change header if already provided.\r\n\t\t\t\t\tif ( !options.crossDomain && !headers[\"X-Requested-With\"] ) {\r\n\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Set headers\r\n\t\t\t\t\tfor ( i in headers ) {\r\n\t\t\t\t\t\t// Support: IE<9\r\n\t\t\t\t\t\t// IE's ActiveXObject throws a 'Type Mismatch' exception when setting\r\n\t\t\t\t\t\t// request header to a null-value.\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\t// To keep consistent with other XHR implementations, cast the value\r\n\t\t\t\t\t\t// to string and ignore `undefined`.\r\n\t\t\t\t\t\tif ( headers[ i ] !== undefined ) {\r\n\t\t\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] + \"\" );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Do send the request\r\n\t\t\t\t\t// This may raise an exception which is actually\r\n\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)\r\n\t\t\t\t\txhr.send( ( options.hasContent && options.data ) || null );\r\n\r\n\t\t\t\t\t// Listener\r\n\t\t\t\t\tcallback = function( _, isAbort ) {\r\n\t\t\t\t\t\tvar status, statusText, responses;\r\n\r\n\t\t\t\t\t\t// Was never called and is aborted or complete\r\n\t\t\t\t\t\tif ( callback && ( isAbort || xhr.readyState === 4 ) ) {\r\n\t\t\t\t\t\t\t// Clean up\r\n\t\t\t\t\t\t\tdelete xhrCallbacks[ id ];\r\n\t\t\t\t\t\t\tcallback = undefined;\r\n\t\t\t\t\t\t\txhr.onreadystatechange = jQuery.noop;\r\n\r\n\t\t\t\t\t\t\t// Abort manually if needed\r\n\t\t\t\t\t\t\tif ( isAbort ) {\r\n\t\t\t\t\t\t\t\tif ( xhr.readyState !== 4 ) {\r\n\t\t\t\t\t\t\t\t\txhr.abort();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresponses = {};\r\n\t\t\t\t\t\t\t\tstatus = xhr.status;\r\n\r\n\t\t\t\t\t\t\t\t// Support: IE<10\r\n\t\t\t\t\t\t\t\t// Accessing binary-data responseText throws an exception\r\n\t\t\t\t\t\t\t\t// (#11426)\r\n\t\t\t\t\t\t\t\tif ( typeof xhr.responseText === \"string\" ) {\r\n\t\t\t\t\t\t\t\t\tresponses.text = xhr.responseText;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Firefox throws an exception when accessing\r\n\t\t\t\t\t\t\t\t// statusText for faulty cross-domain requests\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tstatusText = xhr.statusText;\r\n\t\t\t\t\t\t\t\t} catch( e ) {\r\n\t\t\t\t\t\t\t\t\t// We normalize with Webkit giving an empty statusText\r\n\t\t\t\t\t\t\t\t\tstatusText = \"\";\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Filter status for non standard behaviors\r\n\r\n\t\t\t\t\t\t\t\t// If the request is local and we have data: assume a success\r\n\t\t\t\t\t\t\t\t// (success with no data won't get notified, that's the best we\r\n\t\t\t\t\t\t\t\t// can do given current implementations)\r\n\t\t\t\t\t\t\t\tif ( !status && options.isLocal && !options.crossDomain ) {\r\n\t\t\t\t\t\t\t\t\tstatus = responses.text ? 200 : 404;\r\n\t\t\t\t\t\t\t\t// IE - #1450: sometimes returns 1223 when it should be 204\r\n\t\t\t\t\t\t\t\t} else if ( status === 1223 ) {\r\n\t\t\t\t\t\t\t\t\tstatus = 204;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Call complete if needed\r\n\t\t\t\t\t\tif ( responses ) {\r\n\t\t\t\t\t\t\tcomplete( status, statusText, responses, xhr.getAllResponseHeaders() );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif ( !options.async ) {\r\n\t\t\t\t\t\t// if we're in sync mode we fire the callback\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t} else if ( xhr.readyState === 4 ) {\r\n\t\t\t\t\t\t// (IE6 & IE7) if it's in cache and has been\r\n\t\t\t\t\t\t// retrieved directly we need to fire the callback\r\n\t\t\t\t\t\tsetTimeout( callback );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Add to the list of active xhr callbacks\r\n\t\t\t\t\t\txhr.onreadystatechange = xhrCallbacks[ id ] = callback;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\tabort: function() {\r\n\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\tcallback( undefined, true );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Functions to create xhrs\r\nfunction createStandardXHR() {\r\n\ttry {\r\n\t\treturn new window.XMLHttpRequest();\r\n\t} catch( e ) {}\r\n}\r\n\r\nfunction createActiveXHR() {\r\n\ttry {\r\n\t\treturn new window.ActiveXObject( \"Microsoft.XMLHTTP\" );\r\n\t} catch( e ) {}\r\n}\r\n\r\n\r\n\r\n\r\n// Install script dataType\r\njQuery.ajaxSetup({\r\n\taccepts: {\r\n\t\tscript: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\r\n\t},\r\n\tcontents: {\r\n\t\tscript: /(?:java|ecma)script/\r\n\t},\r\n\tconverters: {\r\n\t\t\"text script\": function( text ) {\r\n\t\t\tjQuery.globalEval( text );\r\n\t\t\treturn text;\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Handle cache's special case and global\r\njQuery.ajaxPrefilter( \"script\", function( s ) {\r\n\tif ( s.cache === undefined ) {\r\n\t\ts.cache = false;\r\n\t}\r\n\tif ( s.crossDomain ) {\r\n\t\ts.type = \"GET\";\r\n\t\ts.global = false;\r\n\t}\r\n});\r\n\r\n// Bind script tag hack transport\r\njQuery.ajaxTransport( \"script\", function(s) {\r\n\r\n\t// This transport only deals with cross domain requests\r\n\tif ( s.crossDomain ) {\r\n\r\n\t\tvar script,\r\n\t\t\thead = document.head || jQuery(\"head\")[0] || document.documentElement;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tsend: function( _, callback ) {\r\n\r\n\t\t\t\tscript = document.createElement(\"script\");\r\n\r\n\t\t\t\tscript.async = true;\r\n\r\n\t\t\t\tif ( s.scriptCharset ) {\r\n\t\t\t\t\tscript.charset = s.scriptCharset;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscript.src = s.url;\r\n\r\n\t\t\t\t// Attach handlers for all browsers\r\n\t\t\t\tscript.onload = script.onreadystatechange = function( _, isAbort ) {\r\n\r\n\t\t\t\t\tif ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\r\n\r\n\t\t\t\t\t\t// Handle memory leak in IE\r\n\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\r\n\r\n\t\t\t\t\t\t// Remove the script\r\n\t\t\t\t\t\tif ( script.parentNode ) {\r\n\t\t\t\t\t\t\tscript.parentNode.removeChild( script );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Dereference the script\r\n\t\t\t\t\t\tscript = null;\r\n\r\n\t\t\t\t\t\t// Callback if not abort\r\n\t\t\t\t\t\tif ( !isAbort ) {\r\n\t\t\t\t\t\t\tcallback( 200, \"success\" );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\r\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\r\n\t\t\t\thead.insertBefore( script, head.firstChild );\r\n\t\t\t},\r\n\r\n\t\t\tabort: function() {\r\n\t\t\t\tif ( script ) {\r\n\t\t\t\t\tscript.onload( undefined, true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n});\r\n\r\n\r\n\r\n\r\nvar oldCallbacks = [],\r\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\r\n\r\n// Default jsonp settings\r\njQuery.ajaxSetup({\r\n\tjsonp: \"callback\",\r\n\tjsonpCallback: function() {\r\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\r\n\t\tthis[ callback ] = true;\r\n\t\treturn callback;\r\n\t}\r\n});\r\n\r\n// Detect, normalize options and install callbacks for jsonp requests\r\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\r\n\r\n\tvar callbackName, overwritten, responseContainer,\r\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\r\n\t\t\t\"url\" :\r\n\t\t\ttypeof s.data === \"string\" && !( s.contentType || \"\" ).indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test( s.data ) && \"data\"\r\n\t\t);\r\n\r\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\r\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\r\n\r\n\t\t// Get callback name, remembering preexisting value associated with it\r\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\r\n\t\t\ts.jsonpCallback() :\r\n\t\t\ts.jsonpCallback;\r\n\r\n\t\t// Insert callback into url or form data\r\n\t\tif ( jsonProp ) {\r\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\r\n\t\t} else if ( s.jsonp !== false ) {\r\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\r\n\t\t}\r\n\r\n\t\t// Use data converter to retrieve json after script execution\r\n\t\ts.converters[\"script json\"] = function() {\r\n\t\t\tif ( !responseContainer ) {\r\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\r\n\t\t\t}\r\n\t\t\treturn responseContainer[ 0 ];\r\n\t\t};\r\n\r\n\t\t// force json dataType\r\n\t\ts.dataTypes[ 0 ] = \"json\";\r\n\r\n\t\t// Install callback\r\n\t\toverwritten = window[ callbackName ];\r\n\t\twindow[ callbackName ] = function() {\r\n\t\t\tresponseContainer = arguments;\r\n\t\t};\r\n\r\n\t\t// Clean-up function (fires after converters)\r\n\t\tjqXHR.always(function() {\r\n\t\t\t// Restore preexisting value\r\n\t\t\twindow[ callbackName ] = overwritten;\r\n\r\n\t\t\t// Save back as free\r\n\t\t\tif ( s[ callbackName ] ) {\r\n\t\t\t\t// make sure that re-using the options doesn't screw things around\r\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\r\n\r\n\t\t\t\t// save the callback name for future use\r\n\t\t\t\toldCallbacks.push( callbackName );\r\n\t\t\t}\r\n\r\n\t\t\t// Call if it was a function and we have a response\r\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\r\n\t\t\t\toverwritten( responseContainer[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\tresponseContainer = overwritten = undefined;\r\n\t\t});\r\n\r\n\t\t// Delegate to script\r\n\t\treturn \"script\";\r\n\t}\r\n});\r\n\r\n\r\n\r\n\r\n// data: string of html\r\n// context (optional): If specified, the fragment will be created in this context, defaults to document\r\n// keepScripts (optional): If true, will include scripts passed in the html string\r\njQuery.parseHTML = function( data, context, keepScripts ) {\r\n\tif ( !data || typeof data !== \"string\" ) {\r\n\t\treturn null;\r\n\t}\r\n\tif ( typeof context === \"boolean\" ) {\r\n\t\tkeepScripts = context;\r\n\t\tcontext = false;\r\n\t}\r\n\tcontext = context || document;\r\n\r\n\tvar parsed = rsingleTag.exec( data ),\r\n\t\tscripts = !keepScripts && [];\r\n\r\n\t// Single tag\r\n\tif ( parsed ) {\r\n\t\treturn [ context.createElement( parsed[1] ) ];\r\n\t}\r\n\r\n\tparsed = jQuery.buildFragment( [ data ], context, scripts );\r\n\r\n\tif ( scripts && scripts.length ) {\r\n\t\tjQuery( scripts ).remove();\r\n\t}\r\n\r\n\treturn jQuery.merge( [], parsed.childNodes );\r\n};\r\n\r\n\r\n// Keep a copy of the old load method\r\nvar _load = jQuery.fn.load;\r\n\r\n/**\r\n * Load a url into a page\r\n */\r\njQuery.fn.load = function( url, params, callback ) {\r\n\tif ( typeof url !== \"string\" && _load ) {\r\n\t\treturn _load.apply( this, arguments );\r\n\t}\r\n\r\n\tvar selector, response, type,\r\n\t\tself = this,\r\n\t\toff = url.indexOf(\" \");\r\n\r\n\tif ( off >= 0 ) {\r\n\t\tselector = jQuery.trim( url.slice( off, url.length ) );\r\n\t\turl = url.slice( 0, off );\r\n\t}\r\n\r\n\t// If it's a function\r\n\tif ( jQuery.isFunction( params ) ) {\r\n\r\n\t\t// We assume that it's the callback\r\n\t\tcallback = params;\r\n\t\tparams = undefined;\r\n\r\n\t// Otherwise, build a param string\r\n\t} else if ( params && typeof params === \"object\" ) {\r\n\t\ttype = \"POST\";\r\n\t}\r\n\r\n\t// If we have elements to modify, make the request\r\n\tif ( self.length > 0 ) {\r\n\t\tjQuery.ajax({\r\n\t\t\turl: url,\r\n\r\n\t\t\t// if \"type\" variable is undefined, then \"GET\" method will be used\r\n\t\t\ttype: type,\r\n\t\t\tdataType: \"html\",\r\n\t\t\tdata: params\r\n\t\t}).done(function( responseText ) {\r\n\r\n\t\t\t// Save response for use in complete callback\r\n\t\t\tresponse = arguments;\r\n\r\n\t\t\tself.html( selector ?\r\n\r\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\r\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\r\n\t\t\t\tjQuery(\"<div>\").append( jQuery.parseHTML( responseText ) ).find( selector ) :\r\n\r\n\t\t\t\t// Otherwise use the full result\r\n\t\t\t\tresponseText );\r\n\r\n\t\t}).complete( callback && function( jqXHR, status ) {\r\n\t\t\tself.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );\r\n\t\t});\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n\r\n\r\n\r\njQuery.expr.filters.animated = function( elem ) {\r\n\treturn jQuery.grep(jQuery.timers, function( fn ) {\r\n\t\treturn elem === fn.elem;\r\n\t}).length;\r\n};\r\n\r\n\r\n\r\n\r\n\r\nvar docElem = window.document.documentElement;\r\n\r\n/**\r\n * Gets a window from an element\r\n */\r\nfunction getWindow( elem ) {\r\n\treturn jQuery.isWindow( elem ) ?\r\n\t\telem :\r\n\t\telem.nodeType === 9 ?\r\n\t\t\telem.defaultView || elem.parentWindow :\r\n\t\t\tfalse;\r\n}\r\n\r\njQuery.offset = {\r\n\tsetOffset: function( elem, options, i ) {\r\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\r\n\t\t\tposition = jQuery.css( elem, \"position\" ),\r\n\t\t\tcurElem = jQuery( elem ),\r\n\t\t\tprops = {};\r\n\r\n\t\t// set position first, in-case top/left are set even on static elem\r\n\t\tif ( position === \"static\" ) {\r\n\t\t\telem.style.position = \"relative\";\r\n\t\t}\r\n\r\n\t\tcurOffset = curElem.offset();\r\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\r\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\r\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\r\n\t\t\tjQuery.inArray(\"auto\", [ curCSSTop, curCSSLeft ] ) > -1;\r\n\r\n\t\t// need to be able to calculate position if either top or left is auto and position is either absolute or fixed\r\n\t\tif ( calculatePosition ) {\r\n\t\t\tcurPosition = curElem.position();\r\n\t\t\tcurTop = curPosition.top;\r\n\t\t\tcurLeft = curPosition.left;\r\n\t\t} else {\r\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\r\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\r\n\t\t}\r\n\r\n\t\tif ( jQuery.isFunction( options ) ) {\r\n\t\t\toptions = options.call( elem, i, curOffset );\r\n\t\t}\r\n\r\n\t\tif ( options.top != null ) {\r\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\r\n\t\t}\r\n\t\tif ( options.left != null ) {\r\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\r\n\t\t}\r\n\r\n\t\tif ( \"using\" in options ) {\r\n\t\t\toptions.using.call( elem, props );\r\n\t\t} else {\r\n\t\t\tcurElem.css( props );\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.fn.extend({\r\n\toffset: function( options ) {\r\n\t\tif ( arguments.length ) {\r\n\t\t\treturn options === undefined ?\r\n\t\t\t\tthis :\r\n\t\t\t\tthis.each(function( i ) {\r\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar docElem, win,\r\n\t\t\tbox = { top: 0, left: 0 },\r\n\t\t\telem = this[ 0 ],\r\n\t\t\tdoc = elem && elem.ownerDocument;\r\n\r\n\t\tif ( !doc ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdocElem = doc.documentElement;\r\n\r\n\t\t// Make sure it's not a disconnected DOM node\r\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\r\n\t\t\treturn box;\r\n\t\t}\r\n\r\n\t\t// If we don't have gBCR, just use 0,0 rather than error\r\n\t\t// BlackBerry 5, iOS 3 (original iPhone)\r\n\t\tif ( typeof elem.getBoundingClientRect !== strundefined ) {\r\n\t\t\tbox = elem.getBoundingClientRect();\r\n\t\t}\r\n\t\twin = getWindow( doc );\r\n\t\treturn {\r\n\t\t\ttop: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),\r\n\t\t\tleft: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )\r\n\t\t};\r\n\t},\r\n\r\n\tposition: function() {\r\n\t\tif ( !this[ 0 ] ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar offsetParent, offset,\r\n\t\t\tparentOffset = { top: 0, left: 0 },\r\n\t\t\telem = this[ 0 ];\r\n\r\n\t\t// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent\r\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\r\n\t\t\t// we assume that getBoundingClientRect is available when computed position is fixed\r\n\t\t\toffset = elem.getBoundingClientRect();\r\n\t\t} else {\r\n\t\t\t// Get *real* offsetParent\r\n\t\t\toffsetParent = this.offsetParent();\r\n\r\n\t\t\t// Get correct offsets\r\n\t\t\toffset = this.offset();\r\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\r\n\t\t\t\tparentOffset = offsetParent.offset();\r\n\t\t\t}\r\n\r\n\t\t\t// Add offsetParent borders\r\n\t\t\tparentOffset.top  += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\r\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\r\n\t\t}\r\n\r\n\t\t// Subtract parent offsets and element margins\r\n\t\t// note: when an element has margin: auto the offsetLeft and marginLeft\r\n\t\t// are the same in Safari causing offset.left to incorrectly be 0\r\n\t\treturn {\r\n\t\t\ttop:  offset.top  - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\r\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true)\r\n\t\t};\r\n\t},\r\n\r\n\toffsetParent: function() {\r\n\t\treturn this.map(function() {\r\n\t\t\tvar offsetParent = this.offsetParent || docElem;\r\n\r\n\t\t\twhile ( offsetParent && ( !jQuery.nodeName( offsetParent, \"html\" ) && jQuery.css( offsetParent, \"position\" ) === \"static\" ) ) {\r\n\t\t\t\toffsetParent = offsetParent.offsetParent;\r\n\t\t\t}\r\n\t\t\treturn offsetParent || docElem;\r\n\t\t});\r\n\t}\r\n});\r\n\r\n// Create scrollLeft and scrollTop methods\r\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\r\n\tvar top = /Y/.test( prop );\r\n\r\n\tjQuery.fn[ method ] = function( val ) {\r\n\t\treturn access( this, function( elem, method, val ) {\r\n\t\t\tvar win = getWindow( elem );\r\n\r\n\t\t\tif ( val === undefined ) {\r\n\t\t\t\treturn win ? (prop in win) ? win[ prop ] :\r\n\t\t\t\t\twin.document.documentElement[ method ] :\r\n\t\t\t\t\telem[ method ];\r\n\t\t\t}\r\n\r\n\t\t\tif ( win ) {\r\n\t\t\t\twin.scrollTo(\r\n\t\t\t\t\t!top ? val : jQuery( win ).scrollLeft(),\r\n\t\t\t\t\ttop ? val : jQuery( win ).scrollTop()\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\t\t\t\telem[ method ] = val;\r\n\t\t\t}\r\n\t\t}, method, val, arguments.length, null );\r\n\t};\r\n});\r\n\r\n// Add the top/left cssHooks using jQuery.fn.position\r\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\r\n// getComputedStyle returns percent when specified for top/left/bottom/right\r\n// rather than make the css module depend on the offset module, we just check for it here\r\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\r\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\r\n\t\tfunction( elem, computed ) {\r\n\t\t\tif ( computed ) {\r\n\t\t\t\tcomputed = curCSS( elem, prop );\r\n\t\t\t\t// if curCSS returns percentage, fallback to offset\r\n\t\t\t\treturn rnumnonpx.test( computed ) ?\r\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\r\n\t\t\t\t\tcomputed;\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n});\r\n\r\n\r\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\r\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\r\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function( defaultExtra, funcName ) {\r\n\t\t// margin is only for outerHeight, outerWidth\r\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\r\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\r\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\r\n\r\n\t\t\treturn access( this, function( elem, type, value ) {\r\n\t\t\t\tvar doc;\r\n\r\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\r\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\r\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\r\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\r\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Get document width or height\r\n\t\t\t\tif ( elem.nodeType === 9 ) {\r\n\t\t\t\t\tdoc = elem.documentElement;\r\n\r\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\r\n\t\t\t\t\t// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\r\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\r\n\t\t\t\t\t\tdoc[ \"client\" + name ]\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn value === undefined ?\r\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\r\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\r\n\r\n\t\t\t\t\t// Set width or height on the element\r\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\r\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\r\n\t\t};\r\n\t});\r\n});\r\n\r\n\r\n// The number of elements contained in the matched element set\r\njQuery.fn.size = function() {\r\n\treturn this.length;\r\n};\r\n\r\njQuery.fn.andSelf = jQuery.fn.addBack;\r\n\r\n\r\n\r\n\r\n// Register as a named AMD module, since jQuery can be concatenated with other\r\n// files that may use define, but not via a proper concatenation script that\r\n// understands anonymous AMD modules. A named AMD is safest and most robust\r\n// way to register. Lowercase jquery is used because AMD module names are\r\n// derived from file names, and jQuery is normally delivered in a lowercase\r\n// file name. Do this after creating the global so that if an AMD module wants\r\n// to call noConflict to hide this version of jQuery, it will work.\r\n\r\n// Note that for maximum portability, libraries that are not jQuery should\r\n// declare themselves as anonymous modules, and avoid setting a global if an\r\n// AMD loader is present. jQuery is a special case. For more information, see\r\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\r\n\r\nif ( typeof define === \"function\" && define.amd ) {\r\n\tdefine( \"jquery\", [], function() {\r\n\t\treturn jQuery;\r\n\t});\r\n}\r\n\r\n\r\n\r\n\r\nvar\r\n\t// Map over jQuery in case of overwrite\r\n\t_jQuery = window.jQuery,\r\n\r\n\t// Map over the $ in case of overwrite\r\n\t_$ = window.$;\r\n\r\njQuery.noConflict = function( deep ) {\r\n\tif ( window.$ === jQuery ) {\r\n\t\twindow.$ = _$;\r\n\t}\r\n\r\n\tif ( deep && window.jQuery === jQuery ) {\r\n\t\twindow.jQuery = _jQuery;\r\n\t}\r\n\r\n\treturn jQuery;\r\n};\r\n\r\n// Expose jQuery and $ identifiers, even in\r\n// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\r\n// and CommonJS for browser emulators (#13566)\r\nif ( typeof noGlobal === strundefined ) {\r\n\twindow.jQuery = window.$ = jQuery;\r\n}\r\n\r\n\r\n\r\n\r\nreturn jQuery;\r\n\r\n}));\r\n"
          },
          "redirectURL": "",
          "headersSize": 226,
          "bodySize": 0,
          "_transferSize": 227,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 21.50699999947392,
        "timings": {
          "blocked": 13.685000000924337,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.2809999999999997,
          "wait": 6.8569999998217686,
          "receive": 0.6839999987278134,
          "_blocked_queueing": 9.180000000924338,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 8
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "10529",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/js/lockscreen.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"2233-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 782,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"2233-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2233,
            "mimeType": "application/javascript",
            "text": "\t//锁屏方法  需要引入 lockscreen.css\r\n\t$(function() {\r\n\t\t$(\"#lock_screen_dj\").click(function() {//点击“点我弹出层”时候\r\n\t\t\t$(\".warm-prompt\").show();//弹出提示层，之前是隐藏在body里面的\r\n\r\n\t\t\tvar sp_height = $(document).height();//获取当期窗口的高度\r\n\r\n\t\t\t$(\".sp_box\").css( {\r\n\t\t\t\t\"opacity\" : \"0.5\",\r\n\t\t\t\t\"height\" : sp_height\r\n\t\t\t});//锁屏层高度采用获取窗口的高度，从而达到锁全屏的目的。\r\n\r\n\t\t\t$(\".sp_box\").show();//显示锁屏层，此时锁屏层的宽在CSS里设置了100%\r\n\t\t})\r\n\t\t//下面部分代码是让弹出层，随滚动条滚动而滚动，并始终居中； 此方法有一个缺憾就是弹出层随滚动条滚动的时候有时候会轻微闪屏。建议在IE6下采用这段代码，而FF Chrome等高级浏览器在CSS样式里面定义.tc_box 的定义为：position:fixed, 并设定left,top,margin等值。使其居中，这样就只会在IE6下闪屏了。\r\n\r\n\t\t//附：IE6解决闪屏方法：body{ _background-image: url(about:blank);_background-attachment: fixed;}\r\n\r\n\t\tvar screenwidth, screenheight, mytop, getPosLeft, getPosTop\r\n\r\n\t\tscreenwidth = $(window).width();\r\n\r\n\t\tscreenheight = $(window).height();\r\n\r\n\t\tmytop = $(document).scrollTop();\r\n\r\n\t\tgetPosLeft = screenwidth / 2 - 200;\r\n\r\n\t\tgetPosTop = screenheight / 2 - 100;\r\n\r\n\t\t$(\".warm-prompt\").css( {\r\n\t\t\t\"left\" : getPosLeft,\r\n\t\t\t\"top\" : getPosTop\r\n\t\t});\r\n\r\n\t\t$(window).resize(function() {\r\n\r\n\t\t\tscreenwidth = $(window).width();\r\n\r\n\t\t\tscreenheight = $(window).height();\r\n\r\n\t\t\tmytop = $(document).scrollTop();\r\n\r\n\t\t\tgetPosLeft = screenwidth / 2 - 200;\r\n\r\n\t\t\tgetPosTop = screenheight / 2 - 100;\r\n\r\n\t\t\t$(\".tc_box\").css( {\r\n\t\t\t\t\"left\" : getPosLeft,\r\n\t\t\t\t\"top\" : getPosTop + mytop\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t\t$(window).scroll(function() {\r\n\r\n\t\t\tscreenwidth = $(window).width();\r\n\r\n\t\t\tscreenheight = $(window).height();\r\n\r\n\t\t\tmytop = $(document).scrollTop();\r\n\r\n\t\t\tgetPosLeft = screenwidth / 2 - 200;\r\n\r\n\t\t\tgetPosTop = screenheight / 2 - 100;\r\n\r\n\t\t\t$(\".warm-prompt\").css( {\r\n\t\t\t\t\"left\" : getPosLeft,\r\n\t\t\t\t\"top\" : getPosTop + mytop\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t\t\r\n\t\t$(\"#closeWarm_util\").click(function(){\r\n\t\t\t$(\".warm-prompt\").css(\"display\",\"none\");\r\n\t\t\t$(\".sp_box\").css(\"display\",\"none\");\r\n\t\t})\r\n\t})"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 20.190000001093722,
        "timings": {
          "blocked": 14.412999999529799,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.2469999999999999,
          "wait": 5.153999999784748,
          "receive": 0.37600000177917536,
          "_blocked_queueing": 9.191999999529799,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 9
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "10534",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/css/lockscreen.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"702-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "style"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 797,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"702-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 702,
            "mimeType": "text/css",
            "text": "\r\n\r\n.tc_box {\r\n\twidth: 400px;\r\n\theight: 200px;\r\n\tborder: 2px solid white;\r\n\tposition: absolute;\r\n\tz-index: 2000;\r\n\tbackground: #FFC;\r\n\tdisplay: none;\r\n}\r\n\r\n.sp_box {\r\n\twidth: 100%;\r\n\tposition: absolute;\r\n\tz-index: 1000;\r\n\tbackground: #000;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tdisplay: none;\r\n}\r\n.lock_title{\r\n\tpadding-top:10px;\r\n\tcolor:white;\r\n\tfont-size: 15px;\r\n\tfont-weight: 900;\r\n\ttext-align:center;\r\n\theight:30px;\r\n\tbackground-color: #B1E7AD;\r\n}\r\n\r\n.lock_problem{\r\n\tbackground-color: #f8b075;\r\n\twidth: 100px;\r\n\theight: 30px;\r\n}\r\n.lock_success{\r\n\tbackground-color: #f8b075;\r\n\twidth: 100px;\r\n\theight: 30px;\r\n}\r\n.lock_buttom{\r\n\tmargin-top: 30px;\r\n\ttext-align: center;\r\n}\r\n.lock_center font{\r\n\tfont-size: 12px;\r\n}\r\n"
          },
          "redirectURL": "",
          "headersSize": 223,
          "bodySize": 0,
          "_transferSize": 224,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 20.438999999896623,
        "timings": {
          "blocked": 14.846000001222478,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.11099999999999977,
          "wait": 4.843999999148073,
          "receive": 0.6379999995260732,
          "_blocked_queueing": 9.197000001222477,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 17
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "10529",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/css/master.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"4972-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "style"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 794,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"4972-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 4972,
            "mimeType": "text/css",
            "text": "@charset \"utf-8\";\r\n*{margin:0px; padding:0px;}\r\nhtml,body {margin: 0px; padding: 0px; font-family:宋体,Microsoft YaHei,sans-serif,Arial; font-size:12px;}\r\nh2 ,h3{font-weight:normal; font-size:12px;}\r\n.fl{float:left;}\r\n.fr{float:right;}\r\nem{color:#008000; font-style:normal;}\r\ntable {border-collapse:collapse;}\r\n\r\n/***首页广告***/\r\n.banner-w{height:300px;}\r\n.banner{margin:0 auto;min-width:1000px;max-width:1350px;height:300px; overflow:hidden;}\r\n/***二级页面广告***/\r\n.banner02-w{height:120px; background:url(../images/bnr_02.png) repeat scroll;}\r\n.banner02{margin:0 auto;min-width:1000px;max-width:1200px;height:120px; overflow:hidden;}\r\n\r\n/***首页主菜单***/\r\n.menu-w{margin:2px 0;}\r\n.menu-w li{width:100px;float:left;margin-left: 40px;margin-right: 40px;}\r\n.menu-w li.special{float:right;margin:0;}\r\n.menu-w li a{ color:#000; cursor:pointer; display:block;}\r\n.menu-w li a:hover{color:#c6884c;}\r\n.menu-w li h3{ font-size:12px; font-weight:normal; text-align:center;height:60px;line-height:30px;margin-top:10px;}\r\n.menu{width:100px;height:100px;}\r\n/***\r\n.menu-tut{background:url(../images/project/icon_tuition.png) no-repeat scroll left 0;}\r\n.menu-elc{background:url(../images/project/icon_electric.png) no-repeat scroll left 0;}\r\n.menu-int{background:url(../images/project/icon_internet.png) no-repeat scroll left 0;}\r\n.menu-cet{background:url(../images/project/icon_CET.png) no-repeat scroll left 0;}\r\n.menu-pak{background:url(../images/project/icon_parking.png) no-repeat scroll left 0;}\r\n.menu-ord{background:url(../images/project/icon_order.png) no-repeat scroll left 0;}\r\n***/\r\n\r\n/***二级子菜单***/\r\n.subnav{background:#f1f1f1; }\r\n.subnav h3{width:1000px;margin:0 auto;margin-left:3.6cm; height:26px; line-height:26px; font-weight:normal; font-size:12px;}\r\n.subnav h3 a { color:#000; }\r\n.subnav h3 a:hover{color:#c6884c; text-decoration:underline;}\r\n\r\n/***二级左侧栏***/\r\n.sidebar-w{background:#083575;height:364px;width:220px; border-bottom:2px solid #a76c11;}\r\n.sidebar-name{border-bottom:2px solid #a76c11;}\r\n.sidebar{width:219px;margin-left:1px;}\r\n.sidebar li{height:38px;padding-left:12px;margin-bottom:15px;}\r\n.sidebar li a .on01{color:#083575;}\r\n.sidebar li:hover ,.on01{background:#fce2d5;  }\r\n.sidebar li a{color:#ffffff;height:38px; line-height:38px;display:block; cursor:pointer;}\r\n.sidebar li a:hover ,.sidebar li .on01{color:#083575; }\r\n.arrow{ height:11px;width:11px;float:right;background:url(../images/arrow.png) no-repeat;margin-right:24px; margin-top:-10px;}\r\n.sidebar li:hover .arrow ,.on01 {background-position:right -11px;}\r\n\r\n/***右侧主体内容***/\r\n.cont-fr{border:1px solid #ddd;}\r\n/***右侧头部***/\r\n.cont-fr-tit{ background:#f1f1f1;}\r\n.cont-fr-tit h2{font-weight:normal; font-size:12px;height:38px; line-height:38px;width:756px;}\r\n.tit-name{height:38px;border-top:1px solid #ddd;background:#f9f9f9; }\r\n.tit-name p{height:38px;line-height:38px;float:left;}\r\n\r\n/***右侧详情***/\r\n.detail{padding:25px;margin-top:8px;height:300px;}\r\n.detail input{height:24px;line-height:24px;padding: 0 8px;width:120px;}\r\nselect#subpayproId{height:24px;line-height:24px;width:138px;}\r\n.detail p{ display:inline;}\r\n\r\n/***按钮***/\r\n.button-w{border-top:1px solid #ddd; overflow:hidden;}\r\n.button-w input{float:right;background:url(../images/pay.gif) no-repeat;width:68px;height:26px; color:#fff;margin-left:48px; border:none; cursor:pointer;color: #fff;padding-bottom:5px;width:100px;height:25px;overflow: hidden;}\r\n.button-w input:hover{ background-position:0 -36px;}\r\n\r\n/***订单列表***/\r\n.tr01{background:#f9f9f9;}\r\n.tb-void th {background:#f9f9f9;height:38px;line-height:38px;\r\ncolor:#999; font-weight:normal;}\r\n.tb-void td {height:38px;border: 1px solid #ddd; text-align:center;color:#999;}\r\n.tb-void td  a:hover{text-decoration:underline;}\r\n\r\n/***页码***/\r\n.page-w{border:1px solid #ddd;background:#f1f1f1; overflow:hidden;padding:0 12px;}\r\n.page-total {height:38px;line-height:38px;float:left;}\r\n.pages div{height:38px;line-height:38px;display:inline;margin:0 4px;}\r\n.pages a:hover{color:#083575;text-decoration:underline;}\r\n\r\n/***支付方式***/\r\n.payment-w{padding:10px 20px 20px 20px;height:320px}\r\n.payment-w p{height:38px;line-height:38px;float:left;}\r\n.mode-pay{padding:10px 0 20px 40px; overflow:hidden;}\r\n.mode-pay p{width:100%;}\r\n.logo_list li{width:188px;height:38px;float: left;margin-right:40px; margin-bottom:15px;}\r\n.bank-logo {border: 1px solid #ddd;width:188px; height:38px;}\r\n.bank-logo:hover{border:1px solid #154280;}\r\n\r\n/***支付成功***/\r\n.sucs-tis{height:40px;background:url(../images/success.png) no-repeat scroll left;padding-left:50px; margin:40px 0px 40px 260px;}\r\n.sucs-tis p{width:100%;height:20px;line-height:20px;float:left;}\r\n\r\n/***左侧导航栏***/\r\n.left-list-top{ background-image:url(../images/chaxun-top_03.png); background-repeat:no-repeat;float:left; font-size:14px; font-weight:bold; color:#FFF;width:166px; line-height:28px; padding-left:14px; padding-bottom:13px;}"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 27.406999999584514,
        "timings": {
          "blocked": 20.463999999489403,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.08999999999999986,
          "wait": 6.239999999937485,
          "receive": 0.6130000001576263,
          "_blocked_queueing": 9.207999999489402,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 18
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "10534",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/css/public.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"7064-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "style"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 794,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"7064-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 7064,
            "mimeType": "text/css",
            "text": "@charset \"utf-8\";\r\n\r\nhtml{-webkit-text-size-adjust:none;}\r\n.hidden{display:none;}\r\n.clear:after{content:'\\20'; display:block;height:0; clear:both;}\r\n.cleat{*zoom:1;}\r\n.fl{float:left;}\r\n.fr{float:right;}\r\n.frcenter{width: 850px;}\r\n\r\na{outline:none; blr:expression(this.onFocus=this.blur()); text-decoration:none; color:#666;}\r\na:hover{color:#c6884c;}\r\n.mt10{ margin-top:10px;}\r\nul {list-style: outside none none;}\r\n.c1{color:#000;}\r\n.c2{color:#666;}\r\n.c3{color:#999;}\r\n.c4 ,a.c4{color:#c6884c;}/*中黄*/\r\n.c5 ,a.c5{color:#083575;}/*深蓝*/\r\n.c6 ,a.c6{color:#a76c11;}/*土黄*/\r\n.red{color:red;}\r\n.mt15{margin-top:15px;}\r\n.ml5{margin-left:5px;}\r\n.ml10{margin-left:10px;}\r\n.ml12{margin-left:12px;}\r\n.ml15{margin-left:15px;}\r\n.ml48{margin-left:48px;}\r\n.mr10{margin-right:10px;}\r\n.mb4{margin-bottom:4px;}\r\n.mb10{margin-bottom:10px;}\r\n.mb20{margin-bottom:20px;}\r\n.pl8{padding-left:8px;}\r\n.pl12{padding-left:12px;}\r\n.pt15{padding-top:15px;}\r\n.lf00{border:1px solid #ddd;}\r\n.lf01{border:1px solid #ddd;}\r\n.lf02{border:1px solid #ccc;}\r\n.lf03{border:1px solid #154280;}\r\n.ht38{height:38px;}\r\n.wh718{width:718px;}\r\ninput:hover , input:active{border:solid 1px #1a8cf2;}\r\n\r\n\r\n/***顶部***/\r\n.top-w{height:30px; background:#f4f4f4 none repeat scroll 0% 0%;border-bottom: 1px solid #E5E5E5;}\r\n.top{width:1000px;margin:0px auto;color:#666;height:30px;line-height:30px;font-family:Microsoft YaHei;}\r\n.top li{float:left;height:30px;line-height:30px;padding:0 18px 0 17px;z-index:1000;background:url(../images/l2.gif) no-repeat scroll right 10px;position:relative;}\r\n.top li a:hover{color:#c6884c; text-decoration:underline;}\r\n\r\n/***头部***/\r\n.header-w{width:1000px;margin:0px auto; height:82px;}\r\n.logo-w{ overflow:hidden; float:left;}\r\n.logo{margin:10px 0;height:62px; width:254px;}\r\n.sys-name{margin:10px 20px;}\r\n.nav{height:46px;margin-top:36px;width:460px;padding:0 20px; }\r\n.nav li{float:left;height:43px;line-height:43px;margin:auto 20px; font-size:14px;font-family:Microsoft YaHei;}\r\n.nav li a{display:block;}\r\n.nav li a:hover ,.on{color:#c6884c;}\r\n.nav li:hover ,.on{ border-bottom:3px solid #c6884c;}\r\n\r\n\r\n\r\n/***主体***/\r\n.content-w{padding:18px 0;}\r\n.content,.msg{width:1080px;margin:0 auto; overflow:hidden;}\r\n/***提示信息***/\r\n.msg{height:50px; border-bottom:1px solid #ccc; }\r\n.msg p{float:left;height:30px; line-height:30px;margin-top:10px;color:#666;}\r\n.msg p.msg-bt01{color:#244e5c;margin-left:13px; }\r\n/**错误信息提示样式***/\r\n.errormsg{color: red;}\r\n\r\n/***底部***/\r\n.bottom-w{height:44px;background:#7f7f7f;}\r\n.copyright{width:1080px;margin:0 auto;}\r\n.copyright p{height:44px; line-height:44px;color:#eee;}\r\n/*平台介绍*/\r\n.jieshao{ width:1200px; overflow:hidden; border:0px solid #b6b6b6; border-radius:2px; float:right;background-color:#FFF;}\r\n.jieshao-1{ width:242px; float:left; padding-bottom:10px;}\r\n.jieshao-1 li{ margin-top:10px; margin-left:140px;}\r\n.jieshao-1 img{ float:left;}\r\n.jieshao-1 .js-img{ padding-left:10px;font-size:14px; color:#9709a1; font-weight:bold;}\r\n.jieshao-1 .js-img:hover{ padding-left:10px;font-size:14px; color:#906; font-weight:bold;}\r\n.jieshao-1 a{ font-size:12px; color:#5a5a5a;padding-left:35px;}\r\n.js-img:hover{font-size:14px; color:#9709a1; font-weight:bold;}\r\n.jieshao-1 a:hover{ font-size:12px; color:#8c8c8c;}\r\n/**查询**/\r\n.right-chaxun{width:792px; line-height:40px;height:40px; float:right; background-color:#ffffdb;}\r\n.right-chaxun input[type=text]{ outline:none;width:170px; height:24px; line-height:24px; border:1px solid #baa38f; font-size:14px;}\r\n.right-chaxun input[type=text]:hover{box-shadow:0 0 2px #C90;}\r\n.right-chaxun input[type=button]{ outline:none;  width:50px; height:26px; line-height:26px; background-color:#2168cd; border:none; border-radius:2px; font-size:14px; color:#FFF; cursor:pointer;}\r\n.right-chaxun input[type=button]:hover{ background-color:#0080c0;}\r\n.right-text{ float:left;}\r\n/**底部**/\r\n/*底部*/\r\n.footer{ height:80px; background-color:#408080; bottom:0; width:100%;}\r\n.footer-company{font-size:12px; color:#88898b;width:100%; text-align: center;}\r\n/***锁屏***/\r\n.warm-prompt{width:400px; height:255px; background-image:url(../images/warm-prompt_03.png); display: none;background-repeat:no-repeat;position: absolute;z-index: 2000}\r\n.warm-prompt-form{width:400px; height:120px; margin:70px 0; float:left;}\r\n.warm-prompt-form-1{height:38px; width:400px; border-bottom:1px dashed #CCCCCC;}\r\n.warm-prompt-form-1 p{ width:350px; float:left;color:#333; letter-spacing:1px; line-height:38px; margin-left:36px;  }\r\n.warm-prompt-form-1 span{color:#F00;}\r\n.warm-prompt-form-3 span{color:#F00;letter-spacing:1px;line-height:38px;}\r\n.warm-prompt-form-3{line-height:38px; width:400px;line-height:38px;}\r\n.warm-prompt-form-3 p{width:90px;margin-left:36px; display:block; float:left;}\r\n.warm-prompt-form-3 input[type=submit] {text-align:center; \r\n    padding:0px 10px; \r\n    line-height:20px; \r\n    border:1px solid #FF1500; \r\n    border-radius:3px; \r\n    background: -webkit-gradient(linear, left top, left 24, from(#FF6900), color-stop(0%, #FF9800), to(#FF6900)); \r\n    background: -moz-linear-gradient(top, #FF6900, #FF9800 0, #FF6900 24px); \r\n    background:-o-linear-gradient(top, #FF6900, #FF9800 0, #FF6900 24px);\r\n\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FF9800', endColorstr='#FF6900'); \r\n    -ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr='#FF9800', endColorstr='#FF6900')\"; \r\n    height:24px; \r\n    cursor:pointer; \r\n    letter-spacing: 4px; \r\n   \r\n    color:#FFF; \r\n    font-weight:bold; float:left; margin-top:6px;}\r\n.warm-prompt-form-3 input[type=submit]:hover { \r\n    background: -webkit-gradient(linear, left top, left 24, from(#FF9800), color-stop(0%, #FF6900), to(#FF9800)); \r\n    background: -moz-linear-gradient(top, #FF9800, #FF6900 0, #FF9800 24px); \r\n    background:-o-linear-gradient(top, #FF6900, #FF6900 0, #FF9800 24px); \r\nfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FF6900', endColorstr='#FF9800'); \r\n    -ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr='#FF6900', endColorstr='#FF9800')\"; \r\n} \r\n.warm-prompt-form-3 input[type=text] { width:120px; height:24px;line-height:24px ;outline:none; border-radius:3px; float:left; border: 1px solid #9dbfc3; margin-top:6px; margin-right:5px;}\r\n.warm-prompt-close input[type=button]{display:block; background-color:#86dafc; width:50px; float:right; border:none; height:25px; font-size:14px; color:white;cursor:pointer; margin-top:1px; margin-right:1px; }\r\n.warm-prompt-close input[type=button]:hover{background-color:#73b9d6;}\r\n.button-1 input[type=button] {text-align:center; \r\n    padding:0px 10px; \r\n    line-height:30px; \r\n    border:1px solid #FF1500; \r\n    border-radius:3px; \r\n    background-image:url(../images/1_05.png);\r\n    background-repeat:no-repeat; \r\n    outline:none; border:none; \r\n    width:96px; height:31px; \r\n    font-size:14px; \r\n    color:#ffffff; \r\n    letter-spacing: 2px; \r\n     float:left;}\r\n.button-1 input[type=button]:hover { \r\n    background-image:url(../images/1_03.png);\r\n} "
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 25.63399999962712,
        "timings": {
          "blocked": 20.614000000297906,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.0600000000000005,
          "wait": 4.4129999996870755,
          "receive": 0.5469999996421393,
          "_blocked_queueing": 9.248000000297907,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 19
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "10512",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/js/common.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"10332-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 779,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"10332-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 10332,
            "mimeType": "application/javascript",
            "text": "// 去除字符串两端的空白字符\r\nString.prototype.trim = function() {    \r\n\treturn this.replace(/(^\\s*)|(\\s*$)/g, \"\");\r\n};\r\n//校验ip地址是否合法\r\nfunction isIP(strIP) { \r\n    var re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式 \r\n    if(re.test(strIP)) \r\n    { \r\n       if( RegExp.$1 > 0 && RegExp.$1 <256 &&\r\n           RegExp.$2 >= 0 && RegExp.$2 <256 &&\r\n           RegExp.$3 >= 0 && RegExp.$3 <256 &&\r\n           RegExp.$4 > 0 && RegExp.$4 <256 ) \r\n       return true; \r\n      } \r\n   return false; \r\n} \t\r\n//核对 Ip 是否合法。  合法：true,  不合法：false\r\nfunction checkip(ip){\r\n    var pcount = 0\r\n    var ip_length = ip.length \r\n    var ip_letters = \"1234567890.\" \r\n    for (p=0; p < ip_length; p++){\r\n\t\tvar ip_char = ip.charAt(p)\r\n\t\tif (ip_letters.indexOf(ip_char) == -1)\r\n\t\t{\r\n\t\t     return false\r\n\t\t}\r\n    }\r\n    for (var u = 0; u < ip_length; u++) { (ip.substr(u,1) == \".\") ? pcount++ : pcount }\r\n    if(pcount != 3) { return false }\r\n    firstp = ip.indexOf(\".\")\r\n    lastp = ip.lastIndexOf(\".\")\r\n    str1 = ip.substring(0,firstp)\r\n    ipstr_tmp = ip.substring(0,lastp)\r\n    secondp = ipstr_tmp.lastIndexOf(\".\")\r\n    str2 = ipstr_tmp.substring(firstp+1,secondp)\r\n    str3 = ipstr_tmp.substring(secondp+1,lastp)\r\n    str4 = ip.substring(lastp+1,ip_length)\r\n    if (str1 == '' || str2 == '' || str3 == '' || str4 == '') { return false }\r\n    if (str1.length > 3 || str2.length > 3 || str3.length > 3 || str4.length > 3) { return false }\r\n    if (str1 <= 0 || str1 > 255) { return false }\r\n    else if (str2 < 0 || str2 > 255) { return false }\r\n    else if (str3 < 0 || str3 > 255) { return false }\r\n    else if (str4 < 0 || str4 > 255) { return false }\r\n    return true\r\n}\r\n//验证字符串是否由相同字符组成\r\nfunction isEqual(str){\r\n   \tif(isEmpty(str)){\t\t\t\t\r\n\t\treturn true;\r\n\t}\r\n\tvar s=str.substring(0,1); \r\n\tvar num=(str.split(s)).length-1;\r\n\tif(num == str.length){\r\n\t\treturn true;\r\n\t}else{\r\n\t\treturn false;\r\n\t}\r\n}\r\n// 判断字符串是否为空\r\nfunction isEmpty(obj)\r\n{\r\n\tif(obj.trim() == \"\"){\r\n\t\treturn true;\r\n\t}else{\r\n\t\treturn false;\r\n\t}\r\n}\r\n//验证金额的合法性\r\nfunction isCurrency(obj){   \r\n  var   reg =/^(([1-9]+\\d*)|(0{1,1}))(\\.\\d{0,2})?$/;\r\n  return isEmpty(obj) || reg.test(obj);\r\n}\r\n\r\n//判断是否为数字\r\nfunction isNaNs(val) {\r\n    var re = /^[0-9]*$/;\r\n    return re.test(val);\r\n}\r\n//判断是否为n位数字\r\nfunction isNum(val, num) {\r\n\tvar re = \"^[0-9]{\" + num + \"}$\";\r\n\treturn new RegExp(re).test(val);\r\n}\r\n//校验用户名不可以为特殊字符\r\nfunction nameValidate(name) {\r\n    var re = new RegExp(\"[(\\#)(\\$)(\\%)(\\&)]+\");\r\n    return re.test(name);\r\n}\r\n//判断是否为浮点数\r\n/**function isFloat(val){\r\n\treturn val.match(new RegExp(\"^([0-9]+)(\\.\\d)?$\"));\r\n}**/\r\n//判断是否为数字或字母\r\nfunction isLicit(str){\r\n    var re = /^[0-9a-zA-Z]*$/;\r\n    return re.test(str);\r\n}\r\n//验证证件号码格式\r\nfunction checkIdserialLetter(str){\r\n\tvar result = false;\r\n//\tvar strTmp = str.substring(2,str.length-2);\r\n//\tvar con1 = /^[0-9A-F]*$/;\r\n//\tvar re1 = con1.test(strTmp);\r\n//\tvar con2 = /^[0-9a-zA-Z]*$/;\t\r\n//\tvar re2 = con2.test(str);\r\n//\tif(re1 && re2){\r\n//\t\tresult = true;\r\n//\t}\r\n//\treturn result;\r\n\tvar regEx=/^[0-9a-zA-Z]{2}[0-9]*$/;\r\n\tvar re=regEx.test(str);\r\n\tif(re){\r\n\t\t\r\n\t\tresult=true;\r\n\t}\r\n\treturn result;\r\n}\r\n//去除首部‘0’字符\r\nfunction removeZero(str){\r\n\tif(str==0) return '0';\r\n   \tvar ch;  \r\n   \tif(isEmpty(str)){\t\t\t\t\r\n\t\treturn \"\";\r\n\t}\t\t\r\n\ttry{\t\t\t\r\n\t\tfor(i=0;i<str.length;i=i+1){\r\n\t\t\tch = str.charAt(i);\r\n\t\t\tif(ch == '0'){\t\t\t\t\t\r\n\t\t\t\tcontinue;\r\n\t\t\t}else{\r\n\t\t\t   return str.substr(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}catch(e){\r\n\t\treturn \"\";\r\n\t}\t\t\r\n}\r\n//去除尾部‘0’字符\r\nfunction removeAfterZero(str){\r\n\tvar len = str.indexOf(\"0\");\r\n\tif(len<0){\r\n\t\treturn str;\r\n\t}else{\r\n\t\treturn str.substr(0,len);\r\n\t}\r\n}\r\n//金额格式转换：元转成分\r\nfunction yuanToFen(obj){\t\r\n\tvar str,posIndex;\t\r\n\tif(obj === undefined  || isEmpty(obj)){\r\n\t\treturn \"0\";\r\n\t}else{\r\n\t\tvar posIndex = obj.indexOf(\".\");\r\n\t\tif(posIndex>0){\r\n\t\t\tvar len = obj.length;\t\t\r\n\t\t    if(len == posIndex+1){\t\t\t    \t   \t    \t\t\r\n\t\t\t\tstr = obj.substr(0,posIndex)\r\n\t\t\t\tif(str == \"0\"){\r\n\t\t\t    \tstr = \"\";\r\n\t\t\t    }\r\n\t\t\t    str+=\"00\";\r\n\t\t\t}else if(len == posIndex+2){\r\n\t\t\t    str = obj.substr(0,posIndex);\r\n\t\t\t    if(str == \"0\"){\r\n\t\t\t    \tstr = \"\";\r\n\t\t\t    }\r\n\t\t\t    str += obj.substr(posIndex+1,1)+\"0\";\r\n\t\t\t}else if(len == posIndex+3){\r\n\t\t\t\tstr = obj.substr(0,posIndex);\r\n\t\t\t\tif(str == \"0\"){\r\n\t\t\t    \tstr = \"\";\r\n\t\t\t    }\r\n\t\t\t    str += obj.substr(posIndex+1,2);\r\n\t\t\t}else{\r\n\t\t\t\tstr = obj.substr(0,posIndex);\r\n\t\t\t\tif(str == \"0\"){\r\n\t\t\t    \tstr = \"\";\r\n\t\t\t    }\r\n\t\t\t    str += obj.substr(posIndex+1,2);\r\n\t\t\t}\t\t\t\t\r\n\t\t}else{\r\n\t\t\tstr = obj + \"00\";\r\n\t\t}\r\n\t}\t\r\n\tstr = removeZero(str);\r\n\tif(str === undefined  || isEmpty(str) || str == 0 ){\r\n\t\tstr = \"0\";\r\n\t}\r\n\treturn str;\t\r\n}\r\n//金额格式转换：分转成元\r\nfunction fenToYuan(obj){\t\r\n\tvar str,posIndex,len;\t\r\n\tobj = removeZero(obj);\r\n\tvar tmp = obj.indexOf(\"-\");\r\n\tif(obj === undefined  || isEmpty(obj) || obj == 0){\r\n\t\tstr = \"0.00\";\r\n\t}else if(tmp>=0){\r\n\t\tlen = obj.length;\r\n\t\tif(len==2){\r\n\t\t\tstr = \"-0.0\"+obj.substr(1);\r\n\t\t}else if(len==3){\r\n\t\t\tstr = \"-0.\"+obj.substr(1);\r\n\t\t}else{\r\n\t\t\tstr = obj.substr(0,len-2);\t\t\r\n\t\t\tstr = str+\".\"+obj.substr(len-2,2);\r\n\t\t}\r\n\t}else{\r\n\t\tlen = obj.length;\t\t\r\n\t\tif(len==1){\r\n\t\t\tstr = \"0.0\"+obj;\r\n\t\t}else if(len==2){\r\n\t\t\tstr = \"0.\"+obj;\r\n\t\t}else{\r\n\t\t\tstr = obj.substr(0,len-2);\t\t\r\n\t\t\tstr = str+\".\"+obj.substr(len-2,2);\r\n\t\t}\t\t\r\n\t}\r\n\tif(str === undefined  || isEmpty(str)){\r\n\t\tstr = \"0.00\";\r\n\t}\r\n\treturn str;\r\n}\r\n\r\n//得到精确的除法结果\r\nfunction accDiv(arg1,arg2){ \r\n\tvar t1=0,t2=0,r1,r2; \r\n\ttry{t1=arg1.toString().split(\".\")[1].length}catch(e){} \r\n\ttry{t2=arg2.toString().split(\".\")[1].length}catch(e){} \r\n\twith(Math){ \r\n\t\tr1=Number(arg1.toString().replace(\".\",\"\")) \r\n\t\tr2=Number(arg2.toString().replace(\".\",\"\")) \r\n\t\treturn (r1/r2)*pow(10,t2-t1); \r\n\t} \r\n}\r\n\r\n//得到精确的乘法结果\r\nfunction accMul(arg1,arg2) { \r\n\tvar m=0,s1=arg1.toString(),s2=arg2.toString(); \r\n\ttry{m+=s1.split(\".\")[1].length}catch(e){} \r\n\ttry{m+=s2.split(\".\")[1].length}catch(e){} \r\n\treturn Number(s1.replace(\".\",\"\"))*Number(s2.replace(\".\",\"\"))/Math.pow(10,m) \r\n}\r\n\r\n//得到精确的加法结果 \r\nfunction accAdd(arg1,arg2){ \r\n\tvar r1,r2,m; \r\n\ttry{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0} \r\n\ttry{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0} \r\n\tm=Math.pow(10,Math.max(r1,r2)) \r\n\treturn (arg1*m+arg2*m)/m \r\n} \r\n//得到精确的减法结果 \r\nfunction accSub(arg1,arg2){\r\n     var r1,r2,m,n;\r\n     try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\r\n     try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\r\n     m=Math.pow(10,Math.max(r1,r2));\r\n     //last modify by deeka\r\n     //动态控制精度长度\r\n     n=(r1>=r2)?r1:r2;\r\n     return ((arg1*m-arg2*m)/m).toFixed(n);\r\n}\r\n//保留两位小数\r\nfunction changeTwoDecimal(x){\r\n\tvar f_x = parseFloat(x);\r\n\tvar f_x = Math.round(x*100)/100;\r\n\tvar s_x = f_x.toString();\r\n\tvar pos_decimal = s_x.indexOf('.');\r\n\tif (pos_decimal < 0){\r\n\t\tpos_decimal = s_x.length;\r\n\t\ts_x += '.';\r\n\t}\r\n\twhile (s_x.length <= pos_decimal + 2){\r\n\t\ts_x += '0';\r\n\t}\r\n\treturn s_x;\r\n}\r\n//验证手机号\r\nfunction isMobile(mobile){\r\n\tvar reg = /^1[3|4|5|7|8][0-9]\\d{4,8}$/;\r\n\tif(reg.test(mobile))  {  \r\n\t       return  true;  \r\n\t}  \r\n\treturn false;\r\n}\r\n//验证邮箱\r\nfunction isEmail(email){\r\n\tvar reg = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\r\n\tif(reg.test(email))  {  \r\n\t       return  true;  \r\n\t}  \r\n\treturn false;\r\n}\r\n//验证身份证号\r\nfunction isCardNo(card)  \r\n{  \r\n   // 身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X  \r\n   var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;  \r\n   if(reg.test(card) === false)  \r\n   {  \r\n       return  false;  \r\n   }  \r\n   return true;\r\n} \r\n//当前时间与输入订单时间做比较，只比较日期   1 大于当前  0等于当前   -1 小于 当前\r\nfunction compareDate(comDate){\r\n\tvar today=new Date();\r\n\tvar year=today.getFullYear();\r\n\tvar month=today.getMonth()+1;\r\n\tvar day=today.getDate();\r\n\t//1 大于  0等于   -1 小于  当前\r\n\t\r\n\t//比较年  大于当前年 直接返回1\r\n\tif(comDate.getFullYear() > year){\r\n\t\treturn 1;\r\n\t}else if(comDate.getFullYear() == year){\r\n\t\tif((comDate.getMonth()+1) > month){\r\n\t\t\treturn 1;\r\n\t\t}else if((comDate.getMonth()+1) < month){\r\n\t\t\treturn -1;\r\n\t\t}else{\r\n\t\t\tif(comDate.getDate() == day){\r\n\t\t\t\treturn 0;\r\n\t\t\t}else if(comDate.getDate() < day){\r\n\t\t\t\treturn -1;\r\n\t\t\t}else{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\treturn -1;\r\n\t}\r\n}\r\n/**\r\n * 把\"yyyy-MM-dd\"转换成date格式\r\n * @return\r\n */\r\nfunction parseDate(strDate){\r\n\tvar dependedVal=strDate;\r\n    //根据日期字符串转换成日期\r\n    var regEx = new RegExp(\"\\\\-\",\"gi\");\r\n    dependedVal=dependedVal.replace(regEx,\"/\");\r\n    //parse 需要 2005/3/4 这种格式!法克!\r\n    var milliseconds=Date.parse(dependedVal);\r\n    var dependedDate=new Date();\r\n    dependedDate.setTime(milliseconds);\r\n\treturn dependedDate;\r\n}\r\n\r\n\r\n//手机页面自动跳转手机版校园缴费平台\r\nfunction mobile_device_detect(url) {\r\n\tvar thisOS = navigator.platform;\r\n\tvar os = new Array(\"iPhone\", \"iPod\", \"iPad\", \"android\", \"Nokia\",\r\n\t\t\t\"SymbianOS\", \"Symbian\", \"Windows Phone\", \"Phone\", \"Linux armv71\",\r\n\t\t\t\"MAUI\", \"UNTRUSTED/1.0\", \"Windows CE\", \"BlackBerry\", \"IEMobile\");\r\n\tfor (var i = 0; i < os.length; i++) {\r\n\t\tif (thisOS.match(os[i])) {\r\n\t\t\twindow.location = url;\r\n\t\t}\r\n\t}\r\n\t// 因为相当部分的手机系统不知道信息,这里是做临时性特殊辨认\r\n\tif (navigator.platform.indexOf('iPad') != -1) {\r\n\t\twindow.location = url;\r\n\t}\r\n\t// 做这一部分是因为Android手机的内核也是Linux\r\n\t// 但是navigator.platform显示信息不尽相同情况繁多,因此从浏览器下手，即用navigator.appVersion信息做判断\r\n\tvar check = navigator.appVersion;\r\n\tif (check.match(/linux/i)) {\r\n\t\t// X11是UC浏览器的平台 ，如果有其他特殊浏览器也可以附加上条件\r\n\t\tif (check.match(/mobile/i) || check.match(/X11/i)) {\r\n\t\t\twindow.location = url;\r\n\t\t}\r\n\t}\r\n\t// 类in_array函数\r\n\tArray.prototype.in_array = function(e) {\r\n\t\tfor (i = 0; i < this.length; i++) {\r\n\t\t\tif (this[i] == e)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}"
          },
          "redirectURL": "",
          "headersSize": 225,
          "bodySize": 0,
          "_transferSize": 226,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 27.774999998655407,
        "timings": {
          "blocked": 21.239000000257512,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.07500000000000107,
          "wait": 5.851999999594408,
          "receive": 0.6089999988034833,
          "_blocked_queueing": 9.26400000025751,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 89
        },
        "_priority": "Medium",
        "_resourceType": "image",
        "cache": {},
        "connection": "10591",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/images/logo.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"29045-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 842,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"29045-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 29045,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 225,
          "bodySize": 0,
          "_transferSize": 226,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 26.818000000275788,
        "timings": {
          "blocked": 20.034000001032837,
          "dns": -1,
          "ssl": 1.986,
          "connect": 1.992,
          "send": 0.10400000000000009,
          "wait": 2.99699999976065,
          "receive": 1.690999999482301,
          "_blocked_queueing": 20.034000001032837,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 90
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "10512",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/images/sys-name.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"3381-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 845,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"3381-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3381,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAK4AAABJCAYAAACkTR3UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkRGMTcxQ0IyRjBCQTExRTVBNkRGRjczRTAyQTM4NjJDIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkRGMTcxQ0IzRjBCQTExRTVBNkRGRjczRTAyQTM4NjJDIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6REYxNzFDQjBGMEJBMTFFNUE2REZGNzNFMDJBMzg2MkMiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6REYxNzFDQjFGMEJBMTFFNUE2REZGNzNFMDJBMzg2MkMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7X2ScwAAAJpUlEQVR42uxd0XHbOBCFM26AVwJdAv1zM/mkSpBKoEoQSxBLEEsQSxA/PXM/YQlCCWEJOtKzGz+vARKgJMfJ7JvB2JIpElg87L5dQMnD5XIxCsWfhm9qAoUSV6FQ4ioUSlyFElehUOIqFEpchRJXoVDiKhRKXIVCiatQ4ioUSlyFQomrUOIqFEpchUKJq1DiKhRKXIVCiatQKHEVSlyFQomrUChxFUpcheLr4DHm4u/f/1WLfS7SoRVDa4bW/emDeXn577d63IKa4rZIiKgSu6H9GFr+tw14cITpZxJ3fNhhaGcytgsZXXMgwyd/ia1HAp2Gtr7DvXOy6Qnes0Nrwe7G8bu5U18KmrsdzeetSTve8zz8PAwt+Qzi1mA834AshLm9mIx7eSs29rhYfg7tQs+OMUoWQMqcJlNif2UkaoikuSBmB31j73umMe5uYDceM8/ThX4e6L1rxxUSwY931bhASkbruaYf2oYGvybjJPR+KI70mQaeyeGUf6bwmvvWU0toYkfDrAI1Yk4T1VD/XRPd0/1cn2USrCJtKu2zB+eQeq5JoK92IWEOnrnroLWR8xbj1RdHkMeFD7UBg2HyruF1DDqamFw8l1tHk9bDe5L4a5rgJIJAvr4yiTYzY1mSRO2orxae39LrNf29BI+cU+QrryBVTfdD0pyo/5s7kRW17Q6c3+aziGsiVnlDxFkDMeqAz6M3fwgIedKjd/TMbiIyuOTGeP3W8fc1jaWZIP34/GqBLTfghU4gG9AzpUBicyVppSNAZ5PDQkHPXt+wsnGg+76S9uXlv/6ziNtPEC8F/Zs6NJsJnGA74xkz8D5shJXD84UauxAkchG3AvljhRfkBRkzCRndJwFbsQfei0pDAclacyePyBLLij5yJWkLOc5Sb7ujcX4gLXniZHivuxdxeZBMzo5+P3oIznVIG6GZekfYTig5SUVIbR2eMGZiE/AyFrLpDXg4TjgbIFkhiFst8DwZ3aMDSdOCnThx2ghCpdCPPnLRHMB59I6k2nrkU38laTMai/V42nH8p+E6Hk/t88ZLiMtk3QuS/DO0JzKk9ejOpQsEf3+i588Zso8g7ZGIUovwbGEyN/BcC+GavXENobaABT0V0luy5wruU4hKQgZkkwmbjBirQJtbmr/xec+O/llPJGqvmEe283jvZxchR087kHZDcum1mjG83g7vt9HEJfeNYdkV9ksYcO3IHteQULU3ILP1ZPTGkWXPJWZ78FpnIMcGosWRPH1CY02B1DlUNs5AWPai/cxkyoqEgQnu4ZpGVE0sELqITEJrGncKi86XNCa0IG5B2sRHWuCaEWXBsc774TMhHncHq64HD1SZj1uRe9CCNWhMvEdHhugXGiAFT5Q5askpabE+kLg9VChaCGUN9DcRfd7DuHFLdk2EbwLGkgqi1jSWjrygJE/t+HwP99hG6HmWCb7NoR607cpcl5TlsEjGPqYDEXNHSTMV84HkzaVNZ4k7MH3LWTadVTiAtuscneRSRw0dWUHCkYmsNVQq7IQ8QW+2hfJRrFQohQzKSY5InZ4JI1dg1Ce6bk8kfAgkbkL3KYGAVWCJ7QRetg1cLIgKvK8vSXPJiMSRwPkIexAR+uhwGO9yIPastJt2gvr1VRo3Bc9pHZ45o05sxfsNeOhdpJF7MHQNCRrXiX86EgqzsLi9h4RlLZK/HSyOmtrRoWFDQ2pLxOjM2zZ6Sa9zUZ0Z24X+xnYs6fm9p3wXYtdygnQJSBDXZg+PYeuxvSStBWfXzVUORgKT3j24Fu5DzP9zNtzoJEo/Hf3krd1SrOCUdF+/IOQkREpZ5uJ78u7WZSI8X8hgT4GSiHei1o5J4WixMe935krR3yoimhggLe6MdSLB7elZuZASRUBpLHd4+cR83IVcep6k9iwc9pa80OwtT4c9RpC2gPpbDhqIxX0FHqLzhJdYPTtVby3hms5BBhuocaUMyTzJSANlMgv114LGnwbUn32J5oomOqfqTOKQYxnY30yEeUnao8cGuDiY/AU952mmBIbz6RvvXXffHgNJm0JCUpFB2I3nZHiu0RVQOslEXfLaCgLqZ+uRAdyPVQRxswnvIZPAHUiIkmQL9qW7wTgNLKRnoedjyNASCVHedRNkWwcuvpCabh/IrQQW5RoS0WpqR+0x8MYnWEW58BSZqBYcqT2DIZbstqSekkoHobgHL1xDfVkK+rkDPixxWkHYA3w2g8hiRZKzN+/PUNyidm2hcnDtvSrz+8ALsKXknmVJZvwnDF8j23B9OZDX2fdvAaQ9QjnIOjxY5wgR1rydW7ULMl7jIN4JtHLvKOucQVfJ+mkS4O1a0K1nWgzP5LEqIHPqyc7X5rrt0GSCwEuTza8A1ucn4lIBc1TRfD4NBH0YmyS977D5YyBpxwKwpRUTEnq3FEJNZKLimkje5ak9xChBluCRvCSCuFwtKSBLb0XyxBn/aUECFhph5MZJzEbKV0Vl3g5YjR60nuEcEn7cFraxUuE1s3a46jRgAo4iVCwJoalYCHNarp3x2L4xHuDvkpDs6VHbS/12BF22n6jFhixUC5498eQFf+J3zxpPtPLlGq9z7trqnSXuxMpIZ8jORNhCPe8HESJmQvFwR+Ip47gOlnN9MiS7b6FKshWSJoHEayNKSy14YpRRnBjm4KFjEqlWVE6wftwY9w7aLXEvr94GOr1f+dLAv+Ym5TAYWOYpu3Cd0YqaLZ/n3NM1v+p6gc/k7665slorsmXXluxUltwb9zHGzLydiy1BkxXwjBMka6jvz2SHHzRhVWBFZQu25PpsC/fq7kxalzy5FbpA4uahyXwsceU3BPgoY2reTrI3Do3DSQ+SuIXWeQabi3pg6Ikzfp4vwZkC12pxM2UPY2dP+uRJ8raw0PhgUm8+bs5MySw8zF5Cv/jLp5s/UDLwDiGXV13VheDEM5a4vfBgnQk7SofGN2JSOZSsHLooX1iRqM37r4aEgst3T0LHluRh2wC5U4NswIXTBTiFE0Qs+Xxr3rZRT44+3gr2TsR9tclA2kvAs/O5Rf64YNX0ggyhA8V9eDmh1vOs5yuMxIfbY3R1M6HRthGLqF2wYA7m7XtkUwuCk8Fry29zzuleC6IEqccc6GO/vrPkIPnqilXZLPSgS8swyQ1D6r30JYfLEA/KB3N2d/S29/K4r98c8W0oxCL2kI1R/NXgQ0Z30c+3PGQTRVyF4qtA/7VGhRJXoVDiKhRKXIUSV6FQ4ioUSlyFElehUOIqFEpchUKJq1DiKhRKXIVCiatQ4ioUSlyFQomrUOIqFF8f/wswADL4dwyhwqGiAAAAAElFTkSuQmCC",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 101.02000000006228,
        "timings": {
          "blocked": 93.11099999969662,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.1459999999999999,
          "wait": 6.79799999927776,
          "receive": 0.9650000010879012,
          "_blocked_queueing": 90.49299999969662,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 106
        },
        "_priority": "Medium",
        "_resourceType": "image",
        "cache": {},
        "connection": "10534",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/images/banner-img_03.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"572422-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 852,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"572422-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 572422,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 226,
          "bodySize": 0,
          "_transferSize": 227,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.189Z",
        "time": 31.645999999454943,
        "timings": {
          "blocked": 24.91199999916379,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.09600000000000009,
          "wait": 5.028999999464955,
          "receive": 1.6090000008261995,
          "_blocked_queueing": 20.32399999916379,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 117
        },
        "_priority": "Medium",
        "_resourceType": "image",
        "cache": {},
        "connection": "10534",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/images/project/img-nav_2.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"9760-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 854,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"9760-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 9760,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.190Z",
        "time": 74.23000000017055,
        "timings": {
          "blocked": 67.73099999985506,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.125,
          "wait": 5.24299999941932,
          "receive": 1.1310000008961651,
          "_blocked_queueing": 66.60999999985506,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 139
        },
        "_priority": "Medium",
        "_resourceType": "image",
        "cache": {},
        "connection": "10512",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/images/project/img-nav_7.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"5710-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 854,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"5710-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 5710,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAWFUlEQVR42u2dCbQUxbnHv+npuXO5l31XlB0kKAgiBAjqBVxAAXmgAoEAahKPmmCIJk/NgkHUPONTY3JenqDRICiCbMoaZFNAZAmbsoMssguXu869M9097/vm3gvDMNNV1V093ZPH/5w+dc50dU1/3b+urvqq6msfcCj6rK8JJt/y5L0iz+oa34vRY4k/+niORACyMCl324IrsqUgAhBO/JELABJCcB6TWm5bcUWWVIA3v3ayHSIA7MGkrduWXJEl7UUArku2QwSAzzHp5bYlV2RJaxCAW5LtEAFgDib/4bYlV2RJcxGAIcl2iADwJiY/dduSK7KkyQjAI8l2iADwPCa/dduSK7KkSQjA75LtEAHg55i84bYlV2RJ4xCAvyTbIQLAMExmuG2JY2rg9glYVBFuZcxcwxGAD5PtEAGgDybL3bbXMTVz+wQs6jRuIWauvgjAimQ7RADogMl2t+11TJkKwAncwsxcHRGAHcl2iADQEJNTbtvrmDIVABqh0Zm5GiEAp5PtEAHADxXjAX63bXZEmQrAEdyipjkIDxoHSIoJNwAkhIAoytTmkrkyEQC6pewx2jN48xum2ikKwNeYtHfbbkeUiQBEcDvOzLUTAbg+1U5RAFZikue23Y4oEwGg7h+7VbYKAeidaqcoANSXfMBtux1RJgJQgtt3zFwzEYBhqXaKAkDepJ+5bbcjykQACnHLZ+b6KwLw81Q7RQH4PSZ/cNtuR5SJANDNL2TmmoAATEy1UxSARzH5H7ftdkSZCABV/yXMXI8hAH9LtVMUABpTnu223Y4oEwGgBiB7HGAoAjAn1U5RAGhG0Odu2+2IMhEAPjfwLQjAmlQ7RQGgeWW73bbbEWUiAHxu4HYIwJ5UO0UBqIvJWbftdkSZBgC5f49w5ayHAJxLtVMUAMpPb50st+2XrkwDgM8NTC+IbAQg5WiBEAAkhIBWl1zttv3SlWkA0K09wcx1HG9+E7MMVgDYgkknJ2zSa7eAcLM+4DPQOq0MfOESUMoLwFd2DpTQWUzPg09nt3osKdMAoEkgp5m5tiIAnc0yWAHgn5jc4YRN5W0GQtGAt1P8sYFAFINSdAz85/bFNvX0dtx2gFJ8HHy435YyDYBi4GmNLUMA7jTLYAWA6Zj80AmbytsMQAD+LnhCBgJwEtQTmyDryGoIHPkM/AWHxf880wAowO08M9f7CMBIswxWAHgVk/FO2GQJgMtO0MDaYS9kHVgKwX0LsIbYxndcpgHA5wZ+DQH4pVkGKwA8jclLTtgkBYAE+b/bBcE9cyG4ayb4i0wGzzMNAD438DMIwB/NMlgB4GFM3nLCJicAuCBsPGYdXAbVtkyGwLEvLt+faQDwuYF/jAC8bZbBCgCDMJnvhE2OAhAn9cRmqLbpr/iaWHyx8ZhpAFBlFmHmuhcB+NgsgxUAumPyhehxPEoXAFXyYw8iZ/2fIHhgSeYBcBQ3dsenBwKw3iyDFQBaYnLACZvSDUCV1GProcb+F8F/dr39wtIhfjdwKwTgoFkGKwBUh4oFSdLlFgCkenXrgL7zH6BsegaU8BlXzoFbGm7HuHLWQACKzTIIA0BCCEoxqSbbLjcBqF+/fiw1Ss6AsfaXoB6a7sp5cIlWZ5xk5grhzc9hZbIKAHlamkq3ywMAVEnfNxd86x4FpZztb0276PFjV1JHEABmy8YqABsw6SrbrnDzvlCS9wJE/VkQzcqFaADfNv6A7L9JqkQASEbRCYiuGAX+UyvTcg7c4nMDb0QAurEyWQVgASb3OGlj1OdHAHIgGqwFRm4DMGo0Ab1Wc9AadQK9XjvQazdHOOSNSicDIHYeegT0jZNA3T4JWGuw0iY+N/BCBGAAK5NVAN7BZKyb18CoVh+0xp0hck1PCLfoC3rdtmiNYrm8VABUSd83G5TPHwKf5kj7V0w0vYN9Gu8iAA+yMlkF4GVMfuX2dYiXXrsVlLe+G8qvuxf0hh2Fj2cBQDJoXGHpIFBCR901lt7/pcxcf0IAfs3KZBWAp+gP3L0KqaUhAGUdRiMMg/EVUpPrGB4ASEYhdsAX9QOl0MWpkdQDYMdt/RUC8Aork1UARmPyD/euAJ+M7DpQ1nEMhDo9DNHcRqZ5eQGIlYtdRVh0Fyj5W90xjHwAGjPXGARgKiuTVQD6YbLYHestnC/2JkKdHoJQl8chWq1O0jwiAJCMEDbDF2JNcG5z+g1ixwQg9UcAlrAyWQWgCyab0m+5PVGNUNr9KSi7cSyAcmn3UhSAWHkhbI190heU85xzDmSI3w18MwLApNMqAOQEsjDtxhvSGtwAxXe8GutSVskKACSj5DTA/F6gFO9P08kDrxu4GQLARMUqAEHgGY0WVKRJDyjtOg58ennF/L/ik+AvOgpK0XF8yg6Bv+Ab8Bnslx+XDVgDhG5+HGuEJwH8QcsAkIzzBxGCH4BSnoYQSnxuYBJNB2c2FS0BQHIifDzLFezDKlc9uzs2nh84tAICJ/+F/XJ2jDQzaY1uhMK7p0Dd1jfbKkc/vh6URX0RUHvnwxSfGzhlePhE2QFgHyatZdomOhZA08QDh1dBcPccyDq8MlZzWBG1DaKjpoK/hT3npvb1VFDXjpV5SS4XOYDOMXPtRwDa8BRnB4B1mPSQaZudwSCl5BQEv54B2TvwRhaKO2qizRTQb/4vUG960pYN2urxoO75s8zLcqmo3i1g5voCAejJU5wdAOZhcq9M26SMBmrlENwzB3I2vgH+fIF5K5XjZnq7caD0egV8imrtuuD/G3N74X871D2kQaBiZq75CMBgnuLsADAZk5/ItE3qcDC+DrJ3TIOc9a/EVhUxFTdwqrcYBUqft8BncbBJP7cffHO7gKI7MG7AFxp2CgLAFdrfDgA0PPYbmbY5MR+AGo65aybh62E6+KIm3pOEkXO9+XBQ+r5rGYLItjch8OWjUm2JiS8mwAsIAFdofzsAPIHJ6zJtc3JCCK0Yqr50HPiLU6wNSDJ1Qm85pqImUCwER40aoH3cD9RTn8o1hM8N/AsEgKshYgcAWh4mdd6U0zOCqDaovmw8BA8k8WKnmDujtX8S1F7Wxr30cwfBN6cjKAZ76I5bfG7gkQjA+1zXxOp5IAB9MZGKd1qmhOGTWe3LVyH3C7qpcVfSZPKU1u0NUDtZi44X+fJFCGyT9KEVmgbO18G5HQHgCu1vBwDp4ePTOScwuOujWG1wwXdgAkDUFwDjrsXgb9pH+H+McAiiH3YAf+ig8LGXiS80LCllePhE2QGgMfCEKBBQedtBUHSPI6vOkoqcSDU/eRB8kRLmwhAjeBXAkI2g1BCPjRHZPQsCnw0TPu4y8YWGJV2FAHA5jO0AQB1lenysz8NKkJHTIDaZIxqoBtFgbdBpHmCdlqA3uCEWPAIs9s3NFDi6FmrOHwW+q9krLfVGfUAZuFS4URjF144+szuoBTYHUPlCw9KLgsLDcw2aWAYgZtizPjqdevas4hPBEWnSHcKt+kG4xe0Qza5jv9BKBQ4th5pbx4LPYLuStS6vgtrlF8L/oR1YAuryu+2dKJ8b+CzefO6RLbsA7MTke/assvC/gdwYCDTTR7vK3iBOleqcXgj+NQ8Bq4kdVXLAGLIV/HUFh0GiUYjM7AGBgg3WT5LPDbwLAeAO6W8XgFWY3GanDLsKX3sLlP7gGdsg0HCwtu43oH7FDn2gN74L/AMX4dUTu3yR3XOwLXCf9ZPkcwOvRgDyeIu0C8AsTGxYJEs+KG83BIpvmwjRHGsfNCEAooYGxif9wX+K3YPS8j4Cte0QjpLjrpcWBv2D60ENWVxby+cG/ggBuJ//ytkQAkCBox3wd1qTkV0Xivu+DOG2g4SPvbA2sAg7NrM7MReI6rltQHlgG/gC2UL/o238b1C3WJxRz+cG/hsC8BhvkXYBmIDJc3bKcEKhTj+BklufE1pWFj8jSNuLT/cq9ncxtK5/AbXz40LnphedAWVGM/BFLUyo4gsN+xwCwB3S3y4Ang0fH26WB0X3TIktLeNR4pQwbdF9oH47x/QYPbsp+IbvAiVLbKF0ZOEwCBybJWYQ/2RQ0/DwibILAL3/BS1Jn2jSZ8GQD7m6jJetDj5/GHyzO4Cim7e6tO6TQe34Y6HziuxbCIGVA8WM4QsNS7ofAfiIt1i7AFAPYJWdMpxWpHFnKBw6G6JZ1U3zJZsUqq37HfYKXjA9Tsv9HvhHbBdyDhmRMoi+1xT8Gturc0F8oWFJeQjAat5i7QJAPoCddspIh8It74TCge+aehKTLg8PYcd7RltQIuY3SrvjU1BbiI0TRJaMhcAR5sKdi+J3A7dHAHbxFmsXAPICCmDsnkq7jY/5C1Ip1bRwbf3zoG6fYFp25NrhEOjPNfp68Zjd8yDwmUA3ks8NHDMFAeAO6W8XADqeKif5TvpKGVk1INz6bog06x0bGwCsapWSM6Ce2ADBPfPBX8T3YoyiqYVDZmI5yf1WqQDQS86C74PmoBipxwoMpRpERxwFf25dbrv00vPgm94ElCjnNHK+L4SR/z/LLDx8omwBQEII6M3U2G45yU4tdONYKO35dOpGnB6G7O1TIXftCxUjegwRQOd/9Bn2DGpcts9sYYi24jFQ9/+vadlaz3dAvWGMkIXhWXmQlf8ZX2a+0LAn8eZfJXIOMgCgOQEd7JZzSZk+PxTf+TqUt+cbQqVwsLVm3w9KKTueT6jLo1By6+XdZDMAIsc2QmDh903LjTQeBIFB84Ts1NZiI/PrF/gy84WG3YEACAVHkAHAMkxut1tOvEpuex5CNz0idIx6cgvUmjmQ+T0Bij+UP2YtGLUunQBgBkAUa1T9gxtBLf4qZR7DXxNg5LegZJv3NuIVPrACspZzXjq+0LCfIgBCofxlACA1fDwN+RbcP89SuJectS9BzobXmPnK2g+H4rveuOQ3ZoiYDS+Cf6v51K7I7csh0LI38EorPAP+D5uAj2foni80LDM8fKJkAEAzg5+wW06VCgdPh3ALa9+joEmfdafcyFwiRgtD8x/aCEbc7B4WAJHjWyGw4CbTPFr7/wS1l1gg9ci0DhAo/ZqdkS807J8RAKHJCjIAoLUBk+yWQzKCteHcI1/Ziv5Vc94PIesb9lxVihNQ2uNiCB0WADRSqE9rC2rZoZR5wvV6Q9ZQrrmYF49ZMAyyjjOcqfxu4N8iAJyNigrJAIBWB022Ww4pclVXKBi+0FYZvK8BCjOXP+aLWLeSxLM8PLJ4JASOfpC6TLU+KKOPgU/lH4TS1j6LDcE/mmfidwP/FAGYInK9ZABA6wPFmr8pRFG+ishjZ0PZ/5oM1VfzTcM+P2IJaI0rqnUeALTtb4G63nzFVWTwXgg05J8tFNk5AwJrGE0ofjfwYARAKJS/DABohfA6u+XE7Gx6KxQO5R7HSKpqX74Guev43sMlPZ+G0PcrvqjCVQN8uxkCi8wDpEZ6fwyBNsz4jBdtProJshYzAnryfSGM1BMBEArlLwMAwn2f3XJI5KjJf3izrYCPNRY/BsHdfBDFehwPVHxPgQcAvfgsKO83xouWelBe6/o6qJ3HcZ9vJP8YBGZda56JLzQsqQ0CIBSrRgYANODODlzKqfyRy0FvaNGvhK3/ulM6gxLic5obwVrY6NwZmzjCA0Bsevd7rU0bglrbn4Ga9wazrAunHCoC/3uMOQt8oWFJtREA9rTRONkGIHZhnvVRJSU2NyqFyq4fAcV3WguwENw5E2osFVvClT96Dej12nLHCIrMuQMC36Vu6UeuHgqBAfxTJKJaBHx/D5pn4gsNW4Y3XziEvywApIWPj2L1X3DfXNCuEQs+4iv9DupM6x2LFCKiwnunxYaLuQFY+iMIHE69JjZSNw8C960QM3oy45XH5wbmCg9/2XUTPSCZEABa8tJFRlkkI7dRzBuo12nFZ0S4ONb/DxwT/+RL0R2vQfkNI7kB0FY+Duq+1DOutFo3gzpMcO4/CwC+0LCbEQDhufGyAKD11v1klFUlo1q9WCy/cKv+pvn8Z3fHGn7qma84S75UJbdMiIWL4wVA//wp8O96NeV+LacdqKME58iwAOBzAy9BAPozcyVIFgAUN3i0jLISRQs/yjqOBu3qbmBkV0Q+82nloJ7ahq392bF4QHY+KF2K3cDSbk9AvUZNuPIbGyeCf+vElPv16teBMoLDtRsn3xTGdAo+N/BUBEBsPBrkAUCL7Z+SUZZr8upn4/jdwK8gAMILDmQBQH/8clovjGx5FQD+0LC/RgCEQ5nIAmAsJu+k87pIl1cB4A8N+yAC8K5o8bIAoBCbC9J5XaTLqwDwhYYlDUAAhEfSZAFA3Y+Nab0wsuVVAPhiApC6IgDCEShkAZDR4eNj8ioAfDEBYhbwhIdPlCwAyAUpMRaaC/IqAHxuYFIOAiAcqlwKACSEgE6Tf0ak1+RVAPi+EFaMN78Gu7DLJRMAGobk8916UV4FgM8NfAABsBS6XyYANBGhe9oujGx5FQC+0LDrEQBLoftlAkBTkcRDc3hFXgWALzTsxwiApdD9MgGgCI8Pp+3CyJYXAeAPDfs2AiAWpKBSMgF4EZNnbBfklrwIAH9o2JcQgGet/IVMAGhBAns+tlflRQD43cDjEQBLoftlAiA9fHxa5UUA+N3A3OHhEyUTAFrP9c+0XBgn5EUA+N3AdyIAy6z8hUwA6DOcW9JyYZyQFwHgdwN3RgAsfclaJgAUmICvyeJFeREAvtCwpKsRAEuh+2UCQAviymWWmVZ5CQDq99OVpOqfPReQclN4eHbOJJJ6sxACYpY/UI6X5DYA5O0LVW4UCII7yg+cw5tvOWS/bAB2Y3KdM1fIYaUbALrBdKOrbril5zemPQhAO6sHywaAIh7dIrPMtCkdANBNjr/p/E+5mT5HAG61erBsAGhV5lCZZaZNTgAQ/5TTxvURF2HNRgAsh+yXDYCnwscLSRYA9JRX3XBqyMl5ys0kFB4+UbIBoPhrv3fcZCdkFQAasImv1p15ys00EQGYYPVg2QBQ+Iw3034JZEgEAFqIFH/T3dUjCIDlED3S++wIQQuoWCdIU8UpgrLwkmVXZAZA/FNOG/ujDU6KzoCWH9MUcFoP+I2dwhx12iAMtPCdgvPS99IICu92ERMBoKc8/l3urvbgtgS3RVDxUShpZ5RWrx0C0RIuwuCt2uEaqHjKq550bzzlsZuON1zCd2eTyzW3LcJAEUXyoAIGWtbc1q1z8Yj24kbL7Ommr8KbnpbWhWf89pXBpqpgoHir3qkdnBE95Suh8qaLBneSJc8AEK+42oFeFwSEpSnPHhTdZLrh9C5P21NuJk8CkKjK2qF/5ZYHmVM70FO+Cipu+mK3nnIzZQQA8aqsHagBSTDQK8NrtQPdZHqP001f4YWn3EwZB0CiEAhqPFa1HfJAUrg6AdENXgUX3+V73b4mIsp4AOJVuUiVagcCgtoPLR36K+qW0XucnvQVVhZlekX/VgAkqrJ2qGo7kEPKau1ATzl9i6/qXZ5RT7mZ/q0BiFdc7VDliGLVDvSUV3nfMvopN9P/GwAShUCQW5pqhl5Q4QekWJz0ba41UPGU73H7HNOh/wN3eqnq1kDa8AAAAABJRU5ErkJggg==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.190Z",
        "time": 75.83299999896553,
        "timings": {
          "blocked": 68.54899999839627,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.10299999999999998,
          "wait": 6.46999999997695,
          "receive": 0.7110000005923212,
          "_blocked_queueing": 67.50299999839626,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
          "lineNumber": 166
        },
        "_priority": "Medium",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "10512",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/css/cart/base.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"20544-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "style"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 798,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"20544-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 20544,
            "mimeType": "text/css",
            "text": "@charset \"utf-8\";\r\n/**\r\n* fengbuy.com\r\n* 2013.06.06\r\n*/\r\nbody, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form, fieldset, legend, input, button, textarea, p, blockquote, th, td{margin:0;padding:0;}\r\nh1, h2, h3, h4, h5, h6{font-size:100%;}\r\nul,li{list-style-type:none;margin:0;padding:0;}\r\nbody{background:#f9f9f9;font:12px/1.5 \"\\5FAE\\8F6F\\96C5\\9ED1\",Arial,HELVETICA;min-width:1200px;_background-image:url(about:blank);_background-attachment:fixed;}\r\nimg{border:0;}\r\nol, ul{list-style:none;}\r\n:link, :visited, ins{text-decoration:none;}\r\ntable{border-collapse:collapse;border-spacing:0;}\r\nsub, sup{font-size:100%;vertical-align:baseline;}\r\nblockquote, q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\";}\r\nblockquote:before, blockquote:after, q:before, q:after{content:\"\";content:none;}\r\ninput, button, textarea, select, optgroup, option{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;}\r\nbutton, input, select, textarea{font-family:inherit;font-size:100%;margin:0;}\r\nbutton::-moz-focus-inner, input::-moz-focus-inner{border:0;padding:0;}\r\ntextarea{overflow:auto;resize:vertical;vertical-align:top;}\r\ni, cite, em, address{font-style:normal;}\r\na{color:#333;text-decoration:none;}\r\na:hover{color:#09F;text-decoration:none;}\r\na.disabled, a.disabled:hover{cursor:default;pointer-events:none;}\r\n.clearfix:before, .clearfix:after{display:block;content:\"\\200b\";height:0;}\r\n.clearfix:after{clear:both;}\r\n.clearfix{*zoom:1;}\r\n.hide, .tmpl{display:none;}\r\n.wrap{margin:0 auto;width:1186px;}\r\n/* old compatible, deprecated! */\r\n.fl{float:left;} .fr{float:right;} .clear{clear:both;}\r\n.bold{font-weight:bold;} .f11{font-size:11px;} .f14{font-size:14px;}\r\n.tl{text-align:left;}.tc{text-align:center;} .tr, .a-right{text-align:right;} .nowrap,.nobr{white-space:nowrap;word-wrap:normal;}\r\n/* quick_links */\r\n.quick_links_wrap,.mui-mbar-tabs{height:100%;width:100px;right:0;position:fixed;right:0;bottom:0;z-index:9;height:100%;-webkit-transition:width linear .4s;-moz-transition:width linear .4s;-ms-transition:width linear .4s;transition:width linear .4s;_position:fixed;_bottom:auto;_top:expression(documentElement.scrollTop+documentElement.clientHeight-this.offsetHeight-10);}\r\n.quick_links_wraper.quick_links_dockright{margin-left:0;left:auto;right:4px;}\r\n.mui-mbar-tabs i,.ibar_closebtn,.login_order,.login_favorite{display:inline-block;background:url(../../images/ibar_sprites.png) no-repeat;cursor:pointer;height:19px;width:18px;vertical-align:top;position:absolute;}\r\n.quick_links_panel{\r\n\twidth:40px;\r\n\theight:100%;\r\n\tposition:absolute;\r\n\tbackground:#444851;\r\n\tz-index:2;\r\n\ttop:0;\r\n\tright:0;\r\n\tfont-family:'microsoft yahei',arial;\r\n\t\r\n}\t\r\n.quick_links_panel a{\r\n\tdisplay:block;\r\n\tline-height:200px;\r\n\twidth:40px;\r\n\theight:38px;\r\n\ttext-decoration:none;\r\n\tcolor:#d8d8d8;\r\n\tfont-size:12px;\r\n\toverflow:hidden;\r\n\tbackground-color:#444851;\r\n\tposition:relative;\r\n\toverflow:hidden;\r\n\ttop:0;\r\n\tleft:0px;\r\n\t*left:-15px;\r\n\tz-index:1;\r\n\tmargin:0;\r\n\tpadding:0;\r\n}\r\n.quick_links_panel .quick_toggle{\r\n\tposition:absolute;\r\n\tbottom:0;\r\n\tleft:0;\r\n\twidth:40px;\r\n\tbackground:#444851;\r\n\tz-index:1;\r\n}\r\n.quick_links_panel .mp_tooltip{\r\n\theight:38px;\r\n\tline-height:38px;\r\n\twidth:92px;\r\n\tposition:absolute;\r\n\tz-index:2;\r\n\tleft:-121px;\r\n\ttop:0;\r\n\tbackground:#444851;\r\n\tcolor:#d8d8d8;\r\n\ttext-align:center;\r\n\tdisplay:block;\r\n\tvisibility:hidden;\r\n}\r\n.quick_links_panel .mp_qrcode{\r\n\tpadding:10px;\r\n\twidth:148px;\r\n\theight:175px;\r\n\ttop:-157px;\r\n\tbackground:#fff;\r\n\tbox-shadow:0 0 5px rgba(0,0,0,.4);\r\n\tborder-radius:5px 0 0 5px;\r\n\tborder-left:1px solid #ccc\\0;\r\n\tborder-top:1px solid #ccc\\0;\r\n\tborder-bottom:1px solid #ccc\\0;\r\n\tz-index:3;\r\n\tposition:absolute;\r\n\tleft:-168px;\r\n\tleft:-169px\\0;\r\n\tdisplay:none;\r\n}\r\n.quick_links_panel .icon_arrow_white{\r\n\tposition:absolute;\r\n\tright:-5px;\r\n\ttop:172px;\r\n\twidth:5px;\r\n\theight:9px;\r\n\tbackground-position:0 -253px;\r\n}\r\n.quick_links_panel .icon_arrow_right_black{\r\n\tposition:absolute;\r\n\tright:-5px;\r\n\ttop:15px;\r\n\twidth:5px;\r\n\theight:9px;\r\n\tbackground-position:0 -234px;\r\n\toverflow:hidden;\r\n}\r\n.quick_toggle .return_top{display:none;}\r\n.quick_links_allow_gotop .return_top{display:block;}\r\n\r\n\r\n.quick_links{\r\n\tposition:absolute;\r\n\ttop:50%;\r\n\tleft:0;\r\n\tmargin-top:-190px;\r\n\t*margin-top:-220px;\t\r\n\tbackground:#444851;\r\n\tz-index:2;\r\n\twidth:40px;\r\n}\r\n.quick_links a.message_list{\r\n\tbackground:url(../../images/ibar_sprites.png) no-repeat;\r\n\tline-height:16px;\r\n\theight:133px;\r\n\tbackground-position:-23px -225px;\r\n\tcolor:#fff;\r\n\tmargin:20px 0 10px;\r\n\t\r\n}\r\n.quick_links_min .quick_links_panel{right:280px;}\r\n.quick_links li,.quick_toggle li{position:relative;display:block;left:0;top:0px;}\r\n.history_list,.leave_message,.mpbtn_histroy,.mpbtn_wdsc,.mpbtn_recharge{margin-bottom:6px;}\r\n\r\n.quick_links a:hover, .quick_links a.current,.quick_toggle a:hover{background:#ed145b;text-decoration:none;}\r\n.quick_links a.message_list .span{\r\n\twidth:16px;\r\n\tdisplay:block;\r\n\theight:48px;\r\n\tmargin:38px 0 0 14px;\r\n\tcursor:pointer;\r\n}\r\n.quick_links a.message_list .cart_num{\r\n\twidth:21px;\r\n\theight:21px;\r\n\tdisplay:block;\r\n\tborder-radius:50%;\r\n\tbackground:#ed145b;\r\n\ttext-align:center;\r\n\tline-height:21px;\r\n\tmargin:9px 0 0 10px;\r\n\tcursor:pointer;\r\n\tcolor:#fff;\r\n}\r\n.quick_links i.setting{background-position:0 0;width:18px;height:19px;top:10px;left:11px;}\r\n.quick_links a:hover i.setting,.quick_links .current i.setting{background-position:-33px 0;}\r\n.quick_links i.message{background-position:0px -29px;width:23px;height:18px;top:11px;left:9px;}\r\n.quick_links a:hover i.message,.quick_links .current i.message{background-position:-33px -29px;}\r\n.quick_links i.cart{background-position:0px -29px;}\r\n.quick_links i.view{width:18px;height:18px;background-position:0 -57px;top:10px;left:11px;}\r\n.quick_links a:hover i.view,.quick_links .current i.view{background-position:-33px -57px;}\r\n.quick_links .qa{width:18px;height:15px;background-position:0 -85px;top:11px;left:11px;}\r\n.quick_links a:hover i.qa,.quick_links .current i.qa{background-position:-33px -85px;}\r\n.quick_links .zuji{width:11px;height:24px;background-position:-4px -110px;top:8px;left:14px;}\r\n.quick_links a:hover i.zuji,.quick_links .current i.zuji{background-position:-36px -110px;}\r\n.quick_links .chongzhi{background:url(../images/chongzhi.png) no-repeat;width:35px;height:35px;top:2px;left:3px;}\r\n.quick_links .wdsc{background:url(../images/wdsc.png) no-repeat;width:35px;height:35px;top:2px;left:3px;}\r\n.quick_toggle .mpbtn_qrcode{width:18px;height:18px;top:11px;left:11px;background-position:0 -302px;}\r\n.quick_toggle .top{background-position:0 -201px;width:17px;height:14px;top:12px;left:12px;}\r\n.quick_toggle a:hover .top, .quick_links a.current .top{background-position:-33px -201px;}\r\n.quick_toggle i.kfzx{width:15px;height:16px;top:11px;left:12px;background-position:0 -175px;}\r\n.quick_toggle a:hover i.kfzx{background-position:-33px -175px;}\r\n/* quick_links_pop */\r\n.quick_links_pop{position:absolute;top:0;right:0;display:none;box-shadow:0 0 5px #999; border-radius:5px 0 0 5px;border:1px solid #999;behavior:url(js/htc.htc);}\r\n.quick_links_pop .arrow, .quick_links_pop .arrow i{display:none;border-color:transparent #ddd;border-style:dashed solid;border-width:12px 0 12px 12px;font-size:0;height:0;width:0;position:absolute;left:100%;top:12px;}\r\n.quick_links_pop .arrow i{border-color:transparent #f9fafc;margin:-12px 0 0 -13px;left:0;top:0;}\r\n.quick_links_pop .fix_bg{display:none;border-top-width:0;border-radius:0 0 3px 3px;margin:0 0 -4px -250px;height:2px;width:500px;overflow:hidden;position:absolute;bottom:0;left:50%;}\r\n.quick_links_pop .pop_panel{font-size:12px;width:100%;height:628px;position:relative;}\r\n.quick_cart_list, .quick_history_list, .quick_links_pop .links, .quick_my_qlinks, .quick_message_list,.quick_leave_message,.quick_mpbtn_histroy,.quick_mpbtn_wdsc,.quick_mpbtn_recharge{position:absolute;width:280px;left:0;top:0;background:#fff;height:100%;display:block;}\r\n.quick_cart_list .user_cart_inner, .quick_history_list .history_slider{display:block;border:0;margin:0;position:static;}\r\n.quick_cart_list .user_cart_inner .del{display:none;}\r\n.quick_history_list .title i{background-position:-170px -34px;}\r\n.quick_leave_message .title i{background-position:-160px 0;}\r\n.quick_leave_message .types{font-size:0;position:absolute;left:148px;top:18px;white-space:nowrap;}\r\n.quick_leave_message .types input, .quick_leave_message .types label{font-size:12px;margin-right:20px;vertical-align:middle;white-space:nowrap;}\r\n.quick_leave_message .types input{margin:-2px 3px 0 0;height:13px;width:13px;*margin-top:0;}\r\n.quick_leave_message .txt{padding:15px 0;}\r\n.quick_leave_message .txt textarea{display:block;background:#fff;border:1px solid #e8e8e8;border-radius:3px;box-shadow:0 1px 0 #fff, inset 0 1px 4px rgba(0,0,0,.1);margin:0 auto;padding:8px;height:68px;width:90%;}\r\n.quick_leave_message .token{padding:0 0 14px 16px;height:26px;}\r\n.quick_leave_message .token input{background:#fff;border:1px solid #ddd;padding:3px 4px;width:76px;vertical-align:middle;}\r\n.quick_leave_message .token img{margin-left:5px;vertical-align:middle;}\r\n.quick_leave_message .btns{float:right;margin-top:-42px;padding-right:16px;}\r\n.quick_leave_message .btn{background-position:0 -356px;cursor:pointer;font-size:0;padding-left:20px;text-shadow:0 1px 0 #355ba9;overflow:visible;}\r\n.quick_leave_message .btn:hover{background-position:0 -386px;}\r\n.quick_leave_message .btn span{background-position:100% -356px;font-size:12px;padding-right:20px;*height:29px;}\r\n.quick_leave_message .btn:hover span{background-position:100% -386px;}\r\n.quick_links_pop .no_data{color:#333;font-size:14px;padding:35px 10px;text-align:center;}\r\n.quick_links_pop .no_data i{display:inline-block;background:url(../images/cart_new.png) no-repeat 0 -188px;margin:0 10px 0 0;height:36px;width:60px;vertical-align:middle;}\r\n.quick_links_pop .links li{border-top:1px solid #f1f1f1;vertical-align:top;}\r\n.quick_links_pop .links a{display:block;background:#FCFCFC;color:#333;font-size:14px;padding:12px 15px;}\r\n.quick_links_pop .links a:hover{background-color:#F2F3F4;color:#4467a7;}\r\n.quick_links_pop .links .tips{float:right;color:#61c2ed;font-size:12px;}\r\n.quick_my_qlinks .title i{background-position:-200px 0;height:22px;width:22px;}\r\n.quick_message_list .title i{background-position:-200px -34px;height:22px;width:22px;}\r\n.quick_message_list .no_data i{background-image:url(../images/quick_links_no_msg.png);background-position:0 0;height:45px;width:62px;}\r\n\r\n/*修改*/\r\n.ibar_plugin_title{\r\n\theight:38px;\r\n\tline-height:38px;\r\n\tborder-bottom:1px solid #dedede;\r\n\tcolor:#333;\r\n\tfont-size:14px;\r\n\tfont-weight:700;\r\n\twidth:267px;\r\n\tmargin:0 auto;\r\n}\r\n.ibar_closebtn{\r\n\twidth:20px;\r\n\theight:20px;\r\n\tbackground-position:5px -267px;\r\n\tpadding:5px;\r\n\toverflow:hidden;\r\n\tposition:absolute;\r\n\ttop:4px;\r\n\tright:4px;\r\n}\r\n.ibar_plugin_content{\r\n\tposition:absolute;\r\n\twidth:100%;\r\n\ttop:0;\r\n\tbottom:0;\r\n\t_height:expression((document.documentElement.clientHeight-100-40)+\"px\");\r\n\toverflow:hidden;\r\n}\r\n.ibar_cart_group{\r\n\twidth:250px;\r\n\tpadding:0 20px 0 10px;\r\n\tbackground:#fff;\r\n}\r\n.ibar_cart_group_header{\r\n\theight:34px;\r\n\tline-height:34px;\r\n\tborder-bottom:1px solid #dedede;\r\n}\r\n.ibar_cart_group_title{\r\n\tfloat:left;\r\n\tfont-size:14px;\r\n}\r\n.ibar_cart_group_header a{float:right;color:#ed145b}\r\n.ibar_cart_group_header a:hover{text-decoration:underline;}\r\n.cart_item{\r\n\tpadding:15px 0;\r\n\tborder-bottom:1px dotted #ddd;\r\n}\r\n.cart_item_pic{\r\n\tposition:relative;\r\n\tfloat:left;\r\n\twidth:87px;\r\n\theight:87px;\r\n}\r\n.cart_item_pic img{\r\n\twidth:85px;\r\n\theight:85px;\r\n\tborder:1px solid #f4f4f4;\r\n}\r\n.cart_item_desc{\r\n\tfloat:left;\r\n\twidth:150px;\r\n\tpadding:3px 0 0 10px;\r\n}\r\n.cart_item_name{\r\n\tdisplay:inline-block;\r\n\twidth:100%;\r\n\theight:36px;\r\n\toverflow:hidden;\r\n\tline-height:18px;\r\n\tcolor:#5c5c5c;\r\n}\r\n.cart_item_sku{\r\n\twidth:160px;\r\n\theight:24px;\r\n\tline-height:24px;\r\n\tcolor:#999;\t\r\n}\r\n.cart_price{color:#ed145b;font-weight:700;font-family:Arial,Helvetica;}\r\n.cart_handler{\r\n\tposition:absolute;\r\n\theight:100px;\r\n\tbottom:0;\r\n\twidth:100%;\r\n\tbackground:#fff;\r\n}\r\n.cart_handler_header{width:260px;margin:8px 10px;float:left;}\r\n.cart_handler_left{float:left;}\r\n.cart_handler_right{float:right;font-weight:700;font-size:16px;font-family:Arial;color:#ed145b;}\r\n.cart_go_btn{\r\n\tdisplay:block;\r\n\theight:33px;\r\n\tline-height:33px;\r\n\tfont-size:19px;\r\n\tfont-family:SimHei;\r\n\tcolor:#fff;\r\n\ttext-align:center;\r\n\ttext-decoration:none;\r\n\tbackground:#ed145b;\r\n\twidth:260px;\r\n\tmargin:0 10px;\r\n\tfloat:left;\r\n}\r\n.cart_go_btn:hover{color:#fff;}\r\n.ia-head-list{\r\n\theight:66px;\r\n\twidth:244px;\r\n\tmargin-left:15px;\r\n\tbackground:#f3f3f3;\r\n\toverflow:hidden;\r\n\tzoom:1;\r\n\tmargin-top:15px;\r\n\tcolor:#4a4a4a;\r\n}\r\n.ia-head-list a{color:inherit;}\r\n.ia-head-list .pl{\r\n\twidth:80px;\r\n\tborder-right:dashed 1px #ccc;\r\n\theight:47px;\r\n\tmargin-top:10px;\r\n\ttext-align:center;\r\n\tfloat:left;\r\n}\r\n.ia-head-list .num{\r\n\tfont-size:16px;\r\n\theight:26px;\r\n\tfont-family:arial;\r\n}\r\n.ia-head-list .money{border-right:0;}\r\n.ga-expiredsoon{width:244px;margin-left:15px;margin-top:20px;}\r\n.ga-expiredsoon .es-head{color:#5c5c5c;height:13px;border-left:3px solid #5c5c5c;padding-left:13px;}\r\n.ia-none{background:url(../images/null_icon.png) no-repeat center 50px;text-align:center;padding-top:150px;padding-bottom:30px;font-family:\"微软雅黑\";font-size:16px;color:#797979;}\r\n.jiaru{margin-top:40px;}\r\n.ibar-history-head{\r\n\tposition:relative;\r\n\tfont-size:14px;\r\n\tborder-bottom:solid 1px #dedede;\r\n\theight:37px;\r\n\tline-height:37px;\r\n\twidth:255px;\r\n\tmargin-left:10px;\r\n}\r\n.ibar-history-head a{float:right;color:#ed145b;}\r\n.ibar-history-head a:hover{text-decoration:underline;}\r\n.imp_item{\r\n\twidth:255px;\r\n\tpadding-top:10px;\r\n\tborder-bottom:dashed 1px #d5d5d5;\r\n\toverflow:hidden;\r\n\tpadding-bottom:15px;\r\n\tmargin-bottom:-1px;\r\n\tmargin-left:10px;\r\n}\r\n.imp_item .pic{\r\n\tfloat:left;\r\n\tdisplay:inline;\r\n\tmargin-right:10px;\r\n}\r\n.imp_item .tit{\r\n\theight:40px;\r\n\toverflow:hidden;\r\n\twidth:140px;\r\n\tword-break:break-all;\r\n}\r\n.imp_item .tit a{\r\n\tcolor:#5c5c5c;\r\n\tline-height:18px;\r\n}\r\n.imp_item .tit a:hover{\r\n\tcolor:#ed145b;\r\n\tline-height:18px;\r\n}\r\n.imp_item .price{\r\n\tcolor:#ed145b;\r\n\tfont-weight:700;\r\n\tmargin-bottom:10px;\r\n}\r\n.imp_item .price em{\r\n\tfont-family:arial;\r\n\tfont-size:14px;\r\n}\r\n.imp_item .imp-addCart{\r\n\tbackground:#f32166;\r\n\tbackground:-webkit-linear-gradient(top,#fb2f72,#ed145b);\r\n\tcolor:#fff;\r\n\twidth:90px;\r\n\theight:28px;\r\n\tfloat:left;\r\n\tdisplay:inline;\r\n\tline-height:28px;\r\n\ttext-align:center;\r\n}\r\n.sc{float:right;line-height:22px;margin-right:7px;}\r\n.ibar_recharge_form{\r\n\twidth:220px;\r\n\tmargin:0 auto;\r\n\tpadding:15px 0;\r\n}\r\n.ibar_recharge-field{\r\n\tborder:1px solid #ddd;\r\n\theight:30px;\r\n\tmargin-bottom:10px;\r\n}\r\n.ibar_recharge-field label{\r\n\twidth:40px;\r\n\ttext-align:center;\r\n\tcolor:#fff;\r\n\tbackground:#737373;\r\n\tline-height:30px;\r\n\tfloat:left;\r\n}\r\n.ibar_recharge-fl{\r\n\tposition:relative;\r\n\tfloat:left;\r\n\twidth:170px;\r\n\tpadding-left:5px;\r\n\t\r\n}\r\n.ibar_recharge-iwrapper{\r\n\tpadding-top:7px;\r\n}\r\n.ibar_recharge-iwrapper input{border:0;outline:0 none;}\r\ni.ibar_recharge-contact{\r\n\twidth:13px;\r\n\theight:14px;\r\n\tbackground:url(../images/contact.png);\r\n\ttop:8px;\r\n\tright:5px;\r\n\tcursor:pointer;\r\n}\r\n.ibar_recharge-mod{\r\n\tline-height:30px;\r\n\tcolor:#737373;\r\n\tfont-weight:700;\r\n\tcursor:pointer;\r\n\t-moz-user-select:none;\r\n\t-webkit-user-select:none;\r\n\t-ms-user-select:none;\r\n}\r\ni.ibar_recharge-arrow{\r\n\twidth:6px;\r\n\theight:3px;\r\n\tbackground:url(../images/arrow-down.png);\r\n\ttop:14px;\r\n\tright:8px;\r\n\tcursor:pointer;\r\n}\r\n.ibar_recharge-vbox{\r\n\tborder:1px solid #ddd;\r\n\tbackground:#fff;\r\n\tposition:absolute;\r\n\tleft:0;\r\n\ttop:30px;\r\n\twidth:177px;\r\n}\r\n.ibar_recharge-vbox li{\r\n\tfloat:left;\r\n\twidth:68px;\r\n\tborder-right:1px solid #ddd;\r\n\tpadding:7px 10px;\r\n\tline-height:1;\r\n\tcursor:pointer;\r\n}\r\n.ibar_recharge-vbox li.sanwe{border:0;}\r\n.ibar_recharge-vbox .selected, .ibar_recharge-vbox li:hover{background:#ececec;}\r\n.ibar_recharge-btn{text-align:center;padding-top:3px;}\r\n.ibar_recharge-btn input{\r\n\tborder:0;\r\n\tcolor:#fff;\r\n\tdisplay:inline-block;\r\n\twidth:115px;\r\n\theight:31px;\r\n\tfont-size:16px;\r\n\tbackground:#f32166;\r\n\tbackground:-webkit-linear-gradient(top,#fb2f72,#ed145b);\r\n\tcursor:pointer;\r\n}\r\n.ibar_recharge-btn input:hover{\r\n\tbackground:-webkit-linear-gradient(top,#fa578c,#f73776);\r\n}\r\n.ibar_login_box{\r\n\twidth:267px;\r\n\theight:185px;\r\n\tpadding:10px;\r\n\tbackground:#fff;\r\n\tbox-shadow:0 0 5px rgba(0,0,0,.4);\r\n\tborder-radius:5px 0 0 5px;\r\n\tborder-left:1px solid #ccc\\0;\r\n\tborder-top:1px solid #ccc\\0;\r\n\tborder-bottom:1px solid #ccc\\0;\r\n\tz-index:3;\r\n\tposition:absolute;\r\n\ttop:0px;\r\n\tleft:-287px;\r\n\tleft:-288px\\0;\r\n\tdisplay:none;\r\n}\r\n.ibar_login_box .avatar_box{\r\n\twidth:267px;\r\n\toverflow:hidden;\r\n\theight:120px;\r\n}\r\n.status_login .avatar_imgbox{\r\n\tfloat:left;\r\n\tmargin:6px 20px 0 5px;\r\n\tdisplay:inline;\r\n}\r\n.ibar_login_box .avatar_imgbox{\r\n\twidth:100px;\r\n\theight:100px;\r\n\tborder-radius:50%;\r\n\toverflow:hidden;\r\n}\r\n.ibar_login_box .avatar_box p{\r\n\tfont-size:14px;\r\n\tcolor:#333;\r\n\ttext-align:center;\r\n}\r\n.status_login .user_info{\r\n\toverflow:hidden;\r\n\tcolor:#333;\r\n\tpadding-top:30px;\r\n\tline-height:24px;\r\n\twidth:140px;\r\n\tfloat:left;\r\n}\r\n.status_login .user_info li{\r\n\theight:24px;\r\n\tline-height:24px;\r\n\toverflow:hidden;\r\n\twhite-space:nowrap;\r\n}\r\n.ibar_login_box .login_btnbox{\r\n\twidth:267px;\r\n\theight:79px;\r\n\tborder-top:1px dotted #d5d5d5;\r\n\toverflow:hidden;\r\n\tpadding-top:15px;\r\n\tclear:both;\r\n}\r\n.ibar_login_box .login_btnbox a{\r\n\twidth:94px;\r\n\theight:30px;\r\n\tline-height:30px;\r\n\ttext-align:center;\r\n\tborder:1px solid;\r\n\tcolor:#333;\r\n\ttext-decoration:none;\r\n\tfloat:left;\r\n\tbackground-position:0 -408px;\r\n\tbackground-repeat:repeat-x;\r\n\tborder-color:#e9e9e9;\r\n}\r\n.ibar_login_box .login_btnbox .login_order{margin:0 10px 0 35px;}\r\n.ibar_login_box .login_btnbox a:hover{text-decoration:none;background-position:0 -366px;border-color:#fccadb;background:none;}\r\n.ibar_login_box .login_btnbox .login_favorite{border-color:#e9e9e9}\r\n.ibar_login_box .icon_arrow_white{\r\nposition:absolute;\r\nright:-5px;\r\ntop:15px;\r\nwidth:5px;\r\nheight:9px;\r\nbackground-position:0 -253px;\r\n}\r\n/*飞入购物车*/\r\n#plist{width:100%;height:auto;float:left;overflow:hidden;padding-top:10px;}\r\n#plist li{float:left;width:240px;height:auto;overflow:hidden;padding:0px 20px 20px 0px;}\r\n#plist .extra{padding:2px 0;height:16px;line-height:16px;overflow:hidden;color:#005aa0;float:left;padding-left:2px;}  \r\n#plist .extra a{float:left;font-size:12px;}\r\n#plist .btns{margin-top:5px;zoom:1;float:left;padding-left:2px;}\r\n#plist .btns a{float:left;height:19px;padding:0 9px;border:1px solid #ddd;border-radius:2px;margin:0 8px 0 0;background:#F7F7F7;line-height:18px;line-height:19px\\9;text-align:center;text-decoration:none;color:#333;background:-moz-linear-gradient(top,#f7f7f7,#f2f2f2);background:-webkit-gradient(linear,0 0,0 100%,from(#f7f7f7),to(#f2f2f2));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#f7f7f7\", endColorstr=\"#f2f2f2\");-ms-filter:\"progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#f7f7f7\", endColorstr=\"#f2f2f2\")\";}\r\n#plist.plist-n7a .p-img{height:240px;}\r\n.index_banner{position:relative;margin-bottom:20px;height:500px;}\r\n.index_banner li{position:absolute;top:0;left:0;overflow:hidden;width:100%;height:500px;}\r\n.index_banner li a{display:block;margin:0 auto;width:1000px;height:500px;}\r\n.index_banner .clert{width:100%; position:absolute;z-index:99;bottom:0;left:0;height:30px;line-height:30px;text-align:center;}\r\n.index_banner cite{z-index:999;height:15px;}\r\n.index_banner cite span{display:inline-block;margin:0 4px;width:10px;height:10px;background-color:#666;text-indent:-999em;opacity:.8;cursor:pointer;border-radius:5px;}\r\n.index_banner cite span.cur{background-color:#000;cursor:default;}\r\n\r\n.flei{padding-left:28px;}\r\n.flei a{display:block;background:url(store_images/xiala12497.gif) 125px 4px no-repeat;}\r\n.flei a:hover{color:#666;text-decoration:none;}\r\n.flei i{display:block;width:8px;height:8px;background:url(store_images/xiala12497.gif) -20px -102px no-repeat;float:left;margin:10px 8px 0 0;}\r\n#plist .btns a.btn-compare{padding:0;}\r\n#plist .btns a.btn-compare input{float:left;margin:3px 5px;}\r\n#plist .btns a.btn-compare label{margin-right:5px;}\r\n.main{width:1000px;margin:0 auto;}\r\n\r\n.settleup-2013{\r\n\theight:34px;\r\n\tposition:fixed;\r\n\tright:45px;\r\n\tz-index:900;\r\n}\r\n.shoping-small{\r\n\twidth:119px;\r\n}\r\n.fly_item{border:1px solid #000;width:38px;height:38px;overflow:hidden;position:absolute;visibility:hidden;opacity:.5;filter:alpha(opacity=50);}\r\n.shop_cart{width:106px;height:25px;line-height:25px;padding-top:8px; font-family:'microsoft yahei';font-size:12px;text-indent:34px;color:#000;position:absolute;right:50px;top:240px;}"
          },
          "redirectURL": "",
          "headersSize": 225,
          "bodySize": 0,
          "_transferSize": 226,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.190Z",
        "time": 88.67099999952188,
        "timings": {
          "blocked": 80.24300000001257,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.136,
          "wait": 6.929000000108383,
          "receive": 1.3629999994009268,
          "_blocked_queueing": 79.65100000001257,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/css/public.css"
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "10534",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/images/l2.gif",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"1098-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/css/public.css"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 843,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"1098-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1098,
            "mimeType": "image/gif",
            "text": "R0lGODlhAgAMAIAAAP///93d3SH/C1hNUCBEYXRhWE1QPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDowNDNBNzY2NUQ2QkExMUU1OUJBNkRBODI1RDY3Q0UzNSIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDowNDNBNzY2NkQ2QkExMUU1OUJBNkRBODI1RDY3Q0UzNSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjA0M0E3NjYzRDZCQTExRTU5QkE2REE4MjVENjdDRTM1IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjA0M0E3NjY0RDZCQTExRTU5QkE2REE4MjVENjdDRTM1Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5uLe2tbSzsrGwr66trKuqqainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359fHt6eXh3dnV0c3JxcG9ubWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JBQD8+PTw7Ojk4NzY1NDMyMTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYFBAMCAQAAIfkEAAAAAAAsAAAAAAIADAAAAgUMjKfJWgA7",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.284Z",
        "time": 9.566999999151449,
        "timings": {
          "blocked": 2.8309999994555257,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.1679999999999997,
          "wait": 5.0529999997692645,
          "receive": 1.5149999999266583,
          "_blocked_queueing": 0.7559999994555255,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/css/cart/base.css"
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "10529",
        "pageref": "page_11",
        "request": {
          "method": "GET",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/images/ibar_sprites.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "If-Modified-Since",
              "value": "Tue, 24 May 2022 06:04:11 GMT"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"5204-1653372251000\""
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/css/cart/base.css"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 856,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"5204-1653372251000\""
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:14 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 5204,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAADgAAAG2CAMAAAAdlbUwAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA3BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNS1jMDIxIDc5LjE1NTc3MiwgMjAxNC8wMS8xMy0xOTo0NDowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo4NGY2MDQ1MC1iODYxLTQ2YWEtYjUwYi1jYTMzODhmNGI3NjEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MTMzMjBBRkUyMDQwMTFFNDgxMjI5MjE1QjVFQTREODkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MTMzMjBBRkQyMDQwMTFFNDgxMjI5MjE1QjVFQTREODkiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTQgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDowNjVFRkE4MzBCRUQxMUU0QUVDODhGRENBNkUyNUI2MSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDowNjVFRkE4NDBCRUQxMUU0QUVDODhGRENBNkUyNUI2MSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PmgcJSYAAAMAUExURf///+0UW0RIUdjY2OPj4fX19fz8/P7+/v39/fb29vv7+/T09Pj4+Pr6+vn5+ff39/35+/3y9vzw9f77/P31+P79/fzu9PPz8/zv9f34+vzx9vzu8/33+f32+fzv9P33+v309/78/P78/f76+/30+P3z9/79/ldbZTE0O0VJUlxcXO0VXE1RWfrA01JVXrGytFpeZu8ra+4jZWlpafmxyKeoq/A2c/JTh5OVmf709/A9eIWHi//8/WtuddfX1/eWtmZqcdPT1PvQ3v7x9f/+/vq90f74+vBAetbW1ktPV15hae0YXvFJgM7OzvvF1v/6/Ly9v9HR0qSmqVhbY+8ycPNllIeJjvaFqu4fY+0XXf3m7lVZYfV6oouNknF0eo6Qlfidu3Z2dvWApvJWifmtxvRplklNVqusr/A5dba3uZudoLq8vvaKrZCSlu4cYYyMjM3NzfvI2Pze6Pq5zvvN3GJlbYCCiPeRs4KEifiow/R1n6Cipa+wsm5xd3V4fviivp2fo8/Q0b/Awf3h6nFxcf3q8M/P0MXFxnt9gXByeWBjavm2zNHR0frC1UdLVKiprKytr/zU4fNfj/Rznfza5UhMVbO0t8nJyX6AhvFDfHh6gMfIyfimwfFMg+8wbv7t8/zX42RnbvaPsdXV1cHCw/FEfJianY2Pkujo6ebm5nd6gPNcjWVlZbm6vPV3oHl5eWVob//9/v7v9PNhke0aYNDQ0KOkp/WDqKyusZaYm/mzyvRwm6amptzc28PExe3t7XN2fJubm/eaudnZ2fvK2vzT4M3NzrCxs2NjY8vLzJeXl/m0y/mrxGFka6mpqZ6gpO4naHR0dPJYi/JbjbS1t72+wLGytrKztW5uboiLkMvLy/aNr/v7/OHi4/Rumv7s8f7u8/71+P3j7H9/f8zMzfeUtPV9pIWFheDg38zMzPNdjl9fX/Nkk0RGTT1AR+Li4I2PlPeTtPHx8vLy8vDw8ImJidfY2X1/hevr656enru7u/7y9uPj46CgoNjZ1////1MhAAgAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAMYklEQVR42uzaBXjUWB4A8Jek6B6753vulplhmJnC0E5L3d2VuitUKC01ilZocXd3Z9FdbJFlgWXRdXe5W5dTLnlJZpKXpEzfce1+d/l/X9t8ZH7k5b2X/5MMIGEYto56JsvAHd+VBgHDktzdXW7hjuE/A/hZ00qKiaUmVWh9HTCRVoxAOoaCcZtWgfr5AMa6cCnsoPg4rQJvAD4WSOExAW5Rgd4CPCuFcQIcowLzBThaCksFOFUFZguwVQrbBfiVCiwQ4MtSGHqBc5GhKjBlLedeTUHaMTOEdSEtqu34vifrPA+iHYDsOElRJzN76Tk3qgGovon0nEkZk0g6Pp4mjUnNinBz8nJCn5CgJ8y5eSLY6Ut5wULGr6S8MhVgcBDY/yF7qYQ0EHDTDnumMbfnteSYW5wvc/CmQQbD1zG3FxDlPTk/iDl4xSLAJEoSbjKYCyTxCQ9D35TCWAMCU16RQncLBz0oJDIQuAcgcYSDMSicjcDzKJzOwR0XR0nimXoEJo6URvceDt7FDA3+v0NSFsak57KWoalDHOa3j5SfUIAX2a7eGxwJ+7ocRlJT61p6g6+C1oUHgXFePVJSiuoUJx5zzRSkpAAEEwRopmaTGRcXG0vayfpbhtAl9c3Uxh4xzAPTiSMjDz19roCYEmVJidqTB6KZ0Q6kU16hcRcMJt8Kckus0RhbmkTFSHLkGhCQkr/WYg16gTjrbja7Z+eC88x1ATmb2kcvJslCZnxlfgrpw1SjBBLTQYT+EEFUMuMr81OpbwCrIDxMMTfZaSQLfWgyLJ0kyygPKWwAzE0Gm4nK1XrCtoYg/MB4COuoUtIQsoTMojpo39sk7Uv5SOFCkE1YoqOIcnBDHzSfSA0CqyEMo0pIeutpMmyLgUxqJ02Ul0EKbeAcoU9eQNjOWojcAqIYBFggpNtiaVFrtFAnpSMPofd314ta4yCoJiAkl1A7xjmikZqLQCIKJI51xCpwnIelaEZGYTaSWJN5aCo6OkYUpUYUWrtqRosi+2kesiPkjh74d/GKqyQ6usIb25wIp0bEocTl/K1CGBbCzXCYUm+MV4I2T26Gw5Q6OkEEfSjYW9gJj5dJCUYA0EBwE56AYhEkl7kZuSfDbYdyUU98YoZ/n96QKBRVS48a/E/GDtpnXnwo3cu0MzWiJqFSjy5YDM0VJbGjSlYUqkFL3oYq9+6qxEoEmhpj4aqDVoPWBne46ghHr+jGuksm1aJaJrNuZrFsbbV+EwMbe1mURSxi4Cr5osxQ3zh3botJtaiEZcqq46MPWvVSSMe31E/y2ZfR2J6uDFMTPpyyfHXEkVUFa8Swx2eUkBnnhtEKMDyiW8iMx23hdkj7lDFz8gtZK70YWXJVDvWr/Zg5+drytABGVi23Q8NRRsxyMxjZCvIaQ8ugpWY/AP6TLWZm6QH2j04VYAbbhrdNdfCK1IUkGUxm23B+8cLX97OFXfs2DwvhDUa6mZZxs/qjNAIr4STjwFvFJ2bC2wxM5eBVOCn3nXaYnruRPYoJQ2AwXOYGrbuivxzNHp23cbATwqVJK8J2w5VZTCcK4Ww+LbfAVgtXZvOD+XVHCSzqsc4i6KiSUHTdUQWL6h3cBR2oSuErxyMSgjKuJS94yCpn/KsQ+HEtuXa8vQNkxCyN9WUuF+Ibu7QsQ6EDJJ9Pcw9iLhcd5J7md8TRc+hJWfNulW3aVHZr3sdXFXvO5vKaKL9Fi/yiapKD9QLU0qMGcceOnhVuHnBaZGh/rkOpyx1KnLwHTossBbk37F2OTGc3EDbWkeRXbczBbqMMmtkNhGhmlvyyP3NQaxbgLfg4eWVmwpxDLZHBKPg4BdzcGQAPonjoI6ziZ/MHPgiMEFbx0/mDCA5uRfcBshCYjO4DlHNwKgqvIbAVha0cdEOhGwLfQuFkDjajcBwC81A4loN0k9TNRWtVHyh1x+1jh0TGFcrHDonMr3QkqyRfgc1qVxof9W8HCcy/QC8ekeMvcm6eUWVETuAWqaDGjAzldAWsT/WhXL8B1qdeti9HZrC7Vb1MkAimH0wmCDmki5roXqG+K1AvgcL5ESO0nKPBvkJ+W6XQZ9tLyp/i1o6HbK8vUoDrV1ZcA0Ad2mqmJIvOc5Am4x4/CrbFqEE98UKtN5jeIIOdpafAnRfbmsAQZWjNnQmyo7vPgv0InApC7pieM+xrK1WGyeBcdkJBiq07F4GghOzZl9m+QzbLFT7Vqg+3rc4by09yHfDj9Arfh5jc8OUkZfiyeWHVa8z5c8UIXLyRz2JjlGH4Of78BgT6CunvqDKsEs57o/fIx4g6lXvkI2iBCrzT0zvMDleEL5aGkr3B6NxKQgkOjZPnRjH0fEFIjQ74KXvia4MqhG9m0lLk8DZ7YjupCq+w56sJOWwZwZz41KQKx8I3HWvkkNzE/pfTVCExGg6NCjDpRfaMmyosgIucPXIY/xJs/3Fq0LwItv9mGeQ73R01yE+vsuXwEjxRpgq5eUCDHJbBE0WqsAGef0sOM7cx//5Ssypczc7kFkXIIV2x/dSXHrQq1C+snlmbiGYAbdDRIParGXp93db6TIN9nx2dBAZ716ZFp9V6BwvzQA4at4S4sPHu7tOKMOFyAJ+SAy4niGDL4y72eMYgh3n+okm5f54dbv3IRRRL01G401OyDPDcycNlLtJYGSqFVndk4eFuhTD9MQS6XJPCQHTFAgIhPIw6l3fjxXA5kMdyBi5+XAZdjomhtwJkxlfQIXcus8WwVgH6MbBCAb4rzj1pCvAAu35UgC7iN+2eCpDpqODYveABlSsmKbjHxPfop3KP6xXgbmdqlY6VwyQx3KwAN7MdQF6t/zI41XMKI1HocY+++hrXV8n1SGedRzv5dJDNkl53cbHseVwgvqb7AseDbIpxtEQGrZABrMft7rJVnDrIjib2qh9tyjKq5hw/f+Dvh+YcNlulrw9z5CpSy+QadGKY8ylqo5Zei1fuMfAFS9ffwcxVVvHcmoV1IXGZ+1aM8u1Qgws989+PSBz52k0pDAtZtqxoSVxzVmy6MrR5njjRFZWfV+6+RgIzi7hd+cbddcpwZxeX6Rpqp4ihKa5E+ApanEkJWq8Ia7LWfKsIir+E5KEEx4se//EDCo1u7JuVJo+imKYKoxI0b2AXHYHju+YHbjBL2pHdt1xBGtNVOwD7Zi6RMK9BOwC9xYui2mbtUIWp3sw0x98/EYUkffpw09RxtHqXSz14JbCVWcxLYWjWJVgzl7JClWFKOffiaWZ5ihiGnbRX6skwJWirtldqtc0BTbNEzdFmksNiyXzMvoMApkm2ZafJ4TrJiLNOS1YavE+QUvuE8E0gQIg3re1Q8vUxJcj0UyVIUarS7gQphvyzoQ75Z0OhqOoh+/LagEHu5sS/lXbICNFv+xWpu8IPpdSeXAtyP8DxHaL7BJWKKoG9FPXuva5I3CfI1WovkKvVvrSjljo0iAH//CeV+Ms9oM8fVWKSVqvfsCUS/toKf1GGv5rD3+3s7yv2d61qnVyD/QsBNgTYEGBDgA1Bf1+xv2tV6+Qa7OfUwcbg957McXXd++R7g51+WuAHZ83Q6XSuTzC/ZszqAxzyqE43YeIwAAZNnKDTPTrEafiUznWOsJc1x1X3lLPwEZ3rdscu2HZX3SPOwaE5zCefH8qxbY+CObqcoU7BSN0EAGZsfZB1p2a8A8AEXaRT8IxuIgD/ePaNhwH4/PobgwCYqDvjFMzRDWOvtff6ts9yWAeG6XKcgrtc4d0Nesf1+t6H4aHrLufgLq5ePnPVzeaOdrk6WVS2fODBd67/84Np8Nq6vc5XDhj+xYxT4G8fFA1xvnJgcwyf8OzXDJ/4xBnnm4PpAHPAX5/dBm/vsS/YDjDY+S73wOd8jxvsfJfD7+T8YzWo748V/yA/AR/kyD5lADD4+SdzdjGp4/k+pA4tIWsQD1L23Vyqt31dBcj9pezblc5DYRPQcfS/B3ErB7c5BrrnsL/7Xjl9hfbm6AO7P5AvM/Xfh7iVY2+PPkItPWpQgxrUoAY1qEF5aK9KNfjNgUMwA/wBM8APMAMf/gYzwK8xA3wPM/DhbzEDfBsz8OGPMQP8EjPAzzAD/BwzwPcxAx/+DjPArzAD/B4zwHcwAx/+BDPAdzEDH/4IM8AvMAP8EDPw4U8xQxvKNdjf8xxsOBQzBgAOxowBgMMxYwDgCMzAhw9iBj78FmYMAHwIM/DhMMwYADgIMwYAPoAZAwAfxox/CzAAOQsu1rQVQXYAAAAASUVORK5CYII=",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 224,
          "bodySize": 0,
          "_transferSize": 225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.284Z",
        "time": 9.203999999954249,
        "timings": {
          "blocked": 2.4899999990458603,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.08099999999999974,
          "wait": 4.9770000005419135,
          "receive": 1.6560000003664754,
          "_blocked_queueing": 0.51299999904586,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "298537",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
                "lineNumber": 9637,
                "columnNumber": 9
              },
              {
                "functionName": "ajax",
                "scriptId": "298537",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
                "lineNumber": 9175,
                "columnNumber": 14
              },
              {
                "functionName": "getCartProductsNum",
                "scriptId": "298542",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
                "lineNumber": 178,
                "columnNumber": 3
              },
              {
                "functionName": "",
                "scriptId": "298542",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/showPublic",
                "lineNumber": 173,
                "columnNumber": 2
              },
              {
                "functionName": "fire",
                "scriptId": "298537",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
                "lineNumber": 3118,
                "columnNumber": 29
              },
              {
                "functionName": "fireWith",
                "scriptId": "298537",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
                "lineNumber": 3230,
                "columnNumber": 6
              },
              {
                "functionName": "ready",
                "scriptId": "298537",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
                "lineNumber": 3442,
                "columnNumber": 12
              },
              {
                "functionName": "completed",
                "scriptId": "298537",
                "url": "https://payment.xidian.edu.cn/NetWorkUI/lib/jQuery%201.11.1.js",
                "lineNumber": 3473,
                "columnNumber": 9
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "10529",
        "pageref": "page_11",
        "request": {
          "method": "POST",
          "url": "https://payment.xidian.edu.cn/NetWorkUI/getCartProductsNum",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "Accept-Language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "0"
            },
            {
              "name": "Cookie",
              "value": "JSESSIONID=72412E4EE7FEEAB92AEE2AC56A4DEDE3; JSESSIONID=181DB67C7DE4513BC59EC061C2A0FE9C"
            },
            {
              "name": "Host",
              "value": "payment.xidian.edu.cn"
            },
            {
              "name": "Origin",
              "value": "https://payment.xidian.edu.cn"
            },
            {
              "name": "Referer",
              "value": "https://payment.xidian.edu.cn/NetWorkUI/showPublic"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "JSESSIONID",
              "value": "72412E4EE7FEEAB92AEE2AC56A4DEDE3",
              "path": "/NetWorkUI",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            },
            {
              "name": "JSESSIONID",
              "value": "181DB67C7DE4513BC59EC061C2A0FE9C",
              "path": "/",
              "domain": "payment.xidian.edu.cn",
              "expires": "1969-12-31T23:59:59.000Z",
              "httpOnly": true,
              "secure": false
            }
          ],
          "headersSize": 784,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Cache-Control",
              "value": "max-age=86400"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "73"
            },
            {
              "name": "Content-Type",
              "value": "text/plain;charset=UTF-8"
            },
            {
              "name": "Date",
              "value": "Sat, 12 Oct 2024 02:12:20 GMT"
            },
            {
              "name": "Expires",
              "value": "Sun, 13 Oct 2024 02:12:20 GMT"
            },
            {
              "name": "Server",
              "value": "nginx/1.21.6"
            }
          ],
          "cookies": [],
          "content": {
            "size": 73,
            "mimeType": "text/plain",
            "compression": -1,
            "text": "{\"list\":[],\"productSubNum\":0,\"returncode\":\"SUCCESS\",\"returnmsg\":\"成功\"}"
          },
          "redirectURL": "",
          "headersSize": 254,
          "bodySize": 74,
          "_transferSize": 328,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2024-10-12T02:12:14.296Z",
        "time": 6059.0400000000955,
        "timings": {
          "blocked": 3.299000000583823,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.30099999999999993,
          "wait": 6054.30400000056,
          "receive": 1.1359999989508651,
          "_blocked_queueing": 1.7050000005838228,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      }
    ]
  }
}